/*
///////////////////////////////////////////////
// This File has been generated automaticaly //
// by Expressik generator                    //
//  Powered by : Eve CSTB                    //
///////////////////////////////////////////////

 * *************************************************************************
 *                                                                         *
 *     STEP Early Classes C++                                              *
 *                                                                         *
 *     Copyright (C) 2007 CSTB                                             *
 *                                                                         *
 *                                                                         *
 *   For further information please contact                                *
 *                                                                         *
 *         eve@cstb.fr                                                     *
 *   or                                                                    *
 *         Mod-Eve, CSTB                                                   *
 *         290, route des Lucioles                                         *
 *         BP 209                                                          *
 *         06904 Sophia Antipolis, France                                  *
 *                                                                         *
 ***************************************************************************
*/

#include "ifc2x3/SPFWriter.h"

#include "ifc2x3/ExpressDataSet.h"
#include "ifc2x3/Ifc2DCompositeCurve.h"
#include "ifc2x3/IfcActionRequest.h"
#include "ifc2x3/IfcActor.h"
#include "ifc2x3/IfcActorRole.h"
#include "ifc2x3/IfcActorSelect.h"
#include "ifc2x3/IfcActuatorType.h"
#include "ifc2x3/IfcAddress.h"
#include "ifc2x3/IfcAirTerminalBoxType.h"
#include "ifc2x3/IfcAirTerminalType.h"
#include "ifc2x3/IfcAirToAirHeatRecoveryType.h"
#include "ifc2x3/IfcAlarmType.h"
#include "ifc2x3/IfcAlignmentElement.h"
#include "ifc2x3/IfcAngularDimension.h"
#include "ifc2x3/IfcAnnotation.h"
#include "ifc2x3/IfcAnnotationCurveOccurrence.h"
#include "ifc2x3/IfcAnnotationFillArea.h"
#include "ifc2x3/IfcAnnotationFillAreaOccurrence.h"
#include "ifc2x3/IfcAnnotationOccurrence.h"
#include "ifc2x3/IfcAnnotationSurface.h"
#include "ifc2x3/IfcAnnotationSurfaceOccurrence.h"
#include "ifc2x3/IfcAnnotationSymbolOccurrence.h"
#include "ifc2x3/IfcAnnotationTextOccurrence.h"
#include "ifc2x3/IfcApplication.h"
#include "ifc2x3/IfcAppliedValue.h"
#include "ifc2x3/IfcAppliedValueRelationship.h"
#include "ifc2x3/IfcAppliedValueSelect.h"
#include "ifc2x3/IfcApproval.h"
#include "ifc2x3/IfcApprovalActorRelationship.h"
#include "ifc2x3/IfcApprovalPropertyRelationship.h"
#include "ifc2x3/IfcApprovalRelationship.h"
#include "ifc2x3/IfcArbitraryClosedProfileDef.h"
#include "ifc2x3/IfcArbitraryOpenProfileDef.h"
#include "ifc2x3/IfcArbitraryProfileDefWithVoids.h"
#include "ifc2x3/IfcAsset.h"
#include "ifc2x3/IfcAsymmetricIShapeProfileDef.h"
#include "ifc2x3/IfcAxis1Placement.h"
#include "ifc2x3/IfcAxis2Placement.h"
#include "ifc2x3/IfcAxis2Placement2D.h"
#include "ifc2x3/IfcAxis2Placement3D.h"
#include "ifc2x3/IfcBSplineCurve.h"
#include "ifc2x3/IfcBeam.h"
#include "ifc2x3/IfcBeamType.h"
#include "ifc2x3/IfcBezierCurve.h"
#include "ifc2x3/IfcBlobTexture.h"
#include "ifc2x3/IfcBlock.h"
#include "ifc2x3/IfcBoilerType.h"
#include "ifc2x3/IfcBooleanClippingResult.h"
#include "ifc2x3/IfcBooleanOperand.h"
#include "ifc2x3/IfcBooleanResult.h"
#include "ifc2x3/IfcBoundaryCondition.h"
#include "ifc2x3/IfcBoundaryEdgeCondition.h"
#include "ifc2x3/IfcBoundaryFaceCondition.h"
#include "ifc2x3/IfcBoundaryNodeCondition.h"
#include "ifc2x3/IfcBoundaryNodeConditionWarping.h"
#include "ifc2x3/IfcBoundedCurve.h"
#include "ifc2x3/IfcBoundedSurface.h"
#include "ifc2x3/IfcBoundingBox.h"
#include "ifc2x3/IfcBoxedHalfSpace.h"
#include "ifc2x3/IfcBridge.h"
#include "ifc2x3/IfcBridgeContactElement.h"
#include "ifc2x3/IfcBridgeElement.h"
#include "ifc2x3/IfcBridgePart.h"
#include "ifc2x3/IfcBridgePrismaticElement.h"
#include "ifc2x3/IfcBridgeSegment.h"
#include "ifc2x3/IfcBridgeSegmentPart.h"
#include "ifc2x3/IfcBridgeStructureElement.h"
#include "ifc2x3/IfcBuilding.h"
#include "ifc2x3/IfcBuildingElement.h"
#include "ifc2x3/IfcBuildingElementPart.h"
#include "ifc2x3/IfcBuildingElementProxy.h"
#include "ifc2x3/IfcBuildingElementProxyType.h"
#include "ifc2x3/IfcBuildingElementType.h"
#include "ifc2x3/IfcBuildingStorey.h"
#include "ifc2x3/IfcCShapeProfileDef.h"
#include "ifc2x3/IfcCableCarrierFittingType.h"
#include "ifc2x3/IfcCableCarrierSegmentType.h"
#include "ifc2x3/IfcCableSegmentType.h"
#include "ifc2x3/IfcCalendarDate.h"
#include "ifc2x3/IfcCartesianPoint.h"
#include "ifc2x3/IfcCartesianTransformationOperator.h"
#include "ifc2x3/IfcCartesianTransformationOperator2D.h"
#include "ifc2x3/IfcCartesianTransformationOperator2DnonUniform.h"
#include "ifc2x3/IfcCartesianTransformationOperator3D.h"
#include "ifc2x3/IfcCartesianTransformationOperator3DnonUniform.h"
#include "ifc2x3/IfcCenterLineProfileDef.h"
#include "ifc2x3/IfcChamferEdgeFeature.h"
#include "ifc2x3/IfcCharacterStyleSelect.h"
#include "ifc2x3/IfcChillerType.h"
#include "ifc2x3/IfcCircle.h"
#include "ifc2x3/IfcCircleHollowProfileDef.h"
#include "ifc2x3/IfcCircleProfileDef.h"
#include "ifc2x3/IfcCivilElement.h"
#include "ifc2x3/IfcCivilElementPart.h"
#include "ifc2x3/IfcCivilSheath.h"
#include "ifc2x3/IfcCivilStructureElement.h"
#include "ifc2x3/IfcCivilVoid.h"
#include "ifc2x3/IfcClassification.h"
#include "ifc2x3/IfcClassificationItem.h"
#include "ifc2x3/IfcClassificationItemRelationship.h"
#include "ifc2x3/IfcClassificationNotation.h"
#include "ifc2x3/IfcClassificationNotationFacet.h"
#include "ifc2x3/IfcClassificationNotationSelect.h"
#include "ifc2x3/IfcClassificationReference.h"
#include "ifc2x3/IfcClosedShell.h"
#include "ifc2x3/IfcClothoid.h"
#include "ifc2x3/IfcCoilType.h"
#include "ifc2x3/IfcColour.h"
#include "ifc2x3/IfcColourOrFactor.h"
#include "ifc2x3/IfcColourRgb.h"
#include "ifc2x3/IfcColourSpecification.h"
#include "ifc2x3/IfcColumn.h"
#include "ifc2x3/IfcColumnType.h"
#include "ifc2x3/IfcComplexProperty.h"
#include "ifc2x3/IfcCompositeCurve.h"
#include "ifc2x3/IfcCompositeCurveSegment.h"
#include "ifc2x3/IfcCompositeProfileDef.h"
#include "ifc2x3/IfcCompressorType.h"
#include "ifc2x3/IfcCondenserType.h"
#include "ifc2x3/IfcCondition.h"
#include "ifc2x3/IfcConditionCriterion.h"
#include "ifc2x3/IfcConditionCriterionSelect.h"
#include "ifc2x3/IfcConic.h"
#include "ifc2x3/IfcConnectedFaceSet.h"
#include "ifc2x3/IfcConnectionCurveGeometry.h"
#include "ifc2x3/IfcConnectionGeometry.h"
#include "ifc2x3/IfcConnectionPointEccentricity.h"
#include "ifc2x3/IfcConnectionPointGeometry.h"
#include "ifc2x3/IfcConnectionPortGeometry.h"
#include "ifc2x3/IfcConnectionSurfaceGeometry.h"
#include "ifc2x3/IfcConstraint.h"
#include "ifc2x3/IfcConstraintAggregationRelationship.h"
#include "ifc2x3/IfcConstraintClassificationRelationship.h"
#include "ifc2x3/IfcConstraintRelationship.h"
#include "ifc2x3/IfcConstructionEquipmentResource.h"
#include "ifc2x3/IfcConstructionMaterialResource.h"
#include "ifc2x3/IfcConstructionProductResource.h"
#include "ifc2x3/IfcConstructionResource.h"
#include "ifc2x3/IfcContextDependentUnit.h"
#include "ifc2x3/IfcControl.h"
#include "ifc2x3/IfcControllerType.h"
#include "ifc2x3/IfcConversionBasedUnit.h"
#include "ifc2x3/IfcCooledBeamType.h"
#include "ifc2x3/IfcCoolingTowerType.h"
#include "ifc2x3/IfcCoordinatedUniversalTimeOffset.h"
#include "ifc2x3/IfcCostItem.h"
#include "ifc2x3/IfcCostSchedule.h"
#include "ifc2x3/IfcCostValue.h"
#include "ifc2x3/IfcCovering.h"
#include "ifc2x3/IfcCoveringType.h"
#include "ifc2x3/IfcCraneRailAShapeProfileDef.h"
#include "ifc2x3/IfcCraneRailFShapeProfileDef.h"
#include "ifc2x3/IfcCrewResource.h"
#include "ifc2x3/IfcCsgPrimitive3D.h"
#include "ifc2x3/IfcCsgSelect.h"
#include "ifc2x3/IfcCsgSolid.h"
#include "ifc2x3/IfcCurrencyRelationship.h"
#include "ifc2x3/IfcCurtainWall.h"
#include "ifc2x3/IfcCurtainWallType.h"
#include "ifc2x3/IfcCurve.h"
#include "ifc2x3/IfcCurveBoundedPlane.h"
#include "ifc2x3/IfcCurveFontOrScaledCurveFontSelect.h"
#include "ifc2x3/IfcCurveOrEdgeCurve.h"
#include "ifc2x3/IfcCurveStyle.h"
#include "ifc2x3/IfcCurveStyleFont.h"
#include "ifc2x3/IfcCurveStyleFontAndScaling.h"
#include "ifc2x3/IfcCurveStyleFontPattern.h"
#include "ifc2x3/IfcCurveStyleFontSelect.h"
#include "ifc2x3/IfcDamperType.h"
#include "ifc2x3/IfcDateAndTime.h"
#include "ifc2x3/IfcDateTimeSelect.h"
#include "ifc2x3/IfcDefinedSymbol.h"
#include "ifc2x3/IfcDefinedSymbolSelect.h"
#include "ifc2x3/IfcDerivedMeasureValue.h"
#include "ifc2x3/IfcDerivedProfileDef.h"
#include "ifc2x3/IfcDerivedUnit.h"
#include "ifc2x3/IfcDerivedUnitElement.h"
#include "ifc2x3/IfcDiameterDimension.h"
#include "ifc2x3/IfcDimensionCalloutRelationship.h"
#include "ifc2x3/IfcDimensionCurve.h"
#include "ifc2x3/IfcDimensionCurveDirectedCallout.h"
#include "ifc2x3/IfcDimensionCurveTerminator.h"
#include "ifc2x3/IfcDimensionPair.h"
#include "ifc2x3/IfcDimensionalExponents.h"
#include "ifc2x3/IfcDirection.h"
#include "ifc2x3/IfcDiscreteAccessory.h"
#include "ifc2x3/IfcDiscreteAccessoryType.h"
#include "ifc2x3/IfcDistributionChamberElement.h"
#include "ifc2x3/IfcDistributionChamberElementType.h"
#include "ifc2x3/IfcDistributionControlElement.h"
#include "ifc2x3/IfcDistributionControlElementType.h"
#include "ifc2x3/IfcDistributionElement.h"
#include "ifc2x3/IfcDistributionElementType.h"
#include "ifc2x3/IfcDistributionFlowElement.h"
#include "ifc2x3/IfcDistributionFlowElementType.h"
#include "ifc2x3/IfcDistributionPort.h"
#include "ifc2x3/IfcDocumentElectronicFormat.h"
#include "ifc2x3/IfcDocumentInformation.h"
#include "ifc2x3/IfcDocumentInformationRelationship.h"
#include "ifc2x3/IfcDocumentReference.h"
#include "ifc2x3/IfcDocumentSelect.h"
#include "ifc2x3/IfcDoor.h"
#include "ifc2x3/IfcDoorLiningProperties.h"
#include "ifc2x3/IfcDoorPanelProperties.h"
#include "ifc2x3/IfcDoorStyle.h"
#include "ifc2x3/IfcDraughtingCallout.h"
#include "ifc2x3/IfcDraughtingCalloutElement.h"
#include "ifc2x3/IfcDraughtingCalloutRelationship.h"
#include "ifc2x3/IfcDraughtingPreDefinedColour.h"
#include "ifc2x3/IfcDraughtingPreDefinedCurveFont.h"
#include "ifc2x3/IfcDraughtingPreDefinedTextFont.h"
#include "ifc2x3/IfcDuctFittingType.h"
#include "ifc2x3/IfcDuctSegmentType.h"
#include "ifc2x3/IfcDuctSilencerType.h"
#include "ifc2x3/IfcEdge.h"
#include "ifc2x3/IfcEdgeCurve.h"
#include "ifc2x3/IfcEdgeFeature.h"
#include "ifc2x3/IfcEdgeLoop.h"
#include "ifc2x3/IfcElectricApplianceType.h"
#include "ifc2x3/IfcElectricDistributionPoint.h"
#include "ifc2x3/IfcElectricFlowStorageDeviceType.h"
#include "ifc2x3/IfcElectricGeneratorType.h"
#include "ifc2x3/IfcElectricHeaterType.h"
#include "ifc2x3/IfcElectricMotorType.h"
#include "ifc2x3/IfcElectricTimeControlType.h"
#include "ifc2x3/IfcElectricalBaseProperties.h"
#include "ifc2x3/IfcElectricalCircuit.h"
#include "ifc2x3/IfcElectricalElement.h"
#include "ifc2x3/IfcElement.h"
#include "ifc2x3/IfcElementAssembly.h"
#include "ifc2x3/IfcElementComponent.h"
#include "ifc2x3/IfcElementComponentType.h"
#include "ifc2x3/IfcElementPart.h"
#include "ifc2x3/IfcElementQuantity.h"
#include "ifc2x3/IfcElementType.h"
#include "ifc2x3/IfcElementarySurface.h"
#include "ifc2x3/IfcEllipse.h"
#include "ifc2x3/IfcEllipseProfileDef.h"
#include "ifc2x3/IfcEnergyConversionDevice.h"
#include "ifc2x3/IfcEnergyConversionDeviceType.h"
#include "ifc2x3/IfcEnergyProperties.h"
#include "ifc2x3/IfcEnvironmentalImpactValue.h"
#include "ifc2x3/IfcEquipmentElement.h"
#include "ifc2x3/IfcEquipmentStandard.h"
#include "ifc2x3/IfcEvaporativeCoolerType.h"
#include "ifc2x3/IfcEvaporatorType.h"
#include "ifc2x3/IfcExtendedMaterialProperties.h"
#include "ifc2x3/IfcExternalReference.h"
#include "ifc2x3/IfcExternallyDefinedHatchStyle.h"
#include "ifc2x3/IfcExternallyDefinedSurfaceStyle.h"
#include "ifc2x3/IfcExternallyDefinedSymbol.h"
#include "ifc2x3/IfcExternallyDefinedTextFont.h"
#include "ifc2x3/IfcExtrudedAreaSolid.h"
#include "ifc2x3/IfcFace.h"
#include "ifc2x3/IfcFaceBasedSurfaceModel.h"
#include "ifc2x3/IfcFaceBound.h"
#include "ifc2x3/IfcFaceOuterBound.h"
#include "ifc2x3/IfcFaceSurface.h"
#include "ifc2x3/IfcFacetedBrep.h"
#include "ifc2x3/IfcFacetedBrepWithVoids.h"
#include "ifc2x3/IfcFailureConnectionCondition.h"
#include "ifc2x3/IfcFanType.h"
#include "ifc2x3/IfcFastener.h"
#include "ifc2x3/IfcFastenerType.h"
#include "ifc2x3/IfcFeatureElement.h"
#include "ifc2x3/IfcFeatureElementAddition.h"
#include "ifc2x3/IfcFeatureElementSubtraction.h"
#include "ifc2x3/IfcFillAreaStyle.h"
#include "ifc2x3/IfcFillAreaStyleHatching.h"
#include "ifc2x3/IfcFillAreaStyleTileShapeSelect.h"
#include "ifc2x3/IfcFillAreaStyleTileSymbolWithStyle.h"
#include "ifc2x3/IfcFillAreaStyleTiles.h"
#include "ifc2x3/IfcFillStyleSelect.h"
#include "ifc2x3/IfcFilterType.h"
#include "ifc2x3/IfcFireSuppressionTerminalType.h"
#include "ifc2x3/IfcFlowController.h"
#include "ifc2x3/IfcFlowControllerType.h"
#include "ifc2x3/IfcFlowFitting.h"
#include "ifc2x3/IfcFlowFittingType.h"
#include "ifc2x3/IfcFlowInstrumentType.h"
#include "ifc2x3/IfcFlowMeterType.h"
#include "ifc2x3/IfcFlowMovingDevice.h"
#include "ifc2x3/IfcFlowMovingDeviceType.h"
#include "ifc2x3/IfcFlowSegment.h"
#include "ifc2x3/IfcFlowSegmentType.h"
#include "ifc2x3/IfcFlowStorageDevice.h"
#include "ifc2x3/IfcFlowStorageDeviceType.h"
#include "ifc2x3/IfcFlowTerminal.h"
#include "ifc2x3/IfcFlowTerminalType.h"
#include "ifc2x3/IfcFlowTreatmentDevice.h"
#include "ifc2x3/IfcFlowTreatmentDeviceType.h"
#include "ifc2x3/IfcFluidFlowProperties.h"
#include "ifc2x3/IfcFooting.h"
#include "ifc2x3/IfcFuelProperties.h"
#include "ifc2x3/IfcFurnishingElement.h"
#include "ifc2x3/IfcFurnishingElementType.h"
#include "ifc2x3/IfcFurnitureStandard.h"
#include "ifc2x3/IfcFurnitureType.h"
#include "ifc2x3/IfcGasTerminalType.h"
#include "ifc2x3/IfcGeneralMaterialProperties.h"
#include "ifc2x3/IfcGeneralProfileProperties.h"
#include "ifc2x3/IfcGeometricCurveSet.h"
#include "ifc2x3/IfcGeometricRepresentationContext.h"
#include "ifc2x3/IfcGeometricRepresentationItem.h"
#include "ifc2x3/IfcGeometricRepresentationSubContext.h"
#include "ifc2x3/IfcGeometricSet.h"
#include "ifc2x3/IfcGeometricSetSelect.h"
#include "ifc2x3/IfcGrid.h"
#include "ifc2x3/IfcGridAxis.h"
#include "ifc2x3/IfcGridPlacement.h"
#include "ifc2x3/IfcGroup.h"
#include "ifc2x3/IfcHalfSpaceSolid.h"
#include "ifc2x3/IfcHatchLineDistanceSelect.h"
#include "ifc2x3/IfcHeatExchangerType.h"
#include "ifc2x3/IfcHumidifierType.h"
#include "ifc2x3/IfcHygroscopicMaterialProperties.h"
#include "ifc2x3/IfcIShapeProfileDef.h"
#include "ifc2x3/IfcImageTexture.h"
#include "ifc2x3/IfcInventory.h"
#include "ifc2x3/IfcIrregularTimeSeries.h"
#include "ifc2x3/IfcIrregularTimeSeriesValue.h"
#include "ifc2x3/IfcJunctionBoxType.h"
#include "ifc2x3/IfcLShapeProfileDef.h"
#include "ifc2x3/IfcLaborResource.h"
#include "ifc2x3/IfcLampType.h"
#include "ifc2x3/IfcLayeredItem.h"
#include "ifc2x3/IfcLibraryInformation.h"
#include "ifc2x3/IfcLibraryReference.h"
#include "ifc2x3/IfcLibrarySelect.h"
#include "ifc2x3/IfcLightDistributionData.h"
#include "ifc2x3/IfcLightDistributionDataSourceSelect.h"
#include "ifc2x3/IfcLightFixtureType.h"
#include "ifc2x3/IfcLightIntensityDistribution.h"
#include "ifc2x3/IfcLightSource.h"
#include "ifc2x3/IfcLightSourceAmbient.h"
#include "ifc2x3/IfcLightSourceDirectional.h"
#include "ifc2x3/IfcLightSourceGoniometric.h"
#include "ifc2x3/IfcLightSourcePositional.h"
#include "ifc2x3/IfcLightSourceSpot.h"
#include "ifc2x3/IfcLine.h"
#include "ifc2x3/IfcLinearDimension.h"
#include "ifc2x3/IfcLocalPlacement.h"
#include "ifc2x3/IfcLocalTime.h"
#include "ifc2x3/IfcLoop.h"
#include "ifc2x3/IfcManifoldSolidBrep.h"
#include "ifc2x3/IfcMappedItem.h"
#include "ifc2x3/IfcMaterial.h"
#include "ifc2x3/IfcMaterialClassificationRelationship.h"
#include "ifc2x3/IfcMaterialDefinitionRepresentation.h"
#include "ifc2x3/IfcMaterialLayer.h"
#include "ifc2x3/IfcMaterialLayerSet.h"
#include "ifc2x3/IfcMaterialLayerSetUsage.h"
#include "ifc2x3/IfcMaterialList.h"
#include "ifc2x3/IfcMaterialProperties.h"
#include "ifc2x3/IfcMaterialSelect.h"
#include "ifc2x3/IfcMeasureValue.h"
#include "ifc2x3/IfcMeasureWithUnit.h"
#include "ifc2x3/IfcMechanicalConcreteMaterialProperties.h"
#include "ifc2x3/IfcMechanicalFastener.h"
#include "ifc2x3/IfcMechanicalFastenerType.h"
#include "ifc2x3/IfcMechanicalMaterialProperties.h"
#include "ifc2x3/IfcMechanicalSteelMaterialProperties.h"
#include "ifc2x3/IfcMember.h"
#include "ifc2x3/IfcMemberType.h"
#include "ifc2x3/IfcMetric.h"
#include "ifc2x3/IfcMetricValueSelect.h"
#include "ifc2x3/IfcMonetaryUnit.h"
#include "ifc2x3/IfcMotorConnectionType.h"
#include "ifc2x3/IfcMove.h"
#include "ifc2x3/IfcNamedUnit.h"
#include "ifc2x3/IfcObject.h"
#include "ifc2x3/IfcObjectDefinition.h"
#include "ifc2x3/IfcObjectPlacement.h"
#include "ifc2x3/IfcObjectReferenceSelect.h"
#include "ifc2x3/IfcObjective.h"
#include "ifc2x3/IfcOccupant.h"
#include "ifc2x3/IfcOffsetCurve2D.h"
#include "ifc2x3/IfcOffsetCurve3D.h"
#include "ifc2x3/IfcOneDirectionRepeatFactor.h"
#include "ifc2x3/IfcOpenShell.h"
#include "ifc2x3/IfcOpeningElement.h"
#include "ifc2x3/IfcOpticalMaterialProperties.h"
#include "ifc2x3/IfcOrderAction.h"
#include "ifc2x3/IfcOrganization.h"
#include "ifc2x3/IfcOrganizationRelationship.h"
#include "ifc2x3/IfcOrientationSelect.h"
#include "ifc2x3/IfcOrientedEdge.h"
#include "ifc2x3/IfcOutletType.h"
#include "ifc2x3/IfcOwnerHistory.h"
#include "ifc2x3/IfcParameterizedProfileDef.h"
#include "ifc2x3/IfcPath.h"
#include "ifc2x3/IfcPerformanceHistory.h"
#include "ifc2x3/IfcPermeableCoveringProperties.h"
#include "ifc2x3/IfcPermit.h"
#include "ifc2x3/IfcPerson.h"
#include "ifc2x3/IfcPersonAndOrganization.h"
#include "ifc2x3/IfcPhysicalComplexQuantity.h"
#include "ifc2x3/IfcPhysicalQuantity.h"
#include "ifc2x3/IfcPhysicalSimpleQuantity.h"
#include "ifc2x3/IfcPile.h"
#include "ifc2x3/IfcPipeFittingType.h"
#include "ifc2x3/IfcPipeSegmentType.h"
#include "ifc2x3/IfcPixelTexture.h"
#include "ifc2x3/IfcPlacement.h"
#include "ifc2x3/IfcPlanarBox.h"
#include "ifc2x3/IfcPlanarExtent.h"
#include "ifc2x3/IfcPlane.h"
#include "ifc2x3/IfcPlate.h"
#include "ifc2x3/IfcPlateType.h"
#include "ifc2x3/IfcPoint.h"
#include "ifc2x3/IfcPointOnCurve.h"
#include "ifc2x3/IfcPointOnSurface.h"
#include "ifc2x3/IfcPointOrVertexPoint.h"
#include "ifc2x3/IfcPolyLoop.h"
#include "ifc2x3/IfcPolygonalBoundedHalfSpace.h"
#include "ifc2x3/IfcPolyline.h"
#include "ifc2x3/IfcPort.h"
#include "ifc2x3/IfcPostalAddress.h"
#include "ifc2x3/IfcPreDefinedColour.h"
#include "ifc2x3/IfcPreDefinedCurveFont.h"
#include "ifc2x3/IfcPreDefinedDimensionSymbol.h"
#include "ifc2x3/IfcPreDefinedItem.h"
#include "ifc2x3/IfcPreDefinedPointMarkerSymbol.h"
#include "ifc2x3/IfcPreDefinedSymbol.h"
#include "ifc2x3/IfcPreDefinedTerminatorSymbol.h"
#include "ifc2x3/IfcPreDefinedTextFont.h"
#include "ifc2x3/IfcPresentationLayerAssignment.h"
#include "ifc2x3/IfcPresentationLayerWithStyle.h"
#include "ifc2x3/IfcPresentationStyle.h"
#include "ifc2x3/IfcPresentationStyleAssignment.h"
#include "ifc2x3/IfcPresentationStyleSelect.h"
#include "ifc2x3/IfcProcedure.h"
#include "ifc2x3/IfcProcess.h"
#include "ifc2x3/IfcProduct.h"
#include "ifc2x3/IfcProductDefinitionShape.h"
#include "ifc2x3/IfcProductRepresentation.h"
#include "ifc2x3/IfcProductsOfCombustionProperties.h"
#include "ifc2x3/IfcProfileDef.h"
#include "ifc2x3/IfcProfileProperties.h"
#include "ifc2x3/IfcProject.h"
#include "ifc2x3/IfcProjectOrder.h"
#include "ifc2x3/IfcProjectOrderRecord.h"
#include "ifc2x3/IfcProjectionCurve.h"
#include "ifc2x3/IfcProjectionElement.h"
#include "ifc2x3/IfcProperty.h"
#include "ifc2x3/IfcPropertyBoundedValue.h"
#include "ifc2x3/IfcPropertyConstraintRelationship.h"
#include "ifc2x3/IfcPropertyDefinition.h"
#include "ifc2x3/IfcPropertyDependencyRelationship.h"
#include "ifc2x3/IfcPropertyEnumeratedValue.h"
#include "ifc2x3/IfcPropertyEnumeration.h"
#include "ifc2x3/IfcPropertyListValue.h"
#include "ifc2x3/IfcPropertyReferenceValue.h"
#include "ifc2x3/IfcPropertySet.h"
#include "ifc2x3/IfcPropertySetDefinition.h"
#include "ifc2x3/IfcPropertySingleValue.h"
#include "ifc2x3/IfcPropertyTableValue.h"
#include "ifc2x3/IfcProtectiveDeviceType.h"
#include "ifc2x3/IfcProxy.h"
#include "ifc2x3/IfcPumpType.h"
#include "ifc2x3/IfcQuantityArea.h"
#include "ifc2x3/IfcQuantityCount.h"
#include "ifc2x3/IfcQuantityLength.h"
#include "ifc2x3/IfcQuantityTime.h"
#include "ifc2x3/IfcQuantityVolume.h"
#include "ifc2x3/IfcQuantityWeight.h"
#include "ifc2x3/IfcRadiusDimension.h"
#include "ifc2x3/IfcRailing.h"
#include "ifc2x3/IfcRailingType.h"
#include "ifc2x3/IfcRamp.h"
#include "ifc2x3/IfcRampFlight.h"
#include "ifc2x3/IfcRampFlightType.h"
#include "ifc2x3/IfcRationalBezierCurve.h"
#include "ifc2x3/IfcRectangleHollowProfileDef.h"
#include "ifc2x3/IfcRectangleProfileDef.h"
#include "ifc2x3/IfcRectangularPyramid.h"
#include "ifc2x3/IfcRectangularTrimmedSurface.h"
#include "ifc2x3/IfcReferenceCurve.h"
#include "ifc2x3/IfcReferenceCurve3D.h"
#include "ifc2x3/IfcReferenceCurveAlignment2D.h"
#include "ifc2x3/IfcReferenceCurvePlacement.h"
#include "ifc2x3/IfcReferenceCurvePlacementSystem.h"
#include "ifc2x3/IfcReferenceElement.h"
#include "ifc2x3/IfcReferencePlacement.h"
#include "ifc2x3/IfcReferencedSectionedSpine.h"
#include "ifc2x3/IfcReferencesValueDocument.h"
#include "ifc2x3/IfcRegularTimeSeries.h"
#include "ifc2x3/IfcReinforcementBarProperties.h"
#include "ifc2x3/IfcReinforcementDefinitionProperties.h"
#include "ifc2x3/IfcReinforcingBar.h"
#include "ifc2x3/IfcReinforcingElement.h"
#include "ifc2x3/IfcReinforcingMesh.h"
#include "ifc2x3/IfcRelAggregates.h"
#include "ifc2x3/IfcRelAssigns.h"
#include "ifc2x3/IfcRelAssignsTasks.h"
#include "ifc2x3/IfcRelAssignsToActor.h"
#include "ifc2x3/IfcRelAssignsToControl.h"
#include "ifc2x3/IfcRelAssignsToGroup.h"
#include "ifc2x3/IfcRelAssignsToProcess.h"
#include "ifc2x3/IfcRelAssignsToProduct.h"
#include "ifc2x3/IfcRelAssignsToProjectOrder.h"
#include "ifc2x3/IfcRelAssignsToResource.h"
#include "ifc2x3/IfcRelAssociates.h"
#include "ifc2x3/IfcRelAssociatesAppliedValue.h"
#include "ifc2x3/IfcRelAssociatesApproval.h"
#include "ifc2x3/IfcRelAssociatesClassification.h"
#include "ifc2x3/IfcRelAssociatesConstraint.h"
#include "ifc2x3/IfcRelAssociatesDocument.h"
#include "ifc2x3/IfcRelAssociatesLibrary.h"
#include "ifc2x3/IfcRelAssociatesMaterial.h"
#include "ifc2x3/IfcRelAssociatesProfileProperties.h"
#include "ifc2x3/IfcRelConnects.h"
#include "ifc2x3/IfcRelConnectsElements.h"
#include "ifc2x3/IfcRelConnectsPathElements.h"
#include "ifc2x3/IfcRelConnectsPortToElement.h"
#include "ifc2x3/IfcRelConnectsPorts.h"
#include "ifc2x3/IfcRelConnectsStructuralActivity.h"
#include "ifc2x3/IfcRelConnectsStructuralElement.h"
#include "ifc2x3/IfcRelConnectsStructuralMember.h"
#include "ifc2x3/IfcRelConnectsWithEccentricity.h"
#include "ifc2x3/IfcRelConnectsWithRealizingElements.h"
#include "ifc2x3/IfcRelContainedInSpatialStructure.h"
#include "ifc2x3/IfcRelCoversBldgElements.h"
#include "ifc2x3/IfcRelCoversSpaces.h"
#include "ifc2x3/IfcRelDecomposes.h"
#include "ifc2x3/IfcRelDefines.h"
#include "ifc2x3/IfcRelDefinesByProperties.h"
#include "ifc2x3/IfcRelDefinesByType.h"
#include "ifc2x3/IfcRelFillsElement.h"
#include "ifc2x3/IfcRelFlowControlElements.h"
#include "ifc2x3/IfcRelInteractionRequirements.h"
#include "ifc2x3/IfcRelNests.h"
#include "ifc2x3/IfcRelOccupiesSpaces.h"
#include "ifc2x3/IfcRelOverridesProperties.h"
#include "ifc2x3/IfcRelProjectsElement.h"
#include "ifc2x3/IfcRelReferencedInSpatialStructure.h"
#include "ifc2x3/IfcRelSchedulesCostItems.h"
#include "ifc2x3/IfcRelSequence.h"
#include "ifc2x3/IfcRelServicesBuildings.h"
#include "ifc2x3/IfcRelSpaceBoundary.h"
#include "ifc2x3/IfcRelVoidsElement.h"
#include "ifc2x3/IfcRelationship.h"
#include "ifc2x3/IfcRelaxation.h"
#include "ifc2x3/IfcRepresentation.h"
#include "ifc2x3/IfcRepresentationContext.h"
#include "ifc2x3/IfcRepresentationItem.h"
#include "ifc2x3/IfcRepresentationMap.h"
#include "ifc2x3/IfcResource.h"
#include "ifc2x3/IfcRevolvedAreaSolid.h"
#include "ifc2x3/IfcRibPlateProfileProperties.h"
#include "ifc2x3/IfcRightCircularCone.h"
#include "ifc2x3/IfcRightCircularCylinder.h"
#include "ifc2x3/IfcRoof.h"
#include "ifc2x3/IfcRoot.h"
#include "ifc2x3/IfcRoundedEdgeFeature.h"
#include "ifc2x3/IfcRoundedRectangleProfileDef.h"
#include "ifc2x3/IfcSIUnit.h"
#include "ifc2x3/IfcSanitaryTerminalType.h"
#include "ifc2x3/IfcScheduleTimeControl.h"
#include "ifc2x3/IfcSectionProperties.h"
#include "ifc2x3/IfcSectionReinforcementProperties.h"
#include "ifc2x3/IfcSectionedSpine.h"
#include "ifc2x3/IfcSensorType.h"
#include "ifc2x3/IfcServiceLife.h"
#include "ifc2x3/IfcServiceLifeFactor.h"
#include "ifc2x3/IfcShapeAspect.h"
#include "ifc2x3/IfcShapeModel.h"
#include "ifc2x3/IfcShapeRepresentation.h"
#include "ifc2x3/IfcShell.h"
#include "ifc2x3/IfcShellBasedSurfaceModel.h"
#include "ifc2x3/IfcSimpleProperty.h"
#include "ifc2x3/IfcSimpleValue.h"
#include "ifc2x3/IfcSite.h"
#include "ifc2x3/IfcSizeSelect.h"
#include "ifc2x3/IfcSlab.h"
#include "ifc2x3/IfcSlabType.h"
#include "ifc2x3/IfcSlippageConnectionCondition.h"
#include "ifc2x3/IfcSolidModel.h"
#include "ifc2x3/IfcSoundProperties.h"
#include "ifc2x3/IfcSoundValue.h"
#include "ifc2x3/IfcSpace.h"
#include "ifc2x3/IfcSpaceHeaterType.h"
#include "ifc2x3/IfcSpaceProgram.h"
#include "ifc2x3/IfcSpaceThermalLoadProperties.h"
#include "ifc2x3/IfcSpaceType.h"
#include "ifc2x3/IfcSpatialStructureElement.h"
#include "ifc2x3/IfcSpatialStructureElementType.h"
#include "ifc2x3/IfcSpecularHighlightSelect.h"
#include "ifc2x3/IfcSphere.h"
#include "ifc2x3/IfcStackTerminalType.h"
#include "ifc2x3/IfcStair.h"
#include "ifc2x3/IfcStairFlight.h"
#include "ifc2x3/IfcStairFlightType.h"
#include "ifc2x3/IfcStructuralAction.h"
#include "ifc2x3/IfcStructuralActivity.h"
#include "ifc2x3/IfcStructuralActivityAssignmentSelect.h"
#include "ifc2x3/IfcStructuralAnalysisModel.h"
#include "ifc2x3/IfcStructuralConnection.h"
#include "ifc2x3/IfcStructuralConnectionCondition.h"
#include "ifc2x3/IfcStructuralCurveConnection.h"
#include "ifc2x3/IfcStructuralCurveMember.h"
#include "ifc2x3/IfcStructuralCurveMemberVarying.h"
#include "ifc2x3/IfcStructuralItem.h"
#include "ifc2x3/IfcStructuralLinearAction.h"
#include "ifc2x3/IfcStructuralLinearActionVarying.h"
#include "ifc2x3/IfcStructuralLoad.h"
#include "ifc2x3/IfcStructuralLoadGroup.h"
#include "ifc2x3/IfcStructuralLoadLinearForce.h"
#include "ifc2x3/IfcStructuralLoadPlanarForce.h"
#include "ifc2x3/IfcStructuralLoadSingleDisplacement.h"
#include "ifc2x3/IfcStructuralLoadSingleDisplacementDistortion.h"
#include "ifc2x3/IfcStructuralLoadSingleForce.h"
#include "ifc2x3/IfcStructuralLoadSingleForceWarping.h"
#include "ifc2x3/IfcStructuralLoadStatic.h"
#include "ifc2x3/IfcStructuralLoadTemperature.h"
#include "ifc2x3/IfcStructuralMember.h"
#include "ifc2x3/IfcStructuralPlanarAction.h"
#include "ifc2x3/IfcStructuralPlanarActionVarying.h"
#include "ifc2x3/IfcStructuralPointAction.h"
#include "ifc2x3/IfcStructuralPointConnection.h"
#include "ifc2x3/IfcStructuralPointReaction.h"
#include "ifc2x3/IfcStructuralProfileProperties.h"
#include "ifc2x3/IfcStructuralReaction.h"
#include "ifc2x3/IfcStructuralResultGroup.h"
#include "ifc2x3/IfcStructuralSteelProfileProperties.h"
#include "ifc2x3/IfcStructuralSurfaceConnection.h"
#include "ifc2x3/IfcStructuralSurfaceMember.h"
#include "ifc2x3/IfcStructuralSurfaceMemberVarying.h"
#include "ifc2x3/IfcStructuredDimensionCallout.h"
#include "ifc2x3/IfcStyleModel.h"
#include "ifc2x3/IfcStyledItem.h"
#include "ifc2x3/IfcStyledRepresentation.h"
#include "ifc2x3/IfcSubContractResource.h"
#include "ifc2x3/IfcSubedge.h"
#include "ifc2x3/IfcSurface.h"
#include "ifc2x3/IfcSurfaceCurveSweptAreaSolid.h"
#include "ifc2x3/IfcSurfaceOfLinearExtrusion.h"
#include "ifc2x3/IfcSurfaceOfRevolution.h"
#include "ifc2x3/IfcSurfaceOrFaceSurface.h"
#include "ifc2x3/IfcSurfaceStyle.h"
#include "ifc2x3/IfcSurfaceStyleElementSelect.h"
#include "ifc2x3/IfcSurfaceStyleLighting.h"
#include "ifc2x3/IfcSurfaceStyleRefraction.h"
#include "ifc2x3/IfcSurfaceStyleRendering.h"
#include "ifc2x3/IfcSurfaceStyleShading.h"
#include "ifc2x3/IfcSurfaceStyleWithTextures.h"
#include "ifc2x3/IfcSurfaceTexture.h"
#include "ifc2x3/IfcSweptAreaSolid.h"
#include "ifc2x3/IfcSweptDiskSolid.h"
#include "ifc2x3/IfcSweptSurface.h"
#include "ifc2x3/IfcSwitchingDeviceType.h"
#include "ifc2x3/IfcSymbolStyle.h"
#include "ifc2x3/IfcSymbolStyleSelect.h"
#include "ifc2x3/IfcSystem.h"
#include "ifc2x3/IfcSystemFurnitureElementType.h"
#include "ifc2x3/IfcTShapeProfileDef.h"
#include "ifc2x3/IfcTable.h"
#include "ifc2x3/IfcTableRow.h"
#include "ifc2x3/IfcTankType.h"
#include "ifc2x3/IfcTask.h"
#include "ifc2x3/IfcTelecomAddress.h"
#include "ifc2x3/IfcTendon.h"
#include "ifc2x3/IfcTendonAnchor.h"
#include "ifc2x3/IfcTerminatorSymbol.h"
#include "ifc2x3/IfcTextFontSelect.h"
#include "ifc2x3/IfcTextLiteral.h"
#include "ifc2x3/IfcTextLiteralWithExtent.h"
#include "ifc2x3/IfcTextStyle.h"
#include "ifc2x3/IfcTextStyleFontModel.h"
#include "ifc2x3/IfcTextStyleForDefinedFont.h"
#include "ifc2x3/IfcTextStyleSelect.h"
#include "ifc2x3/IfcTextStyleTextModel.h"
#include "ifc2x3/IfcTextStyleWithBoxCharacteristics.h"
#include "ifc2x3/IfcTextureCoordinate.h"
#include "ifc2x3/IfcTextureCoordinateGenerator.h"
#include "ifc2x3/IfcTextureMap.h"
#include "ifc2x3/IfcTextureVertex.h"
#include "ifc2x3/IfcThermalMaterialProperties.h"
#include "ifc2x3/IfcTimeSeries.h"
#include "ifc2x3/IfcTimeSeriesReferenceRelationship.h"
#include "ifc2x3/IfcTimeSeriesSchedule.h"
#include "ifc2x3/IfcTimeSeriesValue.h"
#include "ifc2x3/IfcTopologicalRepresentationItem.h"
#include "ifc2x3/IfcTopologyRepresentation.h"
#include "ifc2x3/IfcTransformerType.h"
#include "ifc2x3/IfcTransportElement.h"
#include "ifc2x3/IfcTransportElementType.h"
#include "ifc2x3/IfcTrapeziumProfileDef.h"
#include "ifc2x3/IfcTrimmedCurve.h"
#include "ifc2x3/IfcTrimmingSelect.h"
#include "ifc2x3/IfcTubeBundleType.h"
#include "ifc2x3/IfcTwoDirectionRepeatFactor.h"
#include "ifc2x3/IfcTypeObject.h"
#include "ifc2x3/IfcTypeProduct.h"
#include "ifc2x3/IfcUShapeProfileDef.h"
#include "ifc2x3/IfcUnit.h"
#include "ifc2x3/IfcUnitAssignment.h"
#include "ifc2x3/IfcUnitaryEquipmentType.h"
#include "ifc2x3/IfcValue.h"
#include "ifc2x3/IfcValveType.h"
#include "ifc2x3/IfcVector.h"
#include "ifc2x3/IfcVertex.h"
#include "ifc2x3/IfcVertexBasedTextureMap.h"
#include "ifc2x3/IfcVertexLoop.h"
#include "ifc2x3/IfcVertexPoint.h"
#include "ifc2x3/IfcVibrationIsolatorType.h"
#include "ifc2x3/IfcVirtualElement.h"
#include "ifc2x3/IfcVirtualGridIntersection.h"
#include "ifc2x3/IfcWall.h"
#include "ifc2x3/IfcWallStandardCase.h"
#include "ifc2x3/IfcWallType.h"
#include "ifc2x3/IfcWasteTerminalType.h"
#include "ifc2x3/IfcWaterProperties.h"
#include "ifc2x3/IfcWindow.h"
#include "ifc2x3/IfcWindowLiningProperties.h"
#include "ifc2x3/IfcWindowPanelProperties.h"
#include "ifc2x3/IfcWindowStyle.h"
#include "ifc2x3/IfcWorkControl.h"
#include "ifc2x3/IfcWorkPlan.h"
#include "ifc2x3/IfcWorkSchedule.h"
#include "ifc2x3/IfcZShapeProfileDef.h"
#include "ifc2x3/IfcZone.h"
#include <Step/Aggregation.h>
#include <Step/Binary.h>
#include <Step/Referenced.h>
#include <string>

#ifdef USE_MEMORYMANAGER
#include <Tools/MemoryManager/mmgr.h>
#endif
using namespace ifc2x3;

SPFWriter::SPFWriter(ExpressDataSet *expressDataSet) : Step::BaseSPFWriter(expressDataSet) {
}

SPFWriter::~SPFWriter() {
}

bool SPFWriter::writeSPF(const std::string &filepath) {
    ExpressDataSet *expressDataSet;
    std::map<Step::Id,Step::BaseObjectPtr>::iterator it;
    expressDataSet = static_cast< ExpressDataSet * > (m_expressDataSet);
    if (!init(filepath)) {
        return false;
    }
    writeHeader();
    it = expressDataSet->m_Ifc2DCompositeCurve_Map.begin();
    while (it != expressDataSet->m_Ifc2DCompositeCurve_Map.end()) {
        m_out << "#" << it->first << "=IFC2DCOMPOSITECURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfc2DCompositeCurve(static_cast< Ifc2DCompositeCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcActionRequest_Map.begin();
    while (it != expressDataSet->m_IfcActionRequest_Map.end()) {
        m_out << "#" << it->first << "=IFCACTIONREQUEST(";
        if (!writeIfNotInited(it->first)) {
            writeIfcActionRequest(static_cast< IfcActionRequest * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcActor_Map.begin();
    while (it != expressDataSet->m_IfcActor_Map.end()) {
        m_out << "#" << it->first << "=IFCACTOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcActor(static_cast< IfcActor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcActorRole_Map.begin();
    while (it != expressDataSet->m_IfcActorRole_Map.end()) {
        m_out << "#" << it->first << "=IFCACTORROLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcActorRole(static_cast< IfcActorRole * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcActuatorType_Map.begin();
    while (it != expressDataSet->m_IfcActuatorType_Map.end()) {
        m_out << "#" << it->first << "=IFCACTUATORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcActuatorType(static_cast< IfcActuatorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAddress_Map.begin();
    while (it != expressDataSet->m_IfcAddress_Map.end()) {
        m_out << "#" << it->first << "=IFCADDRESS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAddress(static_cast< IfcAddress * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAirTerminalBoxType_Map.begin();
    while (it != expressDataSet->m_IfcAirTerminalBoxType_Map.end()) {
        m_out << "#" << it->first << "=IFCAIRTERMINALBOXTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAirTerminalBoxType(static_cast< IfcAirTerminalBoxType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAirTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcAirTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCAIRTERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAirTerminalType(static_cast< IfcAirTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAirToAirHeatRecoveryType_Map.begin();
    while (it != expressDataSet->m_IfcAirToAirHeatRecoveryType_Map.end()) {
        m_out << "#" << it->first << "=IFCAIRTOAIRHEATRECOVERYTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAirToAirHeatRecoveryType(static_cast< IfcAirToAirHeatRecoveryType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAlarmType_Map.begin();
    while (it != expressDataSet->m_IfcAlarmType_Map.end()) {
        m_out << "#" << it->first << "=IFCALARMTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAlarmType(static_cast< IfcAlarmType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAngularDimension_Map.begin();
    while (it != expressDataSet->m_IfcAngularDimension_Map.end()) {
        m_out << "#" << it->first << "=IFCANGULARDIMENSION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAngularDimension(static_cast< IfcAngularDimension * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotation_Map.begin();
    while (it != expressDataSet->m_IfcAnnotation_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotation(static_cast< IfcAnnotation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationCurveOccurrence_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationCurveOccurrence_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONCURVEOCCURRENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationCurveOccurrence(static_cast< IfcAnnotationCurveOccurrence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationFillArea_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationFillArea_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONFILLAREA(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationFillArea(static_cast< IfcAnnotationFillArea * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationFillAreaOccurrence_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationFillAreaOccurrence_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONFILLAREAOCCURRENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationFillAreaOccurrence(static_cast< IfcAnnotationFillAreaOccurrence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationOccurrence_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationOccurrence_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONOCCURRENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationOccurrence(static_cast< IfcAnnotationOccurrence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationSurface_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationSurface(static_cast< IfcAnnotationSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationSurfaceOccurrence_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationSurfaceOccurrence_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONSURFACEOCCURRENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationSurfaceOccurrence(static_cast< IfcAnnotationSurfaceOccurrence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationSymbolOccurrence_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationSymbolOccurrence_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONSYMBOLOCCURRENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationSymbolOccurrence(static_cast< IfcAnnotationSymbolOccurrence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAnnotationTextOccurrence_Map.begin();
    while (it != expressDataSet->m_IfcAnnotationTextOccurrence_Map.end()) {
        m_out << "#" << it->first << "=IFCANNOTATIONTEXTOCCURRENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAnnotationTextOccurrence(static_cast< IfcAnnotationTextOccurrence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcApplication_Map.begin();
    while (it != expressDataSet->m_IfcApplication_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPLICATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcApplication(static_cast< IfcApplication * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAppliedValue_Map.begin();
    while (it != expressDataSet->m_IfcAppliedValue_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPLIEDVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAppliedValue(static_cast< IfcAppliedValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAppliedValueRelationship_Map.begin();
    while (it != expressDataSet->m_IfcAppliedValueRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPLIEDVALUERELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAppliedValueRelationship(static_cast< IfcAppliedValueRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcApproval_Map.begin();
    while (it != expressDataSet->m_IfcApproval_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPROVAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcApproval(static_cast< IfcApproval * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcApprovalActorRelationship_Map.begin();
    while (it != expressDataSet->m_IfcApprovalActorRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPROVALACTORRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcApprovalActorRelationship(static_cast< IfcApprovalActorRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcApprovalPropertyRelationship_Map.begin();
    while (it != expressDataSet->m_IfcApprovalPropertyRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPROVALPROPERTYRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcApprovalPropertyRelationship(static_cast< IfcApprovalPropertyRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcApprovalRelationship_Map.begin();
    while (it != expressDataSet->m_IfcApprovalRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCAPPROVALRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcApprovalRelationship(static_cast< IfcApprovalRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcArbitraryClosedProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcArbitraryClosedProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCARBITRARYCLOSEDPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcArbitraryClosedProfileDef(static_cast< IfcArbitraryClosedProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcArbitraryOpenProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcArbitraryOpenProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCARBITRARYOPENPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcArbitraryOpenProfileDef(static_cast< IfcArbitraryOpenProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcArbitraryProfileDefWithVoids_Map.begin();
    while (it != expressDataSet->m_IfcArbitraryProfileDefWithVoids_Map.end()) {
        m_out << "#" << it->first << "=IFCARBITRARYPROFILEDEFWITHVOIDS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcArbitraryProfileDefWithVoids(static_cast< IfcArbitraryProfileDefWithVoids * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAsset_Map.begin();
    while (it != expressDataSet->m_IfcAsset_Map.end()) {
        m_out << "#" << it->first << "=IFCASSET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAsset(static_cast< IfcAsset * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAsymmetricIShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcAsymmetricIShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCASYMMETRICISHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAsymmetricIShapeProfileDef(static_cast< IfcAsymmetricIShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAxis1Placement_Map.begin();
    while (it != expressDataSet->m_IfcAxis1Placement_Map.end()) {
        m_out << "#" << it->first << "=IFCAXIS1PLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAxis1Placement(static_cast< IfcAxis1Placement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAxis2Placement2D_Map.begin();
    while (it != expressDataSet->m_IfcAxis2Placement2D_Map.end()) {
        m_out << "#" << it->first << "=IFCAXIS2PLACEMENT2D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAxis2Placement2D(static_cast< IfcAxis2Placement2D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAxis2Placement3D_Map.begin();
    while (it != expressDataSet->m_IfcAxis2Placement3D_Map.end()) {
        m_out << "#" << it->first << "=IFCAXIS2PLACEMENT3D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAxis2Placement3D(static_cast< IfcAxis2Placement3D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBSplineCurve_Map.begin();
    while (it != expressDataSet->m_IfcBSplineCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCBSPLINECURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBSplineCurve(static_cast< IfcBSplineCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBeam_Map.begin();
    while (it != expressDataSet->m_IfcBeam_Map.end()) {
        m_out << "#" << it->first << "=IFCBEAM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBeam(static_cast< IfcBeam * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBeamType_Map.begin();
    while (it != expressDataSet->m_IfcBeamType_Map.end()) {
        m_out << "#" << it->first << "=IFCBEAMTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBeamType(static_cast< IfcBeamType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBezierCurve_Map.begin();
    while (it != expressDataSet->m_IfcBezierCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCBEZIERCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBezierCurve(static_cast< IfcBezierCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBlobTexture_Map.begin();
    while (it != expressDataSet->m_IfcBlobTexture_Map.end()) {
        m_out << "#" << it->first << "=IFCBLOBTEXTURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBlobTexture(static_cast< IfcBlobTexture * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBlock_Map.begin();
    while (it != expressDataSet->m_IfcBlock_Map.end()) {
        m_out << "#" << it->first << "=IFCBLOCK(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBlock(static_cast< IfcBlock * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoilerType_Map.begin();
    while (it != expressDataSet->m_IfcBoilerType_Map.end()) {
        m_out << "#" << it->first << "=IFCBOILERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoilerType(static_cast< IfcBoilerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBooleanClippingResult_Map.begin();
    while (it != expressDataSet->m_IfcBooleanClippingResult_Map.end()) {
        m_out << "#" << it->first << "=IFCBOOLEANCLIPPINGRESULT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBooleanClippingResult(static_cast< IfcBooleanClippingResult * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBooleanResult_Map.begin();
    while (it != expressDataSet->m_IfcBooleanResult_Map.end()) {
        m_out << "#" << it->first << "=IFCBOOLEANRESULT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBooleanResult(static_cast< IfcBooleanResult * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundaryCondition_Map.begin();
    while (it != expressDataSet->m_IfcBoundaryCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDARYCONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundaryCondition(static_cast< IfcBoundaryCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundaryEdgeCondition_Map.begin();
    while (it != expressDataSet->m_IfcBoundaryEdgeCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDARYEDGECONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundaryEdgeCondition(static_cast< IfcBoundaryEdgeCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundaryFaceCondition_Map.begin();
    while (it != expressDataSet->m_IfcBoundaryFaceCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDARYFACECONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundaryFaceCondition(static_cast< IfcBoundaryFaceCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundaryNodeCondition_Map.begin();
    while (it != expressDataSet->m_IfcBoundaryNodeCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDARYNODECONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundaryNodeCondition(static_cast< IfcBoundaryNodeCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundaryNodeConditionWarping_Map.begin();
    while (it != expressDataSet->m_IfcBoundaryNodeConditionWarping_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDARYNODECONDITIONWARPING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundaryNodeConditionWarping(static_cast< IfcBoundaryNodeConditionWarping * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundedCurve_Map.begin();
    while (it != expressDataSet->m_IfcBoundedCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDEDCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundedCurve(static_cast< IfcBoundedCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundedSurface_Map.begin();
    while (it != expressDataSet->m_IfcBoundedSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDEDSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundedSurface(static_cast< IfcBoundedSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoundingBox_Map.begin();
    while (it != expressDataSet->m_IfcBoundingBox_Map.end()) {
        m_out << "#" << it->first << "=IFCBOUNDINGBOX(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoundingBox(static_cast< IfcBoundingBox * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBoxedHalfSpace_Map.begin();
    while (it != expressDataSet->m_IfcBoxedHalfSpace_Map.end()) {
        m_out << "#" << it->first << "=IFCBOXEDHALFSPACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBoxedHalfSpace(static_cast< IfcBoxedHalfSpace * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuilding_Map.begin();
    while (it != expressDataSet->m_IfcBuilding_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuilding(static_cast< IfcBuilding * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuildingElement_Map.begin();
    while (it != expressDataSet->m_IfcBuildingElement_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDINGELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuildingElement(static_cast< IfcBuildingElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuildingElementPart_Map.begin();
    while (it != expressDataSet->m_IfcBuildingElementPart_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDINGELEMENTPART(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuildingElementPart(static_cast< IfcBuildingElementPart * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuildingElementProxy_Map.begin();
    while (it != expressDataSet->m_IfcBuildingElementProxy_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDINGELEMENTPROXY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuildingElementProxy(static_cast< IfcBuildingElementProxy * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuildingElementProxyType_Map.begin();
    while (it != expressDataSet->m_IfcBuildingElementProxyType_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDINGELEMENTPROXYTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuildingElementProxyType(static_cast< IfcBuildingElementProxyType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuildingElementType_Map.begin();
    while (it != expressDataSet->m_IfcBuildingElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDINGELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuildingElementType(static_cast< IfcBuildingElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBuildingStorey_Map.begin();
    while (it != expressDataSet->m_IfcBuildingStorey_Map.end()) {
        m_out << "#" << it->first << "=IFCBUILDINGSTOREY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBuildingStorey(static_cast< IfcBuildingStorey * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCSHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCShapeProfileDef(static_cast< IfcCShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCableCarrierFittingType_Map.begin();
    while (it != expressDataSet->m_IfcCableCarrierFittingType_Map.end()) {
        m_out << "#" << it->first << "=IFCCABLECARRIERFITTINGTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCableCarrierFittingType(static_cast< IfcCableCarrierFittingType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCableCarrierSegmentType_Map.begin();
    while (it != expressDataSet->m_IfcCableCarrierSegmentType_Map.end()) {
        m_out << "#" << it->first << "=IFCCABLECARRIERSEGMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCableCarrierSegmentType(static_cast< IfcCableCarrierSegmentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCableSegmentType_Map.begin();
    while (it != expressDataSet->m_IfcCableSegmentType_Map.end()) {
        m_out << "#" << it->first << "=IFCCABLESEGMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCableSegmentType(static_cast< IfcCableSegmentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCalendarDate_Map.begin();
    while (it != expressDataSet->m_IfcCalendarDate_Map.end()) {
        m_out << "#" << it->first << "=IFCCALENDARDATE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCalendarDate(static_cast< IfcCalendarDate * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCartesianPoint_Map.begin();
    while (it != expressDataSet->m_IfcCartesianPoint_Map.end()) {
        m_out << "#" << it->first << "=IFCCARTESIANPOINT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCartesianPoint(static_cast< IfcCartesianPoint * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCartesianTransformationOperator_Map.begin();
    while (it != expressDataSet->m_IfcCartesianTransformationOperator_Map.end()) {
        m_out << "#" << it->first << "=IFCCARTESIANTRANSFORMATIONOPERATOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCartesianTransformationOperator(static_cast< IfcCartesianTransformationOperator * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCartesianTransformationOperator2D_Map.begin();
    while (it != expressDataSet->m_IfcCartesianTransformationOperator2D_Map.end()) {
        m_out << "#" << it->first << "=IFCCARTESIANTRANSFORMATIONOPERATOR2D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCartesianTransformationOperator2D(static_cast< IfcCartesianTransformationOperator2D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCartesianTransformationOperator2DnonUniform_Map.begin();
    while (it != expressDataSet->m_IfcCartesianTransformationOperator2DnonUniform_Map.end()) {
        m_out << "#" << it->first << "=IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCartesianTransformationOperator2DnonUniform(static_cast< IfcCartesianTransformationOperator2DnonUniform * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCartesianTransformationOperator3D_Map.begin();
    while (it != expressDataSet->m_IfcCartesianTransformationOperator3D_Map.end()) {
        m_out << "#" << it->first << "=IFCCARTESIANTRANSFORMATIONOPERATOR3D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCartesianTransformationOperator3D(static_cast< IfcCartesianTransformationOperator3D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCartesianTransformationOperator3DnonUniform_Map.begin();
    while (it != expressDataSet->m_IfcCartesianTransformationOperator3DnonUniform_Map.end()) {
        m_out << "#" << it->first << "=IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCartesianTransformationOperator3DnonUniform(static_cast< IfcCartesianTransformationOperator3DnonUniform * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCenterLineProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCenterLineProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCENTERLINEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCenterLineProfileDef(static_cast< IfcCenterLineProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcChamferEdgeFeature_Map.begin();
    while (it != expressDataSet->m_IfcChamferEdgeFeature_Map.end()) {
        m_out << "#" << it->first << "=IFCCHAMFEREDGEFEATURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcChamferEdgeFeature(static_cast< IfcChamferEdgeFeature * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcChillerType_Map.begin();
    while (it != expressDataSet->m_IfcChillerType_Map.end()) {
        m_out << "#" << it->first << "=IFCCHILLERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcChillerType(static_cast< IfcChillerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCircle_Map.begin();
    while (it != expressDataSet->m_IfcCircle_Map.end()) {
        m_out << "#" << it->first << "=IFCCIRCLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCircle(static_cast< IfcCircle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCircleHollowProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCircleHollowProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCIRCLEHOLLOWPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCircleHollowProfileDef(static_cast< IfcCircleHollowProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCircleProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCircleProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCIRCLEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCircleProfileDef(static_cast< IfcCircleProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClassification_Map.begin();
    while (it != expressDataSet->m_IfcClassification_Map.end()) {
        m_out << "#" << it->first << "=IFCCLASSIFICATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClassification(static_cast< IfcClassification * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClassificationItem_Map.begin();
    while (it != expressDataSet->m_IfcClassificationItem_Map.end()) {
        m_out << "#" << it->first << "=IFCCLASSIFICATIONITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClassificationItem(static_cast< IfcClassificationItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClassificationItemRelationship_Map.begin();
    while (it != expressDataSet->m_IfcClassificationItemRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCCLASSIFICATIONITEMRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClassificationItemRelationship(static_cast< IfcClassificationItemRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClassificationNotation_Map.begin();
    while (it != expressDataSet->m_IfcClassificationNotation_Map.end()) {
        m_out << "#" << it->first << "=IFCCLASSIFICATIONNOTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClassificationNotation(static_cast< IfcClassificationNotation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClassificationNotationFacet_Map.begin();
    while (it != expressDataSet->m_IfcClassificationNotationFacet_Map.end()) {
        m_out << "#" << it->first << "=IFCCLASSIFICATIONNOTATIONFACET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClassificationNotationFacet(static_cast< IfcClassificationNotationFacet * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClassificationReference_Map.begin();
    while (it != expressDataSet->m_IfcClassificationReference_Map.end()) {
        m_out << "#" << it->first << "=IFCCLASSIFICATIONREFERENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClassificationReference(static_cast< IfcClassificationReference * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClosedShell_Map.begin();
    while (it != expressDataSet->m_IfcClosedShell_Map.end()) {
        m_out << "#" << it->first << "=IFCCLOSEDSHELL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClosedShell(static_cast< IfcClosedShell * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCoilType_Map.begin();
    while (it != expressDataSet->m_IfcCoilType_Map.end()) {
        m_out << "#" << it->first << "=IFCCOILTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCoilType(static_cast< IfcCoilType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcColourRgb_Map.begin();
    while (it != expressDataSet->m_IfcColourRgb_Map.end()) {
        m_out << "#" << it->first << "=IFCCOLOURRGB(";
        if (!writeIfNotInited(it->first)) {
            writeIfcColourRgb(static_cast< IfcColourRgb * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcColourSpecification_Map.begin();
    while (it != expressDataSet->m_IfcColourSpecification_Map.end()) {
        m_out << "#" << it->first << "=IFCCOLOURSPECIFICATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcColourSpecification(static_cast< IfcColourSpecification * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcColumn_Map.begin();
    while (it != expressDataSet->m_IfcColumn_Map.end()) {
        m_out << "#" << it->first << "=IFCCOLUMN(";
        if (!writeIfNotInited(it->first)) {
            writeIfcColumn(static_cast< IfcColumn * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcColumnType_Map.begin();
    while (it != expressDataSet->m_IfcColumnType_Map.end()) {
        m_out << "#" << it->first << "=IFCCOLUMNTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcColumnType(static_cast< IfcColumnType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcComplexProperty_Map.begin();
    while (it != expressDataSet->m_IfcComplexProperty_Map.end()) {
        m_out << "#" << it->first << "=IFCCOMPLEXPROPERTY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcComplexProperty(static_cast< IfcComplexProperty * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCompositeCurve_Map.begin();
    while (it != expressDataSet->m_IfcCompositeCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCCOMPOSITECURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCompositeCurve(static_cast< IfcCompositeCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCompositeCurveSegment_Map.begin();
    while (it != expressDataSet->m_IfcCompositeCurveSegment_Map.end()) {
        m_out << "#" << it->first << "=IFCCOMPOSITECURVESEGMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCompositeCurveSegment(static_cast< IfcCompositeCurveSegment * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCompositeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCompositeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCOMPOSITEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCompositeProfileDef(static_cast< IfcCompositeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCompressorType_Map.begin();
    while (it != expressDataSet->m_IfcCompressorType_Map.end()) {
        m_out << "#" << it->first << "=IFCCOMPRESSORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCompressorType(static_cast< IfcCompressorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCondenserType_Map.begin();
    while (it != expressDataSet->m_IfcCondenserType_Map.end()) {
        m_out << "#" << it->first << "=IFCCONDENSERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCondenserType(static_cast< IfcCondenserType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCondition_Map.begin();
    while (it != expressDataSet->m_IfcCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCCONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCondition(static_cast< IfcCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConditionCriterion_Map.begin();
    while (it != expressDataSet->m_IfcConditionCriterion_Map.end()) {
        m_out << "#" << it->first << "=IFCCONDITIONCRITERION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConditionCriterion(static_cast< IfcConditionCriterion * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConic_Map.begin();
    while (it != expressDataSet->m_IfcConic_Map.end()) {
        m_out << "#" << it->first << "=IFCCONIC(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConic(static_cast< IfcConic * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectedFaceSet_Map.begin();
    while (it != expressDataSet->m_IfcConnectedFaceSet_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTEDFACESET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectedFaceSet(static_cast< IfcConnectedFaceSet * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectionCurveGeometry_Map.begin();
    while (it != expressDataSet->m_IfcConnectionCurveGeometry_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTIONCURVEGEOMETRY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectionCurveGeometry(static_cast< IfcConnectionCurveGeometry * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectionGeometry_Map.begin();
    while (it != expressDataSet->m_IfcConnectionGeometry_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTIONGEOMETRY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectionGeometry(static_cast< IfcConnectionGeometry * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectionPointEccentricity_Map.begin();
    while (it != expressDataSet->m_IfcConnectionPointEccentricity_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTIONPOINTECCENTRICITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectionPointEccentricity(static_cast< IfcConnectionPointEccentricity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectionPointGeometry_Map.begin();
    while (it != expressDataSet->m_IfcConnectionPointGeometry_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTIONPOINTGEOMETRY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectionPointGeometry(static_cast< IfcConnectionPointGeometry * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectionPortGeometry_Map.begin();
    while (it != expressDataSet->m_IfcConnectionPortGeometry_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTIONPORTGEOMETRY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectionPortGeometry(static_cast< IfcConnectionPortGeometry * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConnectionSurfaceGeometry_Map.begin();
    while (it != expressDataSet->m_IfcConnectionSurfaceGeometry_Map.end()) {
        m_out << "#" << it->first << "=IFCCONNECTIONSURFACEGEOMETRY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConnectionSurfaceGeometry(static_cast< IfcConnectionSurfaceGeometry * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstraint_Map.begin();
    while (it != expressDataSet->m_IfcConstraint_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRAINT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstraint(static_cast< IfcConstraint * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstraintAggregationRelationship_Map.begin();
    while (it != expressDataSet->m_IfcConstraintAggregationRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRAINTAGGREGATIONRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstraintAggregationRelationship(static_cast< IfcConstraintAggregationRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstraintClassificationRelationship_Map.begin();
    while (it != expressDataSet->m_IfcConstraintClassificationRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstraintClassificationRelationship(static_cast< IfcConstraintClassificationRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstraintRelationship_Map.begin();
    while (it != expressDataSet->m_IfcConstraintRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRAINTRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstraintRelationship(static_cast< IfcConstraintRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstructionEquipmentResource_Map.begin();
    while (it != expressDataSet->m_IfcConstructionEquipmentResource_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRUCTIONEQUIPMENTRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstructionEquipmentResource(static_cast< IfcConstructionEquipmentResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstructionMaterialResource_Map.begin();
    while (it != expressDataSet->m_IfcConstructionMaterialResource_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRUCTIONMATERIALRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstructionMaterialResource(static_cast< IfcConstructionMaterialResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstructionProductResource_Map.begin();
    while (it != expressDataSet->m_IfcConstructionProductResource_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRUCTIONPRODUCTRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstructionProductResource(static_cast< IfcConstructionProductResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConstructionResource_Map.begin();
    while (it != expressDataSet->m_IfcConstructionResource_Map.end()) {
        m_out << "#" << it->first << "=IFCCONSTRUCTIONRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConstructionResource(static_cast< IfcConstructionResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcContextDependentUnit_Map.begin();
    while (it != expressDataSet->m_IfcContextDependentUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCCONTEXTDEPENDENTUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcContextDependentUnit(static_cast< IfcContextDependentUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcControl_Map.begin();
    while (it != expressDataSet->m_IfcControl_Map.end()) {
        m_out << "#" << it->first << "=IFCCONTROL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcControl(static_cast< IfcControl * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcControllerType_Map.begin();
    while (it != expressDataSet->m_IfcControllerType_Map.end()) {
        m_out << "#" << it->first << "=IFCCONTROLLERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcControllerType(static_cast< IfcControllerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcConversionBasedUnit_Map.begin();
    while (it != expressDataSet->m_IfcConversionBasedUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCCONVERSIONBASEDUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcConversionBasedUnit(static_cast< IfcConversionBasedUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCooledBeamType_Map.begin();
    while (it != expressDataSet->m_IfcCooledBeamType_Map.end()) {
        m_out << "#" << it->first << "=IFCCOOLEDBEAMTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCooledBeamType(static_cast< IfcCooledBeamType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCoolingTowerType_Map.begin();
    while (it != expressDataSet->m_IfcCoolingTowerType_Map.end()) {
        m_out << "#" << it->first << "=IFCCOOLINGTOWERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCoolingTowerType(static_cast< IfcCoolingTowerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCoordinatedUniversalTimeOffset_Map.begin();
    while (it != expressDataSet->m_IfcCoordinatedUniversalTimeOffset_Map.end()) {
        m_out << "#" << it->first << "=IFCCOORDINATEDUNIVERSALTIMEOFFSET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCoordinatedUniversalTimeOffset(static_cast< IfcCoordinatedUniversalTimeOffset * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCostItem_Map.begin();
    while (it != expressDataSet->m_IfcCostItem_Map.end()) {
        m_out << "#" << it->first << "=IFCCOSTITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCostItem(static_cast< IfcCostItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCostSchedule_Map.begin();
    while (it != expressDataSet->m_IfcCostSchedule_Map.end()) {
        m_out << "#" << it->first << "=IFCCOSTSCHEDULE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCostSchedule(static_cast< IfcCostSchedule * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCostValue_Map.begin();
    while (it != expressDataSet->m_IfcCostValue_Map.end()) {
        m_out << "#" << it->first << "=IFCCOSTVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCostValue(static_cast< IfcCostValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCovering_Map.begin();
    while (it != expressDataSet->m_IfcCovering_Map.end()) {
        m_out << "#" << it->first << "=IFCCOVERING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCovering(static_cast< IfcCovering * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCoveringType_Map.begin();
    while (it != expressDataSet->m_IfcCoveringType_Map.end()) {
        m_out << "#" << it->first << "=IFCCOVERINGTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCoveringType(static_cast< IfcCoveringType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCraneRailAShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCraneRailAShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCRANERAILASHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCraneRailAShapeProfileDef(static_cast< IfcCraneRailAShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCraneRailFShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcCraneRailFShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCCRANERAILFSHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCraneRailFShapeProfileDef(static_cast< IfcCraneRailFShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCrewResource_Map.begin();
    while (it != expressDataSet->m_IfcCrewResource_Map.end()) {
        m_out << "#" << it->first << "=IFCCREWRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCrewResource(static_cast< IfcCrewResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCsgPrimitive3D_Map.begin();
    while (it != expressDataSet->m_IfcCsgPrimitive3D_Map.end()) {
        m_out << "#" << it->first << "=IFCCSGPRIMITIVE3D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCsgPrimitive3D(static_cast< IfcCsgPrimitive3D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCsgSolid_Map.begin();
    while (it != expressDataSet->m_IfcCsgSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCCSGSOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCsgSolid(static_cast< IfcCsgSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurrencyRelationship_Map.begin();
    while (it != expressDataSet->m_IfcCurrencyRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCCURRENCYRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurrencyRelationship(static_cast< IfcCurrencyRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurtainWall_Map.begin();
    while (it != expressDataSet->m_IfcCurtainWall_Map.end()) {
        m_out << "#" << it->first << "=IFCCURTAINWALL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurtainWall(static_cast< IfcCurtainWall * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurtainWallType_Map.begin();
    while (it != expressDataSet->m_IfcCurtainWallType_Map.end()) {
        m_out << "#" << it->first << "=IFCCURTAINWALLTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurtainWallType(static_cast< IfcCurtainWallType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurve_Map.begin();
    while (it != expressDataSet->m_IfcCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurve(static_cast< IfcCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurveBoundedPlane_Map.begin();
    while (it != expressDataSet->m_IfcCurveBoundedPlane_Map.end()) {
        m_out << "#" << it->first << "=IFCCURVEBOUNDEDPLANE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurveBoundedPlane(static_cast< IfcCurveBoundedPlane * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurveStyle_Map.begin();
    while (it != expressDataSet->m_IfcCurveStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCCURVESTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurveStyle(static_cast< IfcCurveStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurveStyleFont_Map.begin();
    while (it != expressDataSet->m_IfcCurveStyleFont_Map.end()) {
        m_out << "#" << it->first << "=IFCCURVESTYLEFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurveStyleFont(static_cast< IfcCurveStyleFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurveStyleFontAndScaling_Map.begin();
    while (it != expressDataSet->m_IfcCurveStyleFontAndScaling_Map.end()) {
        m_out << "#" << it->first << "=IFCCURVESTYLEFONTANDSCALING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurveStyleFontAndScaling(static_cast< IfcCurveStyleFontAndScaling * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCurveStyleFontPattern_Map.begin();
    while (it != expressDataSet->m_IfcCurveStyleFontPattern_Map.end()) {
        m_out << "#" << it->first << "=IFCCURVESTYLEFONTPATTERN(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCurveStyleFontPattern(static_cast< IfcCurveStyleFontPattern * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDamperType_Map.begin();
    while (it != expressDataSet->m_IfcDamperType_Map.end()) {
        m_out << "#" << it->first << "=IFCDAMPERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDamperType(static_cast< IfcDamperType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDateAndTime_Map.begin();
    while (it != expressDataSet->m_IfcDateAndTime_Map.end()) {
        m_out << "#" << it->first << "=IFCDATEANDTIME(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDateAndTime(static_cast< IfcDateAndTime * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDefinedSymbol_Map.begin();
    while (it != expressDataSet->m_IfcDefinedSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCDEFINEDSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDefinedSymbol(static_cast< IfcDefinedSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDerivedProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcDerivedProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCDERIVEDPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDerivedProfileDef(static_cast< IfcDerivedProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDerivedUnit_Map.begin();
    while (it != expressDataSet->m_IfcDerivedUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCDERIVEDUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDerivedUnit(static_cast< IfcDerivedUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDerivedUnitElement_Map.begin();
    while (it != expressDataSet->m_IfcDerivedUnitElement_Map.end()) {
        m_out << "#" << it->first << "=IFCDERIVEDUNITELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDerivedUnitElement(static_cast< IfcDerivedUnitElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDiameterDimension_Map.begin();
    while (it != expressDataSet->m_IfcDiameterDimension_Map.end()) {
        m_out << "#" << it->first << "=IFCDIAMETERDIMENSION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDiameterDimension(static_cast< IfcDiameterDimension * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDimensionCalloutRelationship_Map.begin();
    while (it != expressDataSet->m_IfcDimensionCalloutRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCDIMENSIONCALLOUTRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDimensionCalloutRelationship(static_cast< IfcDimensionCalloutRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDimensionCurve_Map.begin();
    while (it != expressDataSet->m_IfcDimensionCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCDIMENSIONCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDimensionCurve(static_cast< IfcDimensionCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDimensionCurveDirectedCallout_Map.begin();
    while (it != expressDataSet->m_IfcDimensionCurveDirectedCallout_Map.end()) {
        m_out << "#" << it->first << "=IFCDIMENSIONCURVEDIRECTEDCALLOUT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDimensionCurveDirectedCallout(static_cast< IfcDimensionCurveDirectedCallout * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDimensionCurveTerminator_Map.begin();
    while (it != expressDataSet->m_IfcDimensionCurveTerminator_Map.end()) {
        m_out << "#" << it->first << "=IFCDIMENSIONCURVETERMINATOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDimensionCurveTerminator(static_cast< IfcDimensionCurveTerminator * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDimensionPair_Map.begin();
    while (it != expressDataSet->m_IfcDimensionPair_Map.end()) {
        m_out << "#" << it->first << "=IFCDIMENSIONPAIR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDimensionPair(static_cast< IfcDimensionPair * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDimensionalExponents_Map.begin();
    while (it != expressDataSet->m_IfcDimensionalExponents_Map.end()) {
        m_out << "#" << it->first << "=IFCDIMENSIONALEXPONENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDimensionalExponents(static_cast< IfcDimensionalExponents * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDirection_Map.begin();
    while (it != expressDataSet->m_IfcDirection_Map.end()) {
        m_out << "#" << it->first << "=IFCDIRECTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDirection(static_cast< IfcDirection * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDiscreteAccessory_Map.begin();
    while (it != expressDataSet->m_IfcDiscreteAccessory_Map.end()) {
        m_out << "#" << it->first << "=IFCDISCRETEACCESSORY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDiscreteAccessory(static_cast< IfcDiscreteAccessory * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDiscreteAccessoryType_Map.begin();
    while (it != expressDataSet->m_IfcDiscreteAccessoryType_Map.end()) {
        m_out << "#" << it->first << "=IFCDISCRETEACCESSORYTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDiscreteAccessoryType(static_cast< IfcDiscreteAccessoryType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionChamberElement_Map.begin();
    while (it != expressDataSet->m_IfcDistributionChamberElement_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONCHAMBERELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionChamberElement(static_cast< IfcDistributionChamberElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionChamberElementType_Map.begin();
    while (it != expressDataSet->m_IfcDistributionChamberElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONCHAMBERELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionChamberElementType(static_cast< IfcDistributionChamberElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionControlElement_Map.begin();
    while (it != expressDataSet->m_IfcDistributionControlElement_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONCONTROLELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionControlElement(static_cast< IfcDistributionControlElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionControlElementType_Map.begin();
    while (it != expressDataSet->m_IfcDistributionControlElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONCONTROLELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionControlElementType(static_cast< IfcDistributionControlElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionElement_Map.begin();
    while (it != expressDataSet->m_IfcDistributionElement_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionElement(static_cast< IfcDistributionElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionElementType_Map.begin();
    while (it != expressDataSet->m_IfcDistributionElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionElementType(static_cast< IfcDistributionElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionFlowElement_Map.begin();
    while (it != expressDataSet->m_IfcDistributionFlowElement_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONFLOWELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionFlowElement(static_cast< IfcDistributionFlowElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionFlowElementType_Map.begin();
    while (it != expressDataSet->m_IfcDistributionFlowElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONFLOWELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionFlowElementType(static_cast< IfcDistributionFlowElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDistributionPort_Map.begin();
    while (it != expressDataSet->m_IfcDistributionPort_Map.end()) {
        m_out << "#" << it->first << "=IFCDISTRIBUTIONPORT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDistributionPort(static_cast< IfcDistributionPort * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDocumentElectronicFormat_Map.begin();
    while (it != expressDataSet->m_IfcDocumentElectronicFormat_Map.end()) {
        m_out << "#" << it->first << "=IFCDOCUMENTELECTRONICFORMAT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDocumentElectronicFormat(static_cast< IfcDocumentElectronicFormat * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDocumentInformation_Map.begin();
    while (it != expressDataSet->m_IfcDocumentInformation_Map.end()) {
        m_out << "#" << it->first << "=IFCDOCUMENTINFORMATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDocumentInformation(static_cast< IfcDocumentInformation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDocumentInformationRelationship_Map.begin();
    while (it != expressDataSet->m_IfcDocumentInformationRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCDOCUMENTINFORMATIONRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDocumentInformationRelationship(static_cast< IfcDocumentInformationRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDocumentReference_Map.begin();
    while (it != expressDataSet->m_IfcDocumentReference_Map.end()) {
        m_out << "#" << it->first << "=IFCDOCUMENTREFERENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDocumentReference(static_cast< IfcDocumentReference * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDoor_Map.begin();
    while (it != expressDataSet->m_IfcDoor_Map.end()) {
        m_out << "#" << it->first << "=IFCDOOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDoor(static_cast< IfcDoor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDoorLiningProperties_Map.begin();
    while (it != expressDataSet->m_IfcDoorLiningProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCDOORLININGPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDoorLiningProperties(static_cast< IfcDoorLiningProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDoorPanelProperties_Map.begin();
    while (it != expressDataSet->m_IfcDoorPanelProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCDOORPANELPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDoorPanelProperties(static_cast< IfcDoorPanelProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDoorStyle_Map.begin();
    while (it != expressDataSet->m_IfcDoorStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCDOORSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDoorStyle(static_cast< IfcDoorStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDraughtingCallout_Map.begin();
    while (it != expressDataSet->m_IfcDraughtingCallout_Map.end()) {
        m_out << "#" << it->first << "=IFCDRAUGHTINGCALLOUT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDraughtingCallout(static_cast< IfcDraughtingCallout * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDraughtingCalloutRelationship_Map.begin();
    while (it != expressDataSet->m_IfcDraughtingCalloutRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCDRAUGHTINGCALLOUTRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDraughtingCalloutRelationship(static_cast< IfcDraughtingCalloutRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDraughtingPreDefinedColour_Map.begin();
    while (it != expressDataSet->m_IfcDraughtingPreDefinedColour_Map.end()) {
        m_out << "#" << it->first << "=IFCDRAUGHTINGPREDEFINEDCOLOUR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDraughtingPreDefinedColour(static_cast< IfcDraughtingPreDefinedColour * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDraughtingPreDefinedCurveFont_Map.begin();
    while (it != expressDataSet->m_IfcDraughtingPreDefinedCurveFont_Map.end()) {
        m_out << "#" << it->first << "=IFCDRAUGHTINGPREDEFINEDCURVEFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDraughtingPreDefinedCurveFont(static_cast< IfcDraughtingPreDefinedCurveFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDraughtingPreDefinedTextFont_Map.begin();
    while (it != expressDataSet->m_IfcDraughtingPreDefinedTextFont_Map.end()) {
        m_out << "#" << it->first << "=IFCDRAUGHTINGPREDEFINEDTEXTFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDraughtingPreDefinedTextFont(static_cast< IfcDraughtingPreDefinedTextFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDuctFittingType_Map.begin();
    while (it != expressDataSet->m_IfcDuctFittingType_Map.end()) {
        m_out << "#" << it->first << "=IFCDUCTFITTINGTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDuctFittingType(static_cast< IfcDuctFittingType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDuctSegmentType_Map.begin();
    while (it != expressDataSet->m_IfcDuctSegmentType_Map.end()) {
        m_out << "#" << it->first << "=IFCDUCTSEGMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDuctSegmentType(static_cast< IfcDuctSegmentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcDuctSilencerType_Map.begin();
    while (it != expressDataSet->m_IfcDuctSilencerType_Map.end()) {
        m_out << "#" << it->first << "=IFCDUCTSILENCERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcDuctSilencerType(static_cast< IfcDuctSilencerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEdge_Map.begin();
    while (it != expressDataSet->m_IfcEdge_Map.end()) {
        m_out << "#" << it->first << "=IFCEDGE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEdge(static_cast< IfcEdge * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEdgeCurve_Map.begin();
    while (it != expressDataSet->m_IfcEdgeCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCEDGECURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEdgeCurve(static_cast< IfcEdgeCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEdgeFeature_Map.begin();
    while (it != expressDataSet->m_IfcEdgeFeature_Map.end()) {
        m_out << "#" << it->first << "=IFCEDGEFEATURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEdgeFeature(static_cast< IfcEdgeFeature * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEdgeLoop_Map.begin();
    while (it != expressDataSet->m_IfcEdgeLoop_Map.end()) {
        m_out << "#" << it->first << "=IFCEDGELOOP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEdgeLoop(static_cast< IfcEdgeLoop * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricApplianceType_Map.begin();
    while (it != expressDataSet->m_IfcElectricApplianceType_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICAPPLIANCETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricApplianceType(static_cast< IfcElectricApplianceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricDistributionPoint_Map.begin();
    while (it != expressDataSet->m_IfcElectricDistributionPoint_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICDISTRIBUTIONPOINT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricDistributionPoint(static_cast< IfcElectricDistributionPoint * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricFlowStorageDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcElectricFlowStorageDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICFLOWSTORAGEDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricFlowStorageDeviceType(static_cast< IfcElectricFlowStorageDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricGeneratorType_Map.begin();
    while (it != expressDataSet->m_IfcElectricGeneratorType_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICGENERATORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricGeneratorType(static_cast< IfcElectricGeneratorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricHeaterType_Map.begin();
    while (it != expressDataSet->m_IfcElectricHeaterType_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICHEATERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricHeaterType(static_cast< IfcElectricHeaterType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricMotorType_Map.begin();
    while (it != expressDataSet->m_IfcElectricMotorType_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICMOTORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricMotorType(static_cast< IfcElectricMotorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricTimeControlType_Map.begin();
    while (it != expressDataSet->m_IfcElectricTimeControlType_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICTIMECONTROLTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricTimeControlType(static_cast< IfcElectricTimeControlType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricalBaseProperties_Map.begin();
    while (it != expressDataSet->m_IfcElectricalBaseProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICALBASEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricalBaseProperties(static_cast< IfcElectricalBaseProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricalCircuit_Map.begin();
    while (it != expressDataSet->m_IfcElectricalCircuit_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICALCIRCUIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricalCircuit(static_cast< IfcElectricalCircuit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElectricalElement_Map.begin();
    while (it != expressDataSet->m_IfcElectricalElement_Map.end()) {
        m_out << "#" << it->first << "=IFCELECTRICALELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElectricalElement(static_cast< IfcElectricalElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElement_Map.begin();
    while (it != expressDataSet->m_IfcElement_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElement(static_cast< IfcElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementAssembly_Map.begin();
    while (it != expressDataSet->m_IfcElementAssembly_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTASSEMBLY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementAssembly(static_cast< IfcElementAssembly * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementComponent_Map.begin();
    while (it != expressDataSet->m_IfcElementComponent_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTCOMPONENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementComponent(static_cast< IfcElementComponent * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementComponentType_Map.begin();
    while (it != expressDataSet->m_IfcElementComponentType_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTCOMPONENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementComponentType(static_cast< IfcElementComponentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementQuantity_Map.begin();
    while (it != expressDataSet->m_IfcElementQuantity_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTQUANTITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementQuantity(static_cast< IfcElementQuantity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementType_Map.begin();
    while (it != expressDataSet->m_IfcElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementType(static_cast< IfcElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementarySurface_Map.begin();
    while (it != expressDataSet->m_IfcElementarySurface_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTARYSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementarySurface(static_cast< IfcElementarySurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEllipse_Map.begin();
    while (it != expressDataSet->m_IfcEllipse_Map.end()) {
        m_out << "#" << it->first << "=IFCELLIPSE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEllipse(static_cast< IfcEllipse * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEllipseProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcEllipseProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCELLIPSEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEllipseProfileDef(static_cast< IfcEllipseProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEnergyConversionDevice_Map.begin();
    while (it != expressDataSet->m_IfcEnergyConversionDevice_Map.end()) {
        m_out << "#" << it->first << "=IFCENERGYCONVERSIONDEVICE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEnergyConversionDevice(static_cast< IfcEnergyConversionDevice * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEnergyConversionDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcEnergyConversionDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCENERGYCONVERSIONDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEnergyConversionDeviceType(static_cast< IfcEnergyConversionDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEnergyProperties_Map.begin();
    while (it != expressDataSet->m_IfcEnergyProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCENERGYPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEnergyProperties(static_cast< IfcEnergyProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEnvironmentalImpactValue_Map.begin();
    while (it != expressDataSet->m_IfcEnvironmentalImpactValue_Map.end()) {
        m_out << "#" << it->first << "=IFCENVIRONMENTALIMPACTVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEnvironmentalImpactValue(static_cast< IfcEnvironmentalImpactValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEquipmentElement_Map.begin();
    while (it != expressDataSet->m_IfcEquipmentElement_Map.end()) {
        m_out << "#" << it->first << "=IFCEQUIPMENTELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEquipmentElement(static_cast< IfcEquipmentElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEquipmentStandard_Map.begin();
    while (it != expressDataSet->m_IfcEquipmentStandard_Map.end()) {
        m_out << "#" << it->first << "=IFCEQUIPMENTSTANDARD(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEquipmentStandard(static_cast< IfcEquipmentStandard * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEvaporativeCoolerType_Map.begin();
    while (it != expressDataSet->m_IfcEvaporativeCoolerType_Map.end()) {
        m_out << "#" << it->first << "=IFCEVAPORATIVECOOLERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEvaporativeCoolerType(static_cast< IfcEvaporativeCoolerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcEvaporatorType_Map.begin();
    while (it != expressDataSet->m_IfcEvaporatorType_Map.end()) {
        m_out << "#" << it->first << "=IFCEVAPORATORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcEvaporatorType(static_cast< IfcEvaporatorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExtendedMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcExtendedMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTENDEDMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExtendedMaterialProperties(static_cast< IfcExtendedMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExternalReference_Map.begin();
    while (it != expressDataSet->m_IfcExternalReference_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTERNALREFERENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExternalReference(static_cast< IfcExternalReference * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExternallyDefinedHatchStyle_Map.begin();
    while (it != expressDataSet->m_IfcExternallyDefinedHatchStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTERNALLYDEFINEDHATCHSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExternallyDefinedHatchStyle(static_cast< IfcExternallyDefinedHatchStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExternallyDefinedSurfaceStyle_Map.begin();
    while (it != expressDataSet->m_IfcExternallyDefinedSurfaceStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTERNALLYDEFINEDSURFACESTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExternallyDefinedSurfaceStyle(static_cast< IfcExternallyDefinedSurfaceStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExternallyDefinedSymbol_Map.begin();
    while (it != expressDataSet->m_IfcExternallyDefinedSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTERNALLYDEFINEDSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExternallyDefinedSymbol(static_cast< IfcExternallyDefinedSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExternallyDefinedTextFont_Map.begin();
    while (it != expressDataSet->m_IfcExternallyDefinedTextFont_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTERNALLYDEFINEDTEXTFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExternallyDefinedTextFont(static_cast< IfcExternallyDefinedTextFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcExtrudedAreaSolid_Map.begin();
    while (it != expressDataSet->m_IfcExtrudedAreaSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCEXTRUDEDAREASOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcExtrudedAreaSolid(static_cast< IfcExtrudedAreaSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFace_Map.begin();
    while (it != expressDataSet->m_IfcFace_Map.end()) {
        m_out << "#" << it->first << "=IFCFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFace(static_cast< IfcFace * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFaceBasedSurfaceModel_Map.begin();
    while (it != expressDataSet->m_IfcFaceBasedSurfaceModel_Map.end()) {
        m_out << "#" << it->first << "=IFCFACEBASEDSURFACEMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFaceBasedSurfaceModel(static_cast< IfcFaceBasedSurfaceModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFaceBound_Map.begin();
    while (it != expressDataSet->m_IfcFaceBound_Map.end()) {
        m_out << "#" << it->first << "=IFCFACEBOUND(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFaceBound(static_cast< IfcFaceBound * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFaceOuterBound_Map.begin();
    while (it != expressDataSet->m_IfcFaceOuterBound_Map.end()) {
        m_out << "#" << it->first << "=IFCFACEOUTERBOUND(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFaceOuterBound(static_cast< IfcFaceOuterBound * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFaceSurface_Map.begin();
    while (it != expressDataSet->m_IfcFaceSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCFACESURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFaceSurface(static_cast< IfcFaceSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFacetedBrep_Map.begin();
    while (it != expressDataSet->m_IfcFacetedBrep_Map.end()) {
        m_out << "#" << it->first << "=IFCFACETEDBREP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFacetedBrep(static_cast< IfcFacetedBrep * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFacetedBrepWithVoids_Map.begin();
    while (it != expressDataSet->m_IfcFacetedBrepWithVoids_Map.end()) {
        m_out << "#" << it->first << "=IFCFACETEDBREPWITHVOIDS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFacetedBrepWithVoids(static_cast< IfcFacetedBrepWithVoids * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFailureConnectionCondition_Map.begin();
    while (it != expressDataSet->m_IfcFailureConnectionCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCFAILURECONNECTIONCONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFailureConnectionCondition(static_cast< IfcFailureConnectionCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFanType_Map.begin();
    while (it != expressDataSet->m_IfcFanType_Map.end()) {
        m_out << "#" << it->first << "=IFCFANTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFanType(static_cast< IfcFanType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFastener_Map.begin();
    while (it != expressDataSet->m_IfcFastener_Map.end()) {
        m_out << "#" << it->first << "=IFCFASTENER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFastener(static_cast< IfcFastener * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFastenerType_Map.begin();
    while (it != expressDataSet->m_IfcFastenerType_Map.end()) {
        m_out << "#" << it->first << "=IFCFASTENERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFastenerType(static_cast< IfcFastenerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFeatureElement_Map.begin();
    while (it != expressDataSet->m_IfcFeatureElement_Map.end()) {
        m_out << "#" << it->first << "=IFCFEATUREELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFeatureElement(static_cast< IfcFeatureElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFeatureElementAddition_Map.begin();
    while (it != expressDataSet->m_IfcFeatureElementAddition_Map.end()) {
        m_out << "#" << it->first << "=IFCFEATUREELEMENTADDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFeatureElementAddition(static_cast< IfcFeatureElementAddition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFeatureElementSubtraction_Map.begin();
    while (it != expressDataSet->m_IfcFeatureElementSubtraction_Map.end()) {
        m_out << "#" << it->first << "=IFCFEATUREELEMENTSUBTRACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFeatureElementSubtraction(static_cast< IfcFeatureElementSubtraction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFillAreaStyle_Map.begin();
    while (it != expressDataSet->m_IfcFillAreaStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCFILLAREASTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFillAreaStyle(static_cast< IfcFillAreaStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFillAreaStyleHatching_Map.begin();
    while (it != expressDataSet->m_IfcFillAreaStyleHatching_Map.end()) {
        m_out << "#" << it->first << "=IFCFILLAREASTYLEHATCHING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFillAreaStyleHatching(static_cast< IfcFillAreaStyleHatching * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFillAreaStyleTileSymbolWithStyle_Map.begin();
    while (it != expressDataSet->m_IfcFillAreaStyleTileSymbolWithStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCFILLAREASTYLETILESYMBOLWITHSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFillAreaStyleTileSymbolWithStyle(static_cast< IfcFillAreaStyleTileSymbolWithStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFillAreaStyleTiles_Map.begin();
    while (it != expressDataSet->m_IfcFillAreaStyleTiles_Map.end()) {
        m_out << "#" << it->first << "=IFCFILLAREASTYLETILES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFillAreaStyleTiles(static_cast< IfcFillAreaStyleTiles * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFilterType_Map.begin();
    while (it != expressDataSet->m_IfcFilterType_Map.end()) {
        m_out << "#" << it->first << "=IFCFILTERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFilterType(static_cast< IfcFilterType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFireSuppressionTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcFireSuppressionTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCFIRESUPPRESSIONTERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFireSuppressionTerminalType(static_cast< IfcFireSuppressionTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowController_Map.begin();
    while (it != expressDataSet->m_IfcFlowController_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWCONTROLLER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowController(static_cast< IfcFlowController * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowControllerType_Map.begin();
    while (it != expressDataSet->m_IfcFlowControllerType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWCONTROLLERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowControllerType(static_cast< IfcFlowControllerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowFitting_Map.begin();
    while (it != expressDataSet->m_IfcFlowFitting_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWFITTING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowFitting(static_cast< IfcFlowFitting * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowFittingType_Map.begin();
    while (it != expressDataSet->m_IfcFlowFittingType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWFITTINGTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowFittingType(static_cast< IfcFlowFittingType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowInstrumentType_Map.begin();
    while (it != expressDataSet->m_IfcFlowInstrumentType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWINSTRUMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowInstrumentType(static_cast< IfcFlowInstrumentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowMeterType_Map.begin();
    while (it != expressDataSet->m_IfcFlowMeterType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWMETERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowMeterType(static_cast< IfcFlowMeterType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowMovingDevice_Map.begin();
    while (it != expressDataSet->m_IfcFlowMovingDevice_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWMOVINGDEVICE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowMovingDevice(static_cast< IfcFlowMovingDevice * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowMovingDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcFlowMovingDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWMOVINGDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowMovingDeviceType(static_cast< IfcFlowMovingDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowSegment_Map.begin();
    while (it != expressDataSet->m_IfcFlowSegment_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWSEGMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowSegment(static_cast< IfcFlowSegment * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowSegmentType_Map.begin();
    while (it != expressDataSet->m_IfcFlowSegmentType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWSEGMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowSegmentType(static_cast< IfcFlowSegmentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowStorageDevice_Map.begin();
    while (it != expressDataSet->m_IfcFlowStorageDevice_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWSTORAGEDEVICE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowStorageDevice(static_cast< IfcFlowStorageDevice * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowStorageDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcFlowStorageDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWSTORAGEDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowStorageDeviceType(static_cast< IfcFlowStorageDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowTerminal_Map.begin();
    while (it != expressDataSet->m_IfcFlowTerminal_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWTERMINAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowTerminal(static_cast< IfcFlowTerminal * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcFlowTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWTERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowTerminalType(static_cast< IfcFlowTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowTreatmentDevice_Map.begin();
    while (it != expressDataSet->m_IfcFlowTreatmentDevice_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWTREATMENTDEVICE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowTreatmentDevice(static_cast< IfcFlowTreatmentDevice * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFlowTreatmentDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcFlowTreatmentDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCFLOWTREATMENTDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFlowTreatmentDeviceType(static_cast< IfcFlowTreatmentDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFluidFlowProperties_Map.begin();
    while (it != expressDataSet->m_IfcFluidFlowProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCFLUIDFLOWPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFluidFlowProperties(static_cast< IfcFluidFlowProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFooting_Map.begin();
    while (it != expressDataSet->m_IfcFooting_Map.end()) {
        m_out << "#" << it->first << "=IFCFOOTING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFooting(static_cast< IfcFooting * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFuelProperties_Map.begin();
    while (it != expressDataSet->m_IfcFuelProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCFUELPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFuelProperties(static_cast< IfcFuelProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFurnishingElement_Map.begin();
    while (it != expressDataSet->m_IfcFurnishingElement_Map.end()) {
        m_out << "#" << it->first << "=IFCFURNISHINGELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFurnishingElement(static_cast< IfcFurnishingElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFurnishingElementType_Map.begin();
    while (it != expressDataSet->m_IfcFurnishingElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCFURNISHINGELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFurnishingElementType(static_cast< IfcFurnishingElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFurnitureStandard_Map.begin();
    while (it != expressDataSet->m_IfcFurnitureStandard_Map.end()) {
        m_out << "#" << it->first << "=IFCFURNITURESTANDARD(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFurnitureStandard(static_cast< IfcFurnitureStandard * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcFurnitureType_Map.begin();
    while (it != expressDataSet->m_IfcFurnitureType_Map.end()) {
        m_out << "#" << it->first << "=IFCFURNITURETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcFurnitureType(static_cast< IfcFurnitureType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGasTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcGasTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCGASTERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGasTerminalType(static_cast< IfcGasTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeneralMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcGeneralMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCGENERALMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeneralMaterialProperties(static_cast< IfcGeneralMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeneralProfileProperties_Map.begin();
    while (it != expressDataSet->m_IfcGeneralProfileProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCGENERALPROFILEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeneralProfileProperties(static_cast< IfcGeneralProfileProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeometricCurveSet_Map.begin();
    while (it != expressDataSet->m_IfcGeometricCurveSet_Map.end()) {
        m_out << "#" << it->first << "=IFCGEOMETRICCURVESET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeometricCurveSet(static_cast< IfcGeometricCurveSet * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeometricRepresentationContext_Map.begin();
    while (it != expressDataSet->m_IfcGeometricRepresentationContext_Map.end()) {
        m_out << "#" << it->first << "=IFCGEOMETRICREPRESENTATIONCONTEXT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeometricRepresentationContext(static_cast< IfcGeometricRepresentationContext * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeometricRepresentationItem_Map.begin();
    while (it != expressDataSet->m_IfcGeometricRepresentationItem_Map.end()) {
        m_out << "#" << it->first << "=IFCGEOMETRICREPRESENTATIONITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeometricRepresentationItem(static_cast< IfcGeometricRepresentationItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeometricRepresentationSubContext_Map.begin();
    while (it != expressDataSet->m_IfcGeometricRepresentationSubContext_Map.end()) {
        m_out << "#" << it->first << "=IFCGEOMETRICREPRESENTATIONSUBCONTEXT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeometricRepresentationSubContext(static_cast< IfcGeometricRepresentationSubContext * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGeometricSet_Map.begin();
    while (it != expressDataSet->m_IfcGeometricSet_Map.end()) {
        m_out << "#" << it->first << "=IFCGEOMETRICSET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGeometricSet(static_cast< IfcGeometricSet * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGrid_Map.begin();
    while (it != expressDataSet->m_IfcGrid_Map.end()) {
        m_out << "#" << it->first << "=IFCGRID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGrid(static_cast< IfcGrid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGridAxis_Map.begin();
    while (it != expressDataSet->m_IfcGridAxis_Map.end()) {
        m_out << "#" << it->first << "=IFCGRIDAXIS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGridAxis(static_cast< IfcGridAxis * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGridPlacement_Map.begin();
    while (it != expressDataSet->m_IfcGridPlacement_Map.end()) {
        m_out << "#" << it->first << "=IFCGRIDPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGridPlacement(static_cast< IfcGridPlacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcGroup_Map.begin();
    while (it != expressDataSet->m_IfcGroup_Map.end()) {
        m_out << "#" << it->first << "=IFCGROUP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcGroup(static_cast< IfcGroup * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcHalfSpaceSolid_Map.begin();
    while (it != expressDataSet->m_IfcHalfSpaceSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCHALFSPACESOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcHalfSpaceSolid(static_cast< IfcHalfSpaceSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcHeatExchangerType_Map.begin();
    while (it != expressDataSet->m_IfcHeatExchangerType_Map.end()) {
        m_out << "#" << it->first << "=IFCHEATEXCHANGERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcHeatExchangerType(static_cast< IfcHeatExchangerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcHumidifierType_Map.begin();
    while (it != expressDataSet->m_IfcHumidifierType_Map.end()) {
        m_out << "#" << it->first << "=IFCHUMIDIFIERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcHumidifierType(static_cast< IfcHumidifierType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcHygroscopicMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcHygroscopicMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCHYGROSCOPICMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcHygroscopicMaterialProperties(static_cast< IfcHygroscopicMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcIShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcIShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCISHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcIShapeProfileDef(static_cast< IfcIShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcImageTexture_Map.begin();
    while (it != expressDataSet->m_IfcImageTexture_Map.end()) {
        m_out << "#" << it->first << "=IFCIMAGETEXTURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcImageTexture(static_cast< IfcImageTexture * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcInventory_Map.begin();
    while (it != expressDataSet->m_IfcInventory_Map.end()) {
        m_out << "#" << it->first << "=IFCINVENTORY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcInventory(static_cast< IfcInventory * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcIrregularTimeSeries_Map.begin();
    while (it != expressDataSet->m_IfcIrregularTimeSeries_Map.end()) {
        m_out << "#" << it->first << "=IFCIRREGULARTIMESERIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcIrregularTimeSeries(static_cast< IfcIrregularTimeSeries * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcIrregularTimeSeriesValue_Map.begin();
    while (it != expressDataSet->m_IfcIrregularTimeSeriesValue_Map.end()) {
        m_out << "#" << it->first << "=IFCIRREGULARTIMESERIESVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcIrregularTimeSeriesValue(static_cast< IfcIrregularTimeSeriesValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcJunctionBoxType_Map.begin();
    while (it != expressDataSet->m_IfcJunctionBoxType_Map.end()) {
        m_out << "#" << it->first << "=IFCJUNCTIONBOXTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcJunctionBoxType(static_cast< IfcJunctionBoxType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcLShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCLSHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLShapeProfileDef(static_cast< IfcLShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLaborResource_Map.begin();
    while (it != expressDataSet->m_IfcLaborResource_Map.end()) {
        m_out << "#" << it->first << "=IFCLABORRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLaborResource(static_cast< IfcLaborResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLampType_Map.begin();
    while (it != expressDataSet->m_IfcLampType_Map.end()) {
        m_out << "#" << it->first << "=IFCLAMPTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLampType(static_cast< IfcLampType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLibraryInformation_Map.begin();
    while (it != expressDataSet->m_IfcLibraryInformation_Map.end()) {
        m_out << "#" << it->first << "=IFCLIBRARYINFORMATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLibraryInformation(static_cast< IfcLibraryInformation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLibraryReference_Map.begin();
    while (it != expressDataSet->m_IfcLibraryReference_Map.end()) {
        m_out << "#" << it->first << "=IFCLIBRARYREFERENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLibraryReference(static_cast< IfcLibraryReference * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightDistributionData_Map.begin();
    while (it != expressDataSet->m_IfcLightDistributionData_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTDISTRIBUTIONDATA(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightDistributionData(static_cast< IfcLightDistributionData * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightFixtureType_Map.begin();
    while (it != expressDataSet->m_IfcLightFixtureType_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTFIXTURETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightFixtureType(static_cast< IfcLightFixtureType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightIntensityDistribution_Map.begin();
    while (it != expressDataSet->m_IfcLightIntensityDistribution_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTINTENSITYDISTRIBUTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightIntensityDistribution(static_cast< IfcLightIntensityDistribution * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightSource_Map.begin();
    while (it != expressDataSet->m_IfcLightSource_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTSOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightSource(static_cast< IfcLightSource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightSourceAmbient_Map.begin();
    while (it != expressDataSet->m_IfcLightSourceAmbient_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTSOURCEAMBIENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightSourceAmbient(static_cast< IfcLightSourceAmbient * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightSourceDirectional_Map.begin();
    while (it != expressDataSet->m_IfcLightSourceDirectional_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTSOURCEDIRECTIONAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightSourceDirectional(static_cast< IfcLightSourceDirectional * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightSourceGoniometric_Map.begin();
    while (it != expressDataSet->m_IfcLightSourceGoniometric_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTSOURCEGONIOMETRIC(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightSourceGoniometric(static_cast< IfcLightSourceGoniometric * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightSourcePositional_Map.begin();
    while (it != expressDataSet->m_IfcLightSourcePositional_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTSOURCEPOSITIONAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightSourcePositional(static_cast< IfcLightSourcePositional * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLightSourceSpot_Map.begin();
    while (it != expressDataSet->m_IfcLightSourceSpot_Map.end()) {
        m_out << "#" << it->first << "=IFCLIGHTSOURCESPOT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLightSourceSpot(static_cast< IfcLightSourceSpot * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLine_Map.begin();
    while (it != expressDataSet->m_IfcLine_Map.end()) {
        m_out << "#" << it->first << "=IFCLINE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLine(static_cast< IfcLine * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLinearDimension_Map.begin();
    while (it != expressDataSet->m_IfcLinearDimension_Map.end()) {
        m_out << "#" << it->first << "=IFCLINEARDIMENSION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLinearDimension(static_cast< IfcLinearDimension * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLocalPlacement_Map.begin();
    while (it != expressDataSet->m_IfcLocalPlacement_Map.end()) {
        m_out << "#" << it->first << "=IFCLOCALPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLocalPlacement(static_cast< IfcLocalPlacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLocalTime_Map.begin();
    while (it != expressDataSet->m_IfcLocalTime_Map.end()) {
        m_out << "#" << it->first << "=IFCLOCALTIME(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLocalTime(static_cast< IfcLocalTime * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcLoop_Map.begin();
    while (it != expressDataSet->m_IfcLoop_Map.end()) {
        m_out << "#" << it->first << "=IFCLOOP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcLoop(static_cast< IfcLoop * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcManifoldSolidBrep_Map.begin();
    while (it != expressDataSet->m_IfcManifoldSolidBrep_Map.end()) {
        m_out << "#" << it->first << "=IFCMANIFOLDSOLIDBREP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcManifoldSolidBrep(static_cast< IfcManifoldSolidBrep * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMappedItem_Map.begin();
    while (it != expressDataSet->m_IfcMappedItem_Map.end()) {
        m_out << "#" << it->first << "=IFCMAPPEDITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMappedItem(static_cast< IfcMappedItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterial_Map.begin();
    while (it != expressDataSet->m_IfcMaterial_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterial(static_cast< IfcMaterial * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialClassificationRelationship_Map.begin();
    while (it != expressDataSet->m_IfcMaterialClassificationRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALCLASSIFICATIONRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialClassificationRelationship(static_cast< IfcMaterialClassificationRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialDefinitionRepresentation_Map.begin();
    while (it != expressDataSet->m_IfcMaterialDefinitionRepresentation_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALDEFINITIONREPRESENTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialDefinitionRepresentation(static_cast< IfcMaterialDefinitionRepresentation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialLayer_Map.begin();
    while (it != expressDataSet->m_IfcMaterialLayer_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALLAYER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialLayer(static_cast< IfcMaterialLayer * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialLayerSet_Map.begin();
    while (it != expressDataSet->m_IfcMaterialLayerSet_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALLAYERSET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialLayerSet(static_cast< IfcMaterialLayerSet * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialLayerSetUsage_Map.begin();
    while (it != expressDataSet->m_IfcMaterialLayerSetUsage_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALLAYERSETUSAGE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialLayerSetUsage(static_cast< IfcMaterialLayerSetUsage * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialList_Map.begin();
    while (it != expressDataSet->m_IfcMaterialList_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALLIST(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialList(static_cast< IfcMaterialList * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMaterialProperties(static_cast< IfcMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMeasureWithUnit_Map.begin();
    while (it != expressDataSet->m_IfcMeasureWithUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCMEASUREWITHUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMeasureWithUnit(static_cast< IfcMeasureWithUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMechanicalConcreteMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcMechanicalConcreteMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCMECHANICALCONCRETEMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMechanicalConcreteMaterialProperties(static_cast< IfcMechanicalConcreteMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMechanicalFastener_Map.begin();
    while (it != expressDataSet->m_IfcMechanicalFastener_Map.end()) {
        m_out << "#" << it->first << "=IFCMECHANICALFASTENER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMechanicalFastener(static_cast< IfcMechanicalFastener * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMechanicalFastenerType_Map.begin();
    while (it != expressDataSet->m_IfcMechanicalFastenerType_Map.end()) {
        m_out << "#" << it->first << "=IFCMECHANICALFASTENERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMechanicalFastenerType(static_cast< IfcMechanicalFastenerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMechanicalMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcMechanicalMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCMECHANICALMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMechanicalMaterialProperties(static_cast< IfcMechanicalMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMechanicalSteelMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcMechanicalSteelMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCMECHANICALSTEELMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMechanicalSteelMaterialProperties(static_cast< IfcMechanicalSteelMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMember_Map.begin();
    while (it != expressDataSet->m_IfcMember_Map.end()) {
        m_out << "#" << it->first << "=IFCMEMBER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMember(static_cast< IfcMember * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMemberType_Map.begin();
    while (it != expressDataSet->m_IfcMemberType_Map.end()) {
        m_out << "#" << it->first << "=IFCMEMBERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMemberType(static_cast< IfcMemberType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMetric_Map.begin();
    while (it != expressDataSet->m_IfcMetric_Map.end()) {
        m_out << "#" << it->first << "=IFCMETRIC(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMetric(static_cast< IfcMetric * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMonetaryUnit_Map.begin();
    while (it != expressDataSet->m_IfcMonetaryUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCMONETARYUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMonetaryUnit(static_cast< IfcMonetaryUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMotorConnectionType_Map.begin();
    while (it != expressDataSet->m_IfcMotorConnectionType_Map.end()) {
        m_out << "#" << it->first << "=IFCMOTORCONNECTIONTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMotorConnectionType(static_cast< IfcMotorConnectionType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcMove_Map.begin();
    while (it != expressDataSet->m_IfcMove_Map.end()) {
        m_out << "#" << it->first << "=IFCMOVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcMove(static_cast< IfcMove * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcNamedUnit_Map.begin();
    while (it != expressDataSet->m_IfcNamedUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCNAMEDUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcNamedUnit(static_cast< IfcNamedUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcObject_Map.begin();
    while (it != expressDataSet->m_IfcObject_Map.end()) {
        m_out << "#" << it->first << "=IFCOBJECT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcObject(static_cast< IfcObject * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcObjectDefinition_Map.begin();
    while (it != expressDataSet->m_IfcObjectDefinition_Map.end()) {
        m_out << "#" << it->first << "=IFCOBJECTDEFINITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcObjectDefinition(static_cast< IfcObjectDefinition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcObjectPlacement_Map.begin();
    while (it != expressDataSet->m_IfcObjectPlacement_Map.end()) {
        m_out << "#" << it->first << "=IFCOBJECTPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcObjectPlacement(static_cast< IfcObjectPlacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcObjective_Map.begin();
    while (it != expressDataSet->m_IfcObjective_Map.end()) {
        m_out << "#" << it->first << "=IFCOBJECTIVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcObjective(static_cast< IfcObjective * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOccupant_Map.begin();
    while (it != expressDataSet->m_IfcOccupant_Map.end()) {
        m_out << "#" << it->first << "=IFCOCCUPANT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOccupant(static_cast< IfcOccupant * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOffsetCurve2D_Map.begin();
    while (it != expressDataSet->m_IfcOffsetCurve2D_Map.end()) {
        m_out << "#" << it->first << "=IFCOFFSETCURVE2D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOffsetCurve2D(static_cast< IfcOffsetCurve2D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOffsetCurve3D_Map.begin();
    while (it != expressDataSet->m_IfcOffsetCurve3D_Map.end()) {
        m_out << "#" << it->first << "=IFCOFFSETCURVE3D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOffsetCurve3D(static_cast< IfcOffsetCurve3D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOneDirectionRepeatFactor_Map.begin();
    while (it != expressDataSet->m_IfcOneDirectionRepeatFactor_Map.end()) {
        m_out << "#" << it->first << "=IFCONEDIRECTIONREPEATFACTOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOneDirectionRepeatFactor(static_cast< IfcOneDirectionRepeatFactor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOpenShell_Map.begin();
    while (it != expressDataSet->m_IfcOpenShell_Map.end()) {
        m_out << "#" << it->first << "=IFCOPENSHELL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOpenShell(static_cast< IfcOpenShell * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOpeningElement_Map.begin();
    while (it != expressDataSet->m_IfcOpeningElement_Map.end()) {
        m_out << "#" << it->first << "=IFCOPENINGELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOpeningElement(static_cast< IfcOpeningElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOpticalMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcOpticalMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCOPTICALMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOpticalMaterialProperties(static_cast< IfcOpticalMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOrderAction_Map.begin();
    while (it != expressDataSet->m_IfcOrderAction_Map.end()) {
        m_out << "#" << it->first << "=IFCORDERACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOrderAction(static_cast< IfcOrderAction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOrganization_Map.begin();
    while (it != expressDataSet->m_IfcOrganization_Map.end()) {
        m_out << "#" << it->first << "=IFCORGANIZATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOrganization(static_cast< IfcOrganization * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOrganizationRelationship_Map.begin();
    while (it != expressDataSet->m_IfcOrganizationRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCORGANIZATIONRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOrganizationRelationship(static_cast< IfcOrganizationRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOrientedEdge_Map.begin();
    while (it != expressDataSet->m_IfcOrientedEdge_Map.end()) {
        m_out << "#" << it->first << "=IFCORIENTEDEDGE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOrientedEdge(static_cast< IfcOrientedEdge * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOutletType_Map.begin();
    while (it != expressDataSet->m_IfcOutletType_Map.end()) {
        m_out << "#" << it->first << "=IFCOUTLETTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOutletType(static_cast< IfcOutletType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcOwnerHistory_Map.begin();
    while (it != expressDataSet->m_IfcOwnerHistory_Map.end()) {
        m_out << "#" << it->first << "=IFCOWNERHISTORY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcOwnerHistory(static_cast< IfcOwnerHistory * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcParameterizedProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcParameterizedProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCPARAMETERIZEDPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcParameterizedProfileDef(static_cast< IfcParameterizedProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPath_Map.begin();
    while (it != expressDataSet->m_IfcPath_Map.end()) {
        m_out << "#" << it->first << "=IFCPATH(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPath(static_cast< IfcPath * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPerformanceHistory_Map.begin();
    while (it != expressDataSet->m_IfcPerformanceHistory_Map.end()) {
        m_out << "#" << it->first << "=IFCPERFORMANCEHISTORY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPerformanceHistory(static_cast< IfcPerformanceHistory * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPermeableCoveringProperties_Map.begin();
    while (it != expressDataSet->m_IfcPermeableCoveringProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCPERMEABLECOVERINGPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPermeableCoveringProperties(static_cast< IfcPermeableCoveringProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPermit_Map.begin();
    while (it != expressDataSet->m_IfcPermit_Map.end()) {
        m_out << "#" << it->first << "=IFCPERMIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPermit(static_cast< IfcPermit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPerson_Map.begin();
    while (it != expressDataSet->m_IfcPerson_Map.end()) {
        m_out << "#" << it->first << "=IFCPERSON(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPerson(static_cast< IfcPerson * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPersonAndOrganization_Map.begin();
    while (it != expressDataSet->m_IfcPersonAndOrganization_Map.end()) {
        m_out << "#" << it->first << "=IFCPERSONANDORGANIZATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPersonAndOrganization(static_cast< IfcPersonAndOrganization * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPhysicalComplexQuantity_Map.begin();
    while (it != expressDataSet->m_IfcPhysicalComplexQuantity_Map.end()) {
        m_out << "#" << it->first << "=IFCPHYSICALCOMPLEXQUANTITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPhysicalComplexQuantity(static_cast< IfcPhysicalComplexQuantity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPhysicalQuantity_Map.begin();
    while (it != expressDataSet->m_IfcPhysicalQuantity_Map.end()) {
        m_out << "#" << it->first << "=IFCPHYSICALQUANTITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPhysicalQuantity(static_cast< IfcPhysicalQuantity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPhysicalSimpleQuantity_Map.begin();
    while (it != expressDataSet->m_IfcPhysicalSimpleQuantity_Map.end()) {
        m_out << "#" << it->first << "=IFCPHYSICALSIMPLEQUANTITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPhysicalSimpleQuantity(static_cast< IfcPhysicalSimpleQuantity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPile_Map.begin();
    while (it != expressDataSet->m_IfcPile_Map.end()) {
        m_out << "#" << it->first << "=IFCPILE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPile(static_cast< IfcPile * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPipeFittingType_Map.begin();
    while (it != expressDataSet->m_IfcPipeFittingType_Map.end()) {
        m_out << "#" << it->first << "=IFCPIPEFITTINGTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPipeFittingType(static_cast< IfcPipeFittingType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPipeSegmentType_Map.begin();
    while (it != expressDataSet->m_IfcPipeSegmentType_Map.end()) {
        m_out << "#" << it->first << "=IFCPIPESEGMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPipeSegmentType(static_cast< IfcPipeSegmentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPixelTexture_Map.begin();
    while (it != expressDataSet->m_IfcPixelTexture_Map.end()) {
        m_out << "#" << it->first << "=IFCPIXELTEXTURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPixelTexture(static_cast< IfcPixelTexture * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPlacement_Map.begin();
    while (it != expressDataSet->m_IfcPlacement_Map.end()) {
        m_out << "#" << it->first << "=IFCPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPlacement(static_cast< IfcPlacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPlanarBox_Map.begin();
    while (it != expressDataSet->m_IfcPlanarBox_Map.end()) {
        m_out << "#" << it->first << "=IFCPLANARBOX(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPlanarBox(static_cast< IfcPlanarBox * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPlanarExtent_Map.begin();
    while (it != expressDataSet->m_IfcPlanarExtent_Map.end()) {
        m_out << "#" << it->first << "=IFCPLANAREXTENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPlanarExtent(static_cast< IfcPlanarExtent * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPlane_Map.begin();
    while (it != expressDataSet->m_IfcPlane_Map.end()) {
        m_out << "#" << it->first << "=IFCPLANE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPlane(static_cast< IfcPlane * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPlate_Map.begin();
    while (it != expressDataSet->m_IfcPlate_Map.end()) {
        m_out << "#" << it->first << "=IFCPLATE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPlate(static_cast< IfcPlate * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPlateType_Map.begin();
    while (it != expressDataSet->m_IfcPlateType_Map.end()) {
        m_out << "#" << it->first << "=IFCPLATETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPlateType(static_cast< IfcPlateType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPoint_Map.begin();
    while (it != expressDataSet->m_IfcPoint_Map.end()) {
        m_out << "#" << it->first << "=IFCPOINT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPoint(static_cast< IfcPoint * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPointOnCurve_Map.begin();
    while (it != expressDataSet->m_IfcPointOnCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCPOINTONCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPointOnCurve(static_cast< IfcPointOnCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPointOnSurface_Map.begin();
    while (it != expressDataSet->m_IfcPointOnSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCPOINTONSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPointOnSurface(static_cast< IfcPointOnSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPolyLoop_Map.begin();
    while (it != expressDataSet->m_IfcPolyLoop_Map.end()) {
        m_out << "#" << it->first << "=IFCPOLYLOOP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPolyLoop(static_cast< IfcPolyLoop * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPolygonalBoundedHalfSpace_Map.begin();
    while (it != expressDataSet->m_IfcPolygonalBoundedHalfSpace_Map.end()) {
        m_out << "#" << it->first << "=IFCPOLYGONALBOUNDEDHALFSPACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPolygonalBoundedHalfSpace(static_cast< IfcPolygonalBoundedHalfSpace * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPolyline_Map.begin();
    while (it != expressDataSet->m_IfcPolyline_Map.end()) {
        m_out << "#" << it->first << "=IFCPOLYLINE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPolyline(static_cast< IfcPolyline * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPort_Map.begin();
    while (it != expressDataSet->m_IfcPort_Map.end()) {
        m_out << "#" << it->first << "=IFCPORT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPort(static_cast< IfcPort * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPostalAddress_Map.begin();
    while (it != expressDataSet->m_IfcPostalAddress_Map.end()) {
        m_out << "#" << it->first << "=IFCPOSTALADDRESS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPostalAddress(static_cast< IfcPostalAddress * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedColour_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedColour_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDCOLOUR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedColour(static_cast< IfcPreDefinedColour * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedCurveFont_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedCurveFont_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDCURVEFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedCurveFont(static_cast< IfcPreDefinedCurveFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedDimensionSymbol_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedDimensionSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDDIMENSIONSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedDimensionSymbol(static_cast< IfcPreDefinedDimensionSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedItem_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedItem_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedItem(static_cast< IfcPreDefinedItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedPointMarkerSymbol_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedPointMarkerSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDPOINTMARKERSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedPointMarkerSymbol(static_cast< IfcPreDefinedPointMarkerSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedSymbol_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedSymbol(static_cast< IfcPreDefinedSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedTerminatorSymbol_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedTerminatorSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDTERMINATORSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedTerminatorSymbol(static_cast< IfcPreDefinedTerminatorSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPreDefinedTextFont_Map.begin();
    while (it != expressDataSet->m_IfcPreDefinedTextFont_Map.end()) {
        m_out << "#" << it->first << "=IFCPREDEFINEDTEXTFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPreDefinedTextFont(static_cast< IfcPreDefinedTextFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPresentationLayerAssignment_Map.begin();
    while (it != expressDataSet->m_IfcPresentationLayerAssignment_Map.end()) {
        m_out << "#" << it->first << "=IFCPRESENTATIONLAYERASSIGNMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPresentationLayerAssignment(static_cast< IfcPresentationLayerAssignment * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPresentationLayerWithStyle_Map.begin();
    while (it != expressDataSet->m_IfcPresentationLayerWithStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCPRESENTATIONLAYERWITHSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPresentationLayerWithStyle(static_cast< IfcPresentationLayerWithStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPresentationStyle_Map.begin();
    while (it != expressDataSet->m_IfcPresentationStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCPRESENTATIONSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPresentationStyle(static_cast< IfcPresentationStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPresentationStyleAssignment_Map.begin();
    while (it != expressDataSet->m_IfcPresentationStyleAssignment_Map.end()) {
        m_out << "#" << it->first << "=IFCPRESENTATIONSTYLEASSIGNMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPresentationStyleAssignment(static_cast< IfcPresentationStyleAssignment * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProcedure_Map.begin();
    while (it != expressDataSet->m_IfcProcedure_Map.end()) {
        m_out << "#" << it->first << "=IFCPROCEDURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProcedure(static_cast< IfcProcedure * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProcess_Map.begin();
    while (it != expressDataSet->m_IfcProcess_Map.end()) {
        m_out << "#" << it->first << "=IFCPROCESS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProcess(static_cast< IfcProcess * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProduct_Map.begin();
    while (it != expressDataSet->m_IfcProduct_Map.end()) {
        m_out << "#" << it->first << "=IFCPRODUCT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProduct(static_cast< IfcProduct * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProductDefinitionShape_Map.begin();
    while (it != expressDataSet->m_IfcProductDefinitionShape_Map.end()) {
        m_out << "#" << it->first << "=IFCPRODUCTDEFINITIONSHAPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProductDefinitionShape(static_cast< IfcProductDefinitionShape * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProductRepresentation_Map.begin();
    while (it != expressDataSet->m_IfcProductRepresentation_Map.end()) {
        m_out << "#" << it->first << "=IFCPRODUCTREPRESENTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProductRepresentation(static_cast< IfcProductRepresentation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProductsOfCombustionProperties_Map.begin();
    while (it != expressDataSet->m_IfcProductsOfCombustionProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCPRODUCTSOFCOMBUSTIONPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProductsOfCombustionProperties(static_cast< IfcProductsOfCombustionProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProfileDef(static_cast< IfcProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProfileProperties_Map.begin();
    while (it != expressDataSet->m_IfcProfileProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCPROFILEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProfileProperties(static_cast< IfcProfileProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProject_Map.begin();
    while (it != expressDataSet->m_IfcProject_Map.end()) {
        m_out << "#" << it->first << "=IFCPROJECT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProject(static_cast< IfcProject * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProjectOrder_Map.begin();
    while (it != expressDataSet->m_IfcProjectOrder_Map.end()) {
        m_out << "#" << it->first << "=IFCPROJECTORDER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProjectOrder(static_cast< IfcProjectOrder * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProjectOrderRecord_Map.begin();
    while (it != expressDataSet->m_IfcProjectOrderRecord_Map.end()) {
        m_out << "#" << it->first << "=IFCPROJECTORDERRECORD(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProjectOrderRecord(static_cast< IfcProjectOrderRecord * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProjectionCurve_Map.begin();
    while (it != expressDataSet->m_IfcProjectionCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCPROJECTIONCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProjectionCurve(static_cast< IfcProjectionCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProjectionElement_Map.begin();
    while (it != expressDataSet->m_IfcProjectionElement_Map.end()) {
        m_out << "#" << it->first << "=IFCPROJECTIONELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProjectionElement(static_cast< IfcProjectionElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProperty_Map.begin();
    while (it != expressDataSet->m_IfcProperty_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProperty(static_cast< IfcProperty * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyBoundedValue_Map.begin();
    while (it != expressDataSet->m_IfcPropertyBoundedValue_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYBOUNDEDVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyBoundedValue(static_cast< IfcPropertyBoundedValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyConstraintRelationship_Map.begin();
    while (it != expressDataSet->m_IfcPropertyConstraintRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYCONSTRAINTRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyConstraintRelationship(static_cast< IfcPropertyConstraintRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyDefinition_Map.begin();
    while (it != expressDataSet->m_IfcPropertyDefinition_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYDEFINITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyDefinition(static_cast< IfcPropertyDefinition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyDependencyRelationship_Map.begin();
    while (it != expressDataSet->m_IfcPropertyDependencyRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYDEPENDENCYRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyDependencyRelationship(static_cast< IfcPropertyDependencyRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyEnumeratedValue_Map.begin();
    while (it != expressDataSet->m_IfcPropertyEnumeratedValue_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYENUMERATEDVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyEnumeratedValue(static_cast< IfcPropertyEnumeratedValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyEnumeration_Map.begin();
    while (it != expressDataSet->m_IfcPropertyEnumeration_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYENUMERATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyEnumeration(static_cast< IfcPropertyEnumeration * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyListValue_Map.begin();
    while (it != expressDataSet->m_IfcPropertyListValue_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYLISTVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyListValue(static_cast< IfcPropertyListValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyReferenceValue_Map.begin();
    while (it != expressDataSet->m_IfcPropertyReferenceValue_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYREFERENCEVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyReferenceValue(static_cast< IfcPropertyReferenceValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertySet_Map.begin();
    while (it != expressDataSet->m_IfcPropertySet_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYSET(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertySet(static_cast< IfcPropertySet * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertySetDefinition_Map.begin();
    while (it != expressDataSet->m_IfcPropertySetDefinition_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYSETDEFINITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertySetDefinition(static_cast< IfcPropertySetDefinition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertySingleValue_Map.begin();
    while (it != expressDataSet->m_IfcPropertySingleValue_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYSINGLEVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertySingleValue(static_cast< IfcPropertySingleValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPropertyTableValue_Map.begin();
    while (it != expressDataSet->m_IfcPropertyTableValue_Map.end()) {
        m_out << "#" << it->first << "=IFCPROPERTYTABLEVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPropertyTableValue(static_cast< IfcPropertyTableValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProtectiveDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcProtectiveDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCPROTECTIVEDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProtectiveDeviceType(static_cast< IfcProtectiveDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcProxy_Map.begin();
    while (it != expressDataSet->m_IfcProxy_Map.end()) {
        m_out << "#" << it->first << "=IFCPROXY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcProxy(static_cast< IfcProxy * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcPumpType_Map.begin();
    while (it != expressDataSet->m_IfcPumpType_Map.end()) {
        m_out << "#" << it->first << "=IFCPUMPTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcPumpType(static_cast< IfcPumpType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcQuantityArea_Map.begin();
    while (it != expressDataSet->m_IfcQuantityArea_Map.end()) {
        m_out << "#" << it->first << "=IFCQUANTITYAREA(";
        if (!writeIfNotInited(it->first)) {
            writeIfcQuantityArea(static_cast< IfcQuantityArea * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcQuantityCount_Map.begin();
    while (it != expressDataSet->m_IfcQuantityCount_Map.end()) {
        m_out << "#" << it->first << "=IFCQUANTITYCOUNT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcQuantityCount(static_cast< IfcQuantityCount * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcQuantityLength_Map.begin();
    while (it != expressDataSet->m_IfcQuantityLength_Map.end()) {
        m_out << "#" << it->first << "=IFCQUANTITYLENGTH(";
        if (!writeIfNotInited(it->first)) {
            writeIfcQuantityLength(static_cast< IfcQuantityLength * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcQuantityTime_Map.begin();
    while (it != expressDataSet->m_IfcQuantityTime_Map.end()) {
        m_out << "#" << it->first << "=IFCQUANTITYTIME(";
        if (!writeIfNotInited(it->first)) {
            writeIfcQuantityTime(static_cast< IfcQuantityTime * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcQuantityVolume_Map.begin();
    while (it != expressDataSet->m_IfcQuantityVolume_Map.end()) {
        m_out << "#" << it->first << "=IFCQUANTITYVOLUME(";
        if (!writeIfNotInited(it->first)) {
            writeIfcQuantityVolume(static_cast< IfcQuantityVolume * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcQuantityWeight_Map.begin();
    while (it != expressDataSet->m_IfcQuantityWeight_Map.end()) {
        m_out << "#" << it->first << "=IFCQUANTITYWEIGHT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcQuantityWeight(static_cast< IfcQuantityWeight * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRadiusDimension_Map.begin();
    while (it != expressDataSet->m_IfcRadiusDimension_Map.end()) {
        m_out << "#" << it->first << "=IFCRADIUSDIMENSION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRadiusDimension(static_cast< IfcRadiusDimension * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRailing_Map.begin();
    while (it != expressDataSet->m_IfcRailing_Map.end()) {
        m_out << "#" << it->first << "=IFCRAILING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRailing(static_cast< IfcRailing * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRailingType_Map.begin();
    while (it != expressDataSet->m_IfcRailingType_Map.end()) {
        m_out << "#" << it->first << "=IFCRAILINGTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRailingType(static_cast< IfcRailingType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRamp_Map.begin();
    while (it != expressDataSet->m_IfcRamp_Map.end()) {
        m_out << "#" << it->first << "=IFCRAMP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRamp(static_cast< IfcRamp * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRampFlight_Map.begin();
    while (it != expressDataSet->m_IfcRampFlight_Map.end()) {
        m_out << "#" << it->first << "=IFCRAMPFLIGHT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRampFlight(static_cast< IfcRampFlight * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRampFlightType_Map.begin();
    while (it != expressDataSet->m_IfcRampFlightType_Map.end()) {
        m_out << "#" << it->first << "=IFCRAMPFLIGHTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRampFlightType(static_cast< IfcRampFlightType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRationalBezierCurve_Map.begin();
    while (it != expressDataSet->m_IfcRationalBezierCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCRATIONALBEZIERCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRationalBezierCurve(static_cast< IfcRationalBezierCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRectangleHollowProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcRectangleHollowProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCRECTANGLEHOLLOWPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRectangleHollowProfileDef(static_cast< IfcRectangleHollowProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRectangleProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcRectangleProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCRECTANGLEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRectangleProfileDef(static_cast< IfcRectangleProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRectangularPyramid_Map.begin();
    while (it != expressDataSet->m_IfcRectangularPyramid_Map.end()) {
        m_out << "#" << it->first << "=IFCRECTANGULARPYRAMID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRectangularPyramid(static_cast< IfcRectangularPyramid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRectangularTrimmedSurface_Map.begin();
    while (it != expressDataSet->m_IfcRectangularTrimmedSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCRECTANGULARTRIMMEDSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRectangularTrimmedSurface(static_cast< IfcRectangularTrimmedSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferencesValueDocument_Map.begin();
    while (it != expressDataSet->m_IfcReferencesValueDocument_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCESVALUEDOCUMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferencesValueDocument(static_cast< IfcReferencesValueDocument * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRegularTimeSeries_Map.begin();
    while (it != expressDataSet->m_IfcRegularTimeSeries_Map.end()) {
        m_out << "#" << it->first << "=IFCREGULARTIMESERIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRegularTimeSeries(static_cast< IfcRegularTimeSeries * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReinforcementBarProperties_Map.begin();
    while (it != expressDataSet->m_IfcReinforcementBarProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCREINFORCEMENTBARPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReinforcementBarProperties(static_cast< IfcReinforcementBarProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReinforcementDefinitionProperties_Map.begin();
    while (it != expressDataSet->m_IfcReinforcementDefinitionProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCREINFORCEMENTDEFINITIONPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReinforcementDefinitionProperties(static_cast< IfcReinforcementDefinitionProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReinforcingBar_Map.begin();
    while (it != expressDataSet->m_IfcReinforcingBar_Map.end()) {
        m_out << "#" << it->first << "=IFCREINFORCINGBAR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReinforcingBar(static_cast< IfcReinforcingBar * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReinforcingElement_Map.begin();
    while (it != expressDataSet->m_IfcReinforcingElement_Map.end()) {
        m_out << "#" << it->first << "=IFCREINFORCINGELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReinforcingElement(static_cast< IfcReinforcingElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReinforcingMesh_Map.begin();
    while (it != expressDataSet->m_IfcReinforcingMesh_Map.end()) {
        m_out << "#" << it->first << "=IFCREINFORCINGMESH(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReinforcingMesh(static_cast< IfcReinforcingMesh * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAggregates_Map.begin();
    while (it != expressDataSet->m_IfcRelAggregates_Map.end()) {
        m_out << "#" << it->first << "=IFCRELAGGREGATES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAggregates(static_cast< IfcRelAggregates * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssigns_Map.begin();
    while (it != expressDataSet->m_IfcRelAssigns_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssigns(static_cast< IfcRelAssigns * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsTasks_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsTasks_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTASKS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsTasks(static_cast< IfcRelAssignsTasks * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToActor_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToActor_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTOACTOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToActor(static_cast< IfcRelAssignsToActor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToControl_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToControl_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTOCONTROL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToControl(static_cast< IfcRelAssignsToControl * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToGroup_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToGroup_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTOGROUP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToGroup(static_cast< IfcRelAssignsToGroup * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToProcess_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToProcess_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTOPROCESS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToProcess(static_cast< IfcRelAssignsToProcess * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToProduct_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToProduct_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTOPRODUCT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToProduct(static_cast< IfcRelAssignsToProduct * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToProjectOrder_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToProjectOrder_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTOPROJECTORDER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToProjectOrder(static_cast< IfcRelAssignsToProjectOrder * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssignsToResource_Map.begin();
    while (it != expressDataSet->m_IfcRelAssignsToResource_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSIGNSTORESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssignsToResource(static_cast< IfcRelAssignsToResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociates_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociates_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociates(static_cast< IfcRelAssociates * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesAppliedValue_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesAppliedValue_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESAPPLIEDVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesAppliedValue(static_cast< IfcRelAssociatesAppliedValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesApproval_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesApproval_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESAPPROVAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesApproval(static_cast< IfcRelAssociatesApproval * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesClassification_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesClassification_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESCLASSIFICATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesClassification(static_cast< IfcRelAssociatesClassification * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesConstraint_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesConstraint_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESCONSTRAINT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesConstraint(static_cast< IfcRelAssociatesConstraint * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesDocument_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesDocument_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESDOCUMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesDocument(static_cast< IfcRelAssociatesDocument * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesLibrary_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesLibrary_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESLIBRARY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesLibrary(static_cast< IfcRelAssociatesLibrary * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesMaterial_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesMaterial_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESMATERIAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesMaterial(static_cast< IfcRelAssociatesMaterial * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelAssociatesProfileProperties_Map.begin();
    while (it != expressDataSet->m_IfcRelAssociatesProfileProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCRELASSOCIATESPROFILEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelAssociatesProfileProperties(static_cast< IfcRelAssociatesProfileProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnects_Map.begin();
    while (it != expressDataSet->m_IfcRelConnects_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnects(static_cast< IfcRelConnects * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsElements_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsElements_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSELEMENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsElements(static_cast< IfcRelConnectsElements * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsPathElements_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsPathElements_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSPATHELEMENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsPathElements(static_cast< IfcRelConnectsPathElements * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsPortToElement_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsPortToElement_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSPORTTOELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsPortToElement(static_cast< IfcRelConnectsPortToElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsPorts_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsPorts_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSPORTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsPorts(static_cast< IfcRelConnectsPorts * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsStructuralActivity_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsStructuralActivity_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSSTRUCTURALACTIVITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsStructuralActivity(static_cast< IfcRelConnectsStructuralActivity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsStructuralElement_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsStructuralElement_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSSTRUCTURALELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsStructuralElement(static_cast< IfcRelConnectsStructuralElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsStructuralMember_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsStructuralMember_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSSTRUCTURALMEMBER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsStructuralMember(static_cast< IfcRelConnectsStructuralMember * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsWithEccentricity_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsWithEccentricity_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSWITHECCENTRICITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsWithEccentricity(static_cast< IfcRelConnectsWithEccentricity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelConnectsWithRealizingElements_Map.begin();
    while (it != expressDataSet->m_IfcRelConnectsWithRealizingElements_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONNECTSWITHREALIZINGELEMENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelConnectsWithRealizingElements(static_cast< IfcRelConnectsWithRealizingElements * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelContainedInSpatialStructure_Map.begin();
    while (it != expressDataSet->m_IfcRelContainedInSpatialStructure_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCONTAINEDINSPATIALSTRUCTURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelContainedInSpatialStructure(static_cast< IfcRelContainedInSpatialStructure * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelCoversBldgElements_Map.begin();
    while (it != expressDataSet->m_IfcRelCoversBldgElements_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCOVERSBLDGELEMENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelCoversBldgElements(static_cast< IfcRelCoversBldgElements * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelCoversSpaces_Map.begin();
    while (it != expressDataSet->m_IfcRelCoversSpaces_Map.end()) {
        m_out << "#" << it->first << "=IFCRELCOVERSSPACES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelCoversSpaces(static_cast< IfcRelCoversSpaces * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelDecomposes_Map.begin();
    while (it != expressDataSet->m_IfcRelDecomposes_Map.end()) {
        m_out << "#" << it->first << "=IFCRELDECOMPOSES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelDecomposes(static_cast< IfcRelDecomposes * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelDefines_Map.begin();
    while (it != expressDataSet->m_IfcRelDefines_Map.end()) {
        m_out << "#" << it->first << "=IFCRELDEFINES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelDefines(static_cast< IfcRelDefines * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelDefinesByProperties_Map.begin();
    while (it != expressDataSet->m_IfcRelDefinesByProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCRELDEFINESBYPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelDefinesByProperties(static_cast< IfcRelDefinesByProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelDefinesByType_Map.begin();
    while (it != expressDataSet->m_IfcRelDefinesByType_Map.end()) {
        m_out << "#" << it->first << "=IFCRELDEFINESBYTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelDefinesByType(static_cast< IfcRelDefinesByType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelFillsElement_Map.begin();
    while (it != expressDataSet->m_IfcRelFillsElement_Map.end()) {
        m_out << "#" << it->first << "=IFCRELFILLSELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelFillsElement(static_cast< IfcRelFillsElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelFlowControlElements_Map.begin();
    while (it != expressDataSet->m_IfcRelFlowControlElements_Map.end()) {
        m_out << "#" << it->first << "=IFCRELFLOWCONTROLELEMENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelFlowControlElements(static_cast< IfcRelFlowControlElements * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelInteractionRequirements_Map.begin();
    while (it != expressDataSet->m_IfcRelInteractionRequirements_Map.end()) {
        m_out << "#" << it->first << "=IFCRELINTERACTIONREQUIREMENTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelInteractionRequirements(static_cast< IfcRelInteractionRequirements * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelNests_Map.begin();
    while (it != expressDataSet->m_IfcRelNests_Map.end()) {
        m_out << "#" << it->first << "=IFCRELNESTS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelNests(static_cast< IfcRelNests * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelOccupiesSpaces_Map.begin();
    while (it != expressDataSet->m_IfcRelOccupiesSpaces_Map.end()) {
        m_out << "#" << it->first << "=IFCRELOCCUPIESSPACES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelOccupiesSpaces(static_cast< IfcRelOccupiesSpaces * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelOverridesProperties_Map.begin();
    while (it != expressDataSet->m_IfcRelOverridesProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCRELOVERRIDESPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelOverridesProperties(static_cast< IfcRelOverridesProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelProjectsElement_Map.begin();
    while (it != expressDataSet->m_IfcRelProjectsElement_Map.end()) {
        m_out << "#" << it->first << "=IFCRELPROJECTSELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelProjectsElement(static_cast< IfcRelProjectsElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelReferencedInSpatialStructure_Map.begin();
    while (it != expressDataSet->m_IfcRelReferencedInSpatialStructure_Map.end()) {
        m_out << "#" << it->first << "=IFCRELREFERENCEDINSPATIALSTRUCTURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelReferencedInSpatialStructure(static_cast< IfcRelReferencedInSpatialStructure * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelSchedulesCostItems_Map.begin();
    while (it != expressDataSet->m_IfcRelSchedulesCostItems_Map.end()) {
        m_out << "#" << it->first << "=IFCRELSCHEDULESCOSTITEMS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelSchedulesCostItems(static_cast< IfcRelSchedulesCostItems * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelSequence_Map.begin();
    while (it != expressDataSet->m_IfcRelSequence_Map.end()) {
        m_out << "#" << it->first << "=IFCRELSEQUENCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelSequence(static_cast< IfcRelSequence * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelServicesBuildings_Map.begin();
    while (it != expressDataSet->m_IfcRelServicesBuildings_Map.end()) {
        m_out << "#" << it->first << "=IFCRELSERVICESBUILDINGS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelServicesBuildings(static_cast< IfcRelServicesBuildings * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelSpaceBoundary_Map.begin();
    while (it != expressDataSet->m_IfcRelSpaceBoundary_Map.end()) {
        m_out << "#" << it->first << "=IFCRELSPACEBOUNDARY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelSpaceBoundary(static_cast< IfcRelSpaceBoundary * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelVoidsElement_Map.begin();
    while (it != expressDataSet->m_IfcRelVoidsElement_Map.end()) {
        m_out << "#" << it->first << "=IFCRELVOIDSELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelVoidsElement(static_cast< IfcRelVoidsElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelationship_Map.begin();
    while (it != expressDataSet->m_IfcRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCRELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelationship(static_cast< IfcRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRelaxation_Map.begin();
    while (it != expressDataSet->m_IfcRelaxation_Map.end()) {
        m_out << "#" << it->first << "=IFCRELAXATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRelaxation(static_cast< IfcRelaxation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRepresentation_Map.begin();
    while (it != expressDataSet->m_IfcRepresentation_Map.end()) {
        m_out << "#" << it->first << "=IFCREPRESENTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRepresentation(static_cast< IfcRepresentation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRepresentationContext_Map.begin();
    while (it != expressDataSet->m_IfcRepresentationContext_Map.end()) {
        m_out << "#" << it->first << "=IFCREPRESENTATIONCONTEXT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRepresentationContext(static_cast< IfcRepresentationContext * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRepresentationItem_Map.begin();
    while (it != expressDataSet->m_IfcRepresentationItem_Map.end()) {
        m_out << "#" << it->first << "=IFCREPRESENTATIONITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRepresentationItem(static_cast< IfcRepresentationItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRepresentationMap_Map.begin();
    while (it != expressDataSet->m_IfcRepresentationMap_Map.end()) {
        m_out << "#" << it->first << "=IFCREPRESENTATIONMAP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRepresentationMap(static_cast< IfcRepresentationMap * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcResource_Map.begin();
    while (it != expressDataSet->m_IfcResource_Map.end()) {
        m_out << "#" << it->first << "=IFCRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcResource(static_cast< IfcResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRevolvedAreaSolid_Map.begin();
    while (it != expressDataSet->m_IfcRevolvedAreaSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCREVOLVEDAREASOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRevolvedAreaSolid(static_cast< IfcRevolvedAreaSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRibPlateProfileProperties_Map.begin();
    while (it != expressDataSet->m_IfcRibPlateProfileProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCRIBPLATEPROFILEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRibPlateProfileProperties(static_cast< IfcRibPlateProfileProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRightCircularCone_Map.begin();
    while (it != expressDataSet->m_IfcRightCircularCone_Map.end()) {
        m_out << "#" << it->first << "=IFCRIGHTCIRCULARCONE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRightCircularCone(static_cast< IfcRightCircularCone * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRightCircularCylinder_Map.begin();
    while (it != expressDataSet->m_IfcRightCircularCylinder_Map.end()) {
        m_out << "#" << it->first << "=IFCRIGHTCIRCULARCYLINDER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRightCircularCylinder(static_cast< IfcRightCircularCylinder * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRoof_Map.begin();
    while (it != expressDataSet->m_IfcRoof_Map.end()) {
        m_out << "#" << it->first << "=IFCROOF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRoof(static_cast< IfcRoof * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRoot_Map.begin();
    while (it != expressDataSet->m_IfcRoot_Map.end()) {
        m_out << "#" << it->first << "=IFCROOT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRoot(static_cast< IfcRoot * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRoundedEdgeFeature_Map.begin();
    while (it != expressDataSet->m_IfcRoundedEdgeFeature_Map.end()) {
        m_out << "#" << it->first << "=IFCROUNDEDEDGEFEATURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRoundedEdgeFeature(static_cast< IfcRoundedEdgeFeature * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcRoundedRectangleProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcRoundedRectangleProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCROUNDEDRECTANGLEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcRoundedRectangleProfileDef(static_cast< IfcRoundedRectangleProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSIUnit_Map.begin();
    while (it != expressDataSet->m_IfcSIUnit_Map.end()) {
        m_out << "#" << it->first << "=IFCSIUNIT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSIUnit(static_cast< IfcSIUnit * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSanitaryTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcSanitaryTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCSANITARYTERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSanitaryTerminalType(static_cast< IfcSanitaryTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcScheduleTimeControl_Map.begin();
    while (it != expressDataSet->m_IfcScheduleTimeControl_Map.end()) {
        m_out << "#" << it->first << "=IFCSCHEDULETIMECONTROL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcScheduleTimeControl(static_cast< IfcScheduleTimeControl * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSectionProperties_Map.begin();
    while (it != expressDataSet->m_IfcSectionProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCSECTIONPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSectionProperties(static_cast< IfcSectionProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSectionReinforcementProperties_Map.begin();
    while (it != expressDataSet->m_IfcSectionReinforcementProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCSECTIONREINFORCEMENTPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSectionReinforcementProperties(static_cast< IfcSectionReinforcementProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSectionedSpine_Map.begin();
    while (it != expressDataSet->m_IfcSectionedSpine_Map.end()) {
        m_out << "#" << it->first << "=IFCSECTIONEDSPINE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSectionedSpine(static_cast< IfcSectionedSpine * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSensorType_Map.begin();
    while (it != expressDataSet->m_IfcSensorType_Map.end()) {
        m_out << "#" << it->first << "=IFCSENSORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSensorType(static_cast< IfcSensorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcServiceLife_Map.begin();
    while (it != expressDataSet->m_IfcServiceLife_Map.end()) {
        m_out << "#" << it->first << "=IFCSERVICELIFE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcServiceLife(static_cast< IfcServiceLife * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcServiceLifeFactor_Map.begin();
    while (it != expressDataSet->m_IfcServiceLifeFactor_Map.end()) {
        m_out << "#" << it->first << "=IFCSERVICELIFEFACTOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcServiceLifeFactor(static_cast< IfcServiceLifeFactor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcShapeAspect_Map.begin();
    while (it != expressDataSet->m_IfcShapeAspect_Map.end()) {
        m_out << "#" << it->first << "=IFCSHAPEASPECT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcShapeAspect(static_cast< IfcShapeAspect * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcShapeModel_Map.begin();
    while (it != expressDataSet->m_IfcShapeModel_Map.end()) {
        m_out << "#" << it->first << "=IFCSHAPEMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcShapeModel(static_cast< IfcShapeModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcShapeRepresentation_Map.begin();
    while (it != expressDataSet->m_IfcShapeRepresentation_Map.end()) {
        m_out << "#" << it->first << "=IFCSHAPEREPRESENTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcShapeRepresentation(static_cast< IfcShapeRepresentation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcShellBasedSurfaceModel_Map.begin();
    while (it != expressDataSet->m_IfcShellBasedSurfaceModel_Map.end()) {
        m_out << "#" << it->first << "=IFCSHELLBASEDSURFACEMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcShellBasedSurfaceModel(static_cast< IfcShellBasedSurfaceModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSimpleProperty_Map.begin();
    while (it != expressDataSet->m_IfcSimpleProperty_Map.end()) {
        m_out << "#" << it->first << "=IFCSIMPLEPROPERTY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSimpleProperty(static_cast< IfcSimpleProperty * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSite_Map.begin();
    while (it != expressDataSet->m_IfcSite_Map.end()) {
        m_out << "#" << it->first << "=IFCSITE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSite(static_cast< IfcSite * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSlab_Map.begin();
    while (it != expressDataSet->m_IfcSlab_Map.end()) {
        m_out << "#" << it->first << "=IFCSLAB(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSlab(static_cast< IfcSlab * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSlabType_Map.begin();
    while (it != expressDataSet->m_IfcSlabType_Map.end()) {
        m_out << "#" << it->first << "=IFCSLABTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSlabType(static_cast< IfcSlabType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSlippageConnectionCondition_Map.begin();
    while (it != expressDataSet->m_IfcSlippageConnectionCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCSLIPPAGECONNECTIONCONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSlippageConnectionCondition(static_cast< IfcSlippageConnectionCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSolidModel_Map.begin();
    while (it != expressDataSet->m_IfcSolidModel_Map.end()) {
        m_out << "#" << it->first << "=IFCSOLIDMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSolidModel(static_cast< IfcSolidModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSoundProperties_Map.begin();
    while (it != expressDataSet->m_IfcSoundProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCSOUNDPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSoundProperties(static_cast< IfcSoundProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSoundValue_Map.begin();
    while (it != expressDataSet->m_IfcSoundValue_Map.end()) {
        m_out << "#" << it->first << "=IFCSOUNDVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSoundValue(static_cast< IfcSoundValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpace_Map.begin();
    while (it != expressDataSet->m_IfcSpace_Map.end()) {
        m_out << "#" << it->first << "=IFCSPACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpace(static_cast< IfcSpace * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpaceHeaterType_Map.begin();
    while (it != expressDataSet->m_IfcSpaceHeaterType_Map.end()) {
        m_out << "#" << it->first << "=IFCSPACEHEATERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpaceHeaterType(static_cast< IfcSpaceHeaterType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpaceProgram_Map.begin();
    while (it != expressDataSet->m_IfcSpaceProgram_Map.end()) {
        m_out << "#" << it->first << "=IFCSPACEPROGRAM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpaceProgram(static_cast< IfcSpaceProgram * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpaceThermalLoadProperties_Map.begin();
    while (it != expressDataSet->m_IfcSpaceThermalLoadProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCSPACETHERMALLOADPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpaceThermalLoadProperties(static_cast< IfcSpaceThermalLoadProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpaceType_Map.begin();
    while (it != expressDataSet->m_IfcSpaceType_Map.end()) {
        m_out << "#" << it->first << "=IFCSPACETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpaceType(static_cast< IfcSpaceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpatialStructureElement_Map.begin();
    while (it != expressDataSet->m_IfcSpatialStructureElement_Map.end()) {
        m_out << "#" << it->first << "=IFCSPATIALSTRUCTUREELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpatialStructureElement(static_cast< IfcSpatialStructureElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSpatialStructureElementType_Map.begin();
    while (it != expressDataSet->m_IfcSpatialStructureElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCSPATIALSTRUCTUREELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSpatialStructureElementType(static_cast< IfcSpatialStructureElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSphere_Map.begin();
    while (it != expressDataSet->m_IfcSphere_Map.end()) {
        m_out << "#" << it->first << "=IFCSPHERE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSphere(static_cast< IfcSphere * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStackTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcStackTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCSTACKTERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStackTerminalType(static_cast< IfcStackTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStair_Map.begin();
    while (it != expressDataSet->m_IfcStair_Map.end()) {
        m_out << "#" << it->first << "=IFCSTAIR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStair(static_cast< IfcStair * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStairFlight_Map.begin();
    while (it != expressDataSet->m_IfcStairFlight_Map.end()) {
        m_out << "#" << it->first << "=IFCSTAIRFLIGHT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStairFlight(static_cast< IfcStairFlight * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStairFlightType_Map.begin();
    while (it != expressDataSet->m_IfcStairFlightType_Map.end()) {
        m_out << "#" << it->first << "=IFCSTAIRFLIGHTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStairFlightType(static_cast< IfcStairFlightType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralAction_Map.begin();
    while (it != expressDataSet->m_IfcStructuralAction_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralAction(static_cast< IfcStructuralAction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralActivity_Map.begin();
    while (it != expressDataSet->m_IfcStructuralActivity_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALACTIVITY(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralActivity(static_cast< IfcStructuralActivity * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralAnalysisModel_Map.begin();
    while (it != expressDataSet->m_IfcStructuralAnalysisModel_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALANALYSISMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralAnalysisModel(static_cast< IfcStructuralAnalysisModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralConnection_Map.begin();
    while (it != expressDataSet->m_IfcStructuralConnection_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALCONNECTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralConnection(static_cast< IfcStructuralConnection * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralConnectionCondition_Map.begin();
    while (it != expressDataSet->m_IfcStructuralConnectionCondition_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALCONNECTIONCONDITION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralConnectionCondition(static_cast< IfcStructuralConnectionCondition * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralCurveConnection_Map.begin();
    while (it != expressDataSet->m_IfcStructuralCurveConnection_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALCURVECONNECTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralCurveConnection(static_cast< IfcStructuralCurveConnection * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralCurveMember_Map.begin();
    while (it != expressDataSet->m_IfcStructuralCurveMember_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALCURVEMEMBER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralCurveMember(static_cast< IfcStructuralCurveMember * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralCurveMemberVarying_Map.begin();
    while (it != expressDataSet->m_IfcStructuralCurveMemberVarying_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALCURVEMEMBERVARYING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralCurveMemberVarying(static_cast< IfcStructuralCurveMemberVarying * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralItem_Map.begin();
    while (it != expressDataSet->m_IfcStructuralItem_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralItem(static_cast< IfcStructuralItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLinearAction_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLinearAction_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLINEARACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLinearAction(static_cast< IfcStructuralLinearAction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLinearActionVarying_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLinearActionVarying_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLINEARACTIONVARYING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLinearActionVarying(static_cast< IfcStructuralLinearActionVarying * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoad_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoad_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOAD(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoad(static_cast< IfcStructuralLoad * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadGroup_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadGroup_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADGROUP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadGroup(static_cast< IfcStructuralLoadGroup * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadLinearForce_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadLinearForce_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADLINEARFORCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadLinearForce(static_cast< IfcStructuralLoadLinearForce * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadPlanarForce_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadPlanarForce_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADPLANARFORCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadPlanarForce(static_cast< IfcStructuralLoadPlanarForce * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadSingleDisplacement_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadSingleDisplacement_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADSINGLEDISPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadSingleDisplacement(static_cast< IfcStructuralLoadSingleDisplacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadSingleDisplacementDistortion_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadSingleDisplacementDistortion_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadSingleDisplacementDistortion(static_cast< IfcStructuralLoadSingleDisplacementDistortion * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadSingleForce_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadSingleForce_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADSINGLEFORCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadSingleForce(static_cast< IfcStructuralLoadSingleForce * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadSingleForceWarping_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadSingleForceWarping_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADSINGLEFORCEWARPING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadSingleForceWarping(static_cast< IfcStructuralLoadSingleForceWarping * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadStatic_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadStatic_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADSTATIC(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadStatic(static_cast< IfcStructuralLoadStatic * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralLoadTemperature_Map.begin();
    while (it != expressDataSet->m_IfcStructuralLoadTemperature_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALLOADTEMPERATURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralLoadTemperature(static_cast< IfcStructuralLoadTemperature * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralMember_Map.begin();
    while (it != expressDataSet->m_IfcStructuralMember_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALMEMBER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralMember(static_cast< IfcStructuralMember * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralPlanarAction_Map.begin();
    while (it != expressDataSet->m_IfcStructuralPlanarAction_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALPLANARACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralPlanarAction(static_cast< IfcStructuralPlanarAction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralPlanarActionVarying_Map.begin();
    while (it != expressDataSet->m_IfcStructuralPlanarActionVarying_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALPLANARACTIONVARYING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralPlanarActionVarying(static_cast< IfcStructuralPlanarActionVarying * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralPointAction_Map.begin();
    while (it != expressDataSet->m_IfcStructuralPointAction_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALPOINTACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralPointAction(static_cast< IfcStructuralPointAction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralPointConnection_Map.begin();
    while (it != expressDataSet->m_IfcStructuralPointConnection_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALPOINTCONNECTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralPointConnection(static_cast< IfcStructuralPointConnection * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralPointReaction_Map.begin();
    while (it != expressDataSet->m_IfcStructuralPointReaction_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALPOINTREACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralPointReaction(static_cast< IfcStructuralPointReaction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralProfileProperties_Map.begin();
    while (it != expressDataSet->m_IfcStructuralProfileProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALPROFILEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralProfileProperties(static_cast< IfcStructuralProfileProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralReaction_Map.begin();
    while (it != expressDataSet->m_IfcStructuralReaction_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALREACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralReaction(static_cast< IfcStructuralReaction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralResultGroup_Map.begin();
    while (it != expressDataSet->m_IfcStructuralResultGroup_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALRESULTGROUP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralResultGroup(static_cast< IfcStructuralResultGroup * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralSteelProfileProperties_Map.begin();
    while (it != expressDataSet->m_IfcStructuralSteelProfileProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALSTEELPROFILEPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralSteelProfileProperties(static_cast< IfcStructuralSteelProfileProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralSurfaceConnection_Map.begin();
    while (it != expressDataSet->m_IfcStructuralSurfaceConnection_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALSURFACECONNECTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralSurfaceConnection(static_cast< IfcStructuralSurfaceConnection * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralSurfaceMember_Map.begin();
    while (it != expressDataSet->m_IfcStructuralSurfaceMember_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALSURFACEMEMBER(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralSurfaceMember(static_cast< IfcStructuralSurfaceMember * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuralSurfaceMemberVarying_Map.begin();
    while (it != expressDataSet->m_IfcStructuralSurfaceMemberVarying_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTURALSURFACEMEMBERVARYING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuralSurfaceMemberVarying(static_cast< IfcStructuralSurfaceMemberVarying * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStructuredDimensionCallout_Map.begin();
    while (it != expressDataSet->m_IfcStructuredDimensionCallout_Map.end()) {
        m_out << "#" << it->first << "=IFCSTRUCTUREDDIMENSIONCALLOUT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStructuredDimensionCallout(static_cast< IfcStructuredDimensionCallout * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStyleModel_Map.begin();
    while (it != expressDataSet->m_IfcStyleModel_Map.end()) {
        m_out << "#" << it->first << "=IFCSTYLEMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStyleModel(static_cast< IfcStyleModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStyledItem_Map.begin();
    while (it != expressDataSet->m_IfcStyledItem_Map.end()) {
        m_out << "#" << it->first << "=IFCSTYLEDITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStyledItem(static_cast< IfcStyledItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcStyledRepresentation_Map.begin();
    while (it != expressDataSet->m_IfcStyledRepresentation_Map.end()) {
        m_out << "#" << it->first << "=IFCSTYLEDREPRESENTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcStyledRepresentation(static_cast< IfcStyledRepresentation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSubContractResource_Map.begin();
    while (it != expressDataSet->m_IfcSubContractResource_Map.end()) {
        m_out << "#" << it->first << "=IFCSUBCONTRACTRESOURCE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSubContractResource(static_cast< IfcSubContractResource * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSubedge_Map.begin();
    while (it != expressDataSet->m_IfcSubedge_Map.end()) {
        m_out << "#" << it->first << "=IFCSUBEDGE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSubedge(static_cast< IfcSubedge * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurface_Map.begin();
    while (it != expressDataSet->m_IfcSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurface(static_cast< IfcSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceCurveSweptAreaSolid_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceCurveSweptAreaSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACECURVESWEPTAREASOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceCurveSweptAreaSolid(static_cast< IfcSurfaceCurveSweptAreaSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceOfLinearExtrusion_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceOfLinearExtrusion_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACEOFLINEAREXTRUSION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceOfLinearExtrusion(static_cast< IfcSurfaceOfLinearExtrusion * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceOfRevolution_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceOfRevolution_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACEOFREVOLUTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceOfRevolution(static_cast< IfcSurfaceOfRevolution * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceStyle_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACESTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceStyle(static_cast< IfcSurfaceStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceStyleLighting_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceStyleLighting_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACESTYLELIGHTING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceStyleLighting(static_cast< IfcSurfaceStyleLighting * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceStyleRefraction_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceStyleRefraction_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACESTYLEREFRACTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceStyleRefraction(static_cast< IfcSurfaceStyleRefraction * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceStyleRendering_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceStyleRendering_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACESTYLERENDERING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceStyleRendering(static_cast< IfcSurfaceStyleRendering * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceStyleShading_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceStyleShading_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACESTYLESHADING(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceStyleShading(static_cast< IfcSurfaceStyleShading * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceStyleWithTextures_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceStyleWithTextures_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACESTYLEWITHTEXTURES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceStyleWithTextures(static_cast< IfcSurfaceStyleWithTextures * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSurfaceTexture_Map.begin();
    while (it != expressDataSet->m_IfcSurfaceTexture_Map.end()) {
        m_out << "#" << it->first << "=IFCSURFACETEXTURE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSurfaceTexture(static_cast< IfcSurfaceTexture * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSweptAreaSolid_Map.begin();
    while (it != expressDataSet->m_IfcSweptAreaSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCSWEPTAREASOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSweptAreaSolid(static_cast< IfcSweptAreaSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSweptDiskSolid_Map.begin();
    while (it != expressDataSet->m_IfcSweptDiskSolid_Map.end()) {
        m_out << "#" << it->first << "=IFCSWEPTDISKSOLID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSweptDiskSolid(static_cast< IfcSweptDiskSolid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSweptSurface_Map.begin();
    while (it != expressDataSet->m_IfcSweptSurface_Map.end()) {
        m_out << "#" << it->first << "=IFCSWEPTSURFACE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSweptSurface(static_cast< IfcSweptSurface * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSwitchingDeviceType_Map.begin();
    while (it != expressDataSet->m_IfcSwitchingDeviceType_Map.end()) {
        m_out << "#" << it->first << "=IFCSWITCHINGDEVICETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSwitchingDeviceType(static_cast< IfcSwitchingDeviceType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSymbolStyle_Map.begin();
    while (it != expressDataSet->m_IfcSymbolStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCSYMBOLSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSymbolStyle(static_cast< IfcSymbolStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSystem_Map.begin();
    while (it != expressDataSet->m_IfcSystem_Map.end()) {
        m_out << "#" << it->first << "=IFCSYSTEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSystem(static_cast< IfcSystem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcSystemFurnitureElementType_Map.begin();
    while (it != expressDataSet->m_IfcSystemFurnitureElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCSYSTEMFURNITUREELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcSystemFurnitureElementType(static_cast< IfcSystemFurnitureElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcTShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCTSHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTShapeProfileDef(static_cast< IfcTShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTable_Map.begin();
    while (it != expressDataSet->m_IfcTable_Map.end()) {
        m_out << "#" << it->first << "=IFCTABLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTable(static_cast< IfcTable * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTableRow_Map.begin();
    while (it != expressDataSet->m_IfcTableRow_Map.end()) {
        m_out << "#" << it->first << "=IFCTABLEROW(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTableRow(static_cast< IfcTableRow * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTankType_Map.begin();
    while (it != expressDataSet->m_IfcTankType_Map.end()) {
        m_out << "#" << it->first << "=IFCTANKTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTankType(static_cast< IfcTankType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTask_Map.begin();
    while (it != expressDataSet->m_IfcTask_Map.end()) {
        m_out << "#" << it->first << "=IFCTASK(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTask(static_cast< IfcTask * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTelecomAddress_Map.begin();
    while (it != expressDataSet->m_IfcTelecomAddress_Map.end()) {
        m_out << "#" << it->first << "=IFCTELECOMADDRESS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTelecomAddress(static_cast< IfcTelecomAddress * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTendon_Map.begin();
    while (it != expressDataSet->m_IfcTendon_Map.end()) {
        m_out << "#" << it->first << "=IFCTENDON(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTendon(static_cast< IfcTendon * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTendonAnchor_Map.begin();
    while (it != expressDataSet->m_IfcTendonAnchor_Map.end()) {
        m_out << "#" << it->first << "=IFCTENDONANCHOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTendonAnchor(static_cast< IfcTendonAnchor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTerminatorSymbol_Map.begin();
    while (it != expressDataSet->m_IfcTerminatorSymbol_Map.end()) {
        m_out << "#" << it->first << "=IFCTERMINATORSYMBOL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTerminatorSymbol(static_cast< IfcTerminatorSymbol * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextLiteral_Map.begin();
    while (it != expressDataSet->m_IfcTextLiteral_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTLITERAL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextLiteral(static_cast< IfcTextLiteral * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextLiteralWithExtent_Map.begin();
    while (it != expressDataSet->m_IfcTextLiteralWithExtent_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTLITERALWITHEXTENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextLiteralWithExtent(static_cast< IfcTextLiteralWithExtent * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextStyle_Map.begin();
    while (it != expressDataSet->m_IfcTextStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextStyle(static_cast< IfcTextStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextStyleFontModel_Map.begin();
    while (it != expressDataSet->m_IfcTextStyleFontModel_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTSTYLEFONTMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextStyleFontModel(static_cast< IfcTextStyleFontModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextStyleForDefinedFont_Map.begin();
    while (it != expressDataSet->m_IfcTextStyleForDefinedFont_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTSTYLEFORDEFINEDFONT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextStyleForDefinedFont(static_cast< IfcTextStyleForDefinedFont * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextStyleTextModel_Map.begin();
    while (it != expressDataSet->m_IfcTextStyleTextModel_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTSTYLETEXTMODEL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextStyleTextModel(static_cast< IfcTextStyleTextModel * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextStyleWithBoxCharacteristics_Map.begin();
    while (it != expressDataSet->m_IfcTextStyleWithBoxCharacteristics_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTSTYLEWITHBOXCHARACTERISTICS(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextStyleWithBoxCharacteristics(static_cast< IfcTextStyleWithBoxCharacteristics * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextureCoordinate_Map.begin();
    while (it != expressDataSet->m_IfcTextureCoordinate_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTURECOORDINATE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextureCoordinate(static_cast< IfcTextureCoordinate * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextureCoordinateGenerator_Map.begin();
    while (it != expressDataSet->m_IfcTextureCoordinateGenerator_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTURECOORDINATEGENERATOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextureCoordinateGenerator(static_cast< IfcTextureCoordinateGenerator * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextureMap_Map.begin();
    while (it != expressDataSet->m_IfcTextureMap_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTUREMAP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextureMap(static_cast< IfcTextureMap * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTextureVertex_Map.begin();
    while (it != expressDataSet->m_IfcTextureVertex_Map.end()) {
        m_out << "#" << it->first << "=IFCTEXTUREVERTEX(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTextureVertex(static_cast< IfcTextureVertex * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcThermalMaterialProperties_Map.begin();
    while (it != expressDataSet->m_IfcThermalMaterialProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCTHERMALMATERIALPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcThermalMaterialProperties(static_cast< IfcThermalMaterialProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTimeSeries_Map.begin();
    while (it != expressDataSet->m_IfcTimeSeries_Map.end()) {
        m_out << "#" << it->first << "=IFCTIMESERIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTimeSeries(static_cast< IfcTimeSeries * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTimeSeriesReferenceRelationship_Map.begin();
    while (it != expressDataSet->m_IfcTimeSeriesReferenceRelationship_Map.end()) {
        m_out << "#" << it->first << "=IFCTIMESERIESREFERENCERELATIONSHIP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTimeSeriesReferenceRelationship(static_cast< IfcTimeSeriesReferenceRelationship * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTimeSeriesSchedule_Map.begin();
    while (it != expressDataSet->m_IfcTimeSeriesSchedule_Map.end()) {
        m_out << "#" << it->first << "=IFCTIMESERIESSCHEDULE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTimeSeriesSchedule(static_cast< IfcTimeSeriesSchedule * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTimeSeriesValue_Map.begin();
    while (it != expressDataSet->m_IfcTimeSeriesValue_Map.end()) {
        m_out << "#" << it->first << "=IFCTIMESERIESVALUE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTimeSeriesValue(static_cast< IfcTimeSeriesValue * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTopologicalRepresentationItem_Map.begin();
    while (it != expressDataSet->m_IfcTopologicalRepresentationItem_Map.end()) {
        m_out << "#" << it->first << "=IFCTOPOLOGICALREPRESENTATIONITEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTopologicalRepresentationItem(static_cast< IfcTopologicalRepresentationItem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTopologyRepresentation_Map.begin();
    while (it != expressDataSet->m_IfcTopologyRepresentation_Map.end()) {
        m_out << "#" << it->first << "=IFCTOPOLOGYREPRESENTATION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTopologyRepresentation(static_cast< IfcTopologyRepresentation * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTransformerType_Map.begin();
    while (it != expressDataSet->m_IfcTransformerType_Map.end()) {
        m_out << "#" << it->first << "=IFCTRANSFORMERTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTransformerType(static_cast< IfcTransformerType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTransportElement_Map.begin();
    while (it != expressDataSet->m_IfcTransportElement_Map.end()) {
        m_out << "#" << it->first << "=IFCTRANSPORTELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTransportElement(static_cast< IfcTransportElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTransportElementType_Map.begin();
    while (it != expressDataSet->m_IfcTransportElementType_Map.end()) {
        m_out << "#" << it->first << "=IFCTRANSPORTELEMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTransportElementType(static_cast< IfcTransportElementType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTrapeziumProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcTrapeziumProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCTRAPEZIUMPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTrapeziumProfileDef(static_cast< IfcTrapeziumProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTrimmedCurve_Map.begin();
    while (it != expressDataSet->m_IfcTrimmedCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCTRIMMEDCURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTrimmedCurve(static_cast< IfcTrimmedCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTubeBundleType_Map.begin();
    while (it != expressDataSet->m_IfcTubeBundleType_Map.end()) {
        m_out << "#" << it->first << "=IFCTUBEBUNDLETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTubeBundleType(static_cast< IfcTubeBundleType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTwoDirectionRepeatFactor_Map.begin();
    while (it != expressDataSet->m_IfcTwoDirectionRepeatFactor_Map.end()) {
        m_out << "#" << it->first << "=IFCTWODIRECTIONREPEATFACTOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTwoDirectionRepeatFactor(static_cast< IfcTwoDirectionRepeatFactor * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTypeObject_Map.begin();
    while (it != expressDataSet->m_IfcTypeObject_Map.end()) {
        m_out << "#" << it->first << "=IFCTYPEOBJECT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTypeObject(static_cast< IfcTypeObject * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcTypeProduct_Map.begin();
    while (it != expressDataSet->m_IfcTypeProduct_Map.end()) {
        m_out << "#" << it->first << "=IFCTYPEPRODUCT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcTypeProduct(static_cast< IfcTypeProduct * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcUShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcUShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCUSHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcUShapeProfileDef(static_cast< IfcUShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcUnitAssignment_Map.begin();
    while (it != expressDataSet->m_IfcUnitAssignment_Map.end()) {
        m_out << "#" << it->first << "=IFCUNITASSIGNMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcUnitAssignment(static_cast< IfcUnitAssignment * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcUnitaryEquipmentType_Map.begin();
    while (it != expressDataSet->m_IfcUnitaryEquipmentType_Map.end()) {
        m_out << "#" << it->first << "=IFCUNITARYEQUIPMENTTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcUnitaryEquipmentType(static_cast< IfcUnitaryEquipmentType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcValveType_Map.begin();
    while (it != expressDataSet->m_IfcValveType_Map.end()) {
        m_out << "#" << it->first << "=IFCVALVETYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcValveType(static_cast< IfcValveType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVector_Map.begin();
    while (it != expressDataSet->m_IfcVector_Map.end()) {
        m_out << "#" << it->first << "=IFCVECTOR(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVector(static_cast< IfcVector * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVertex_Map.begin();
    while (it != expressDataSet->m_IfcVertex_Map.end()) {
        m_out << "#" << it->first << "=IFCVERTEX(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVertex(static_cast< IfcVertex * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVertexBasedTextureMap_Map.begin();
    while (it != expressDataSet->m_IfcVertexBasedTextureMap_Map.end()) {
        m_out << "#" << it->first << "=IFCVERTEXBASEDTEXTUREMAP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVertexBasedTextureMap(static_cast< IfcVertexBasedTextureMap * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVertexLoop_Map.begin();
    while (it != expressDataSet->m_IfcVertexLoop_Map.end()) {
        m_out << "#" << it->first << "=IFCVERTEXLOOP(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVertexLoop(static_cast< IfcVertexLoop * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVertexPoint_Map.begin();
    while (it != expressDataSet->m_IfcVertexPoint_Map.end()) {
        m_out << "#" << it->first << "=IFCVERTEXPOINT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVertexPoint(static_cast< IfcVertexPoint * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVibrationIsolatorType_Map.begin();
    while (it != expressDataSet->m_IfcVibrationIsolatorType_Map.end()) {
        m_out << "#" << it->first << "=IFCVIBRATIONISOLATORTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVibrationIsolatorType(static_cast< IfcVibrationIsolatorType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVirtualElement_Map.begin();
    while (it != expressDataSet->m_IfcVirtualElement_Map.end()) {
        m_out << "#" << it->first << "=IFCVIRTUALELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVirtualElement(static_cast< IfcVirtualElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcVirtualGridIntersection_Map.begin();
    while (it != expressDataSet->m_IfcVirtualGridIntersection_Map.end()) {
        m_out << "#" << it->first << "=IFCVIRTUALGRIDINTERSECTION(";
        if (!writeIfNotInited(it->first)) {
            writeIfcVirtualGridIntersection(static_cast< IfcVirtualGridIntersection * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWall_Map.begin();
    while (it != expressDataSet->m_IfcWall_Map.end()) {
        m_out << "#" << it->first << "=IFCWALL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWall(static_cast< IfcWall * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWallStandardCase_Map.begin();
    while (it != expressDataSet->m_IfcWallStandardCase_Map.end()) {
        m_out << "#" << it->first << "=IFCWALLSTANDARDCASE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWallStandardCase(static_cast< IfcWallStandardCase * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWallType_Map.begin();
    while (it != expressDataSet->m_IfcWallType_Map.end()) {
        m_out << "#" << it->first << "=IFCWALLTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWallType(static_cast< IfcWallType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWasteTerminalType_Map.begin();
    while (it != expressDataSet->m_IfcWasteTerminalType_Map.end()) {
        m_out << "#" << it->first << "=IFCWASTETERMINALTYPE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWasteTerminalType(static_cast< IfcWasteTerminalType * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWaterProperties_Map.begin();
    while (it != expressDataSet->m_IfcWaterProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCWATERPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWaterProperties(static_cast< IfcWaterProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWindow_Map.begin();
    while (it != expressDataSet->m_IfcWindow_Map.end()) {
        m_out << "#" << it->first << "=IFCWINDOW(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWindow(static_cast< IfcWindow * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWindowLiningProperties_Map.begin();
    while (it != expressDataSet->m_IfcWindowLiningProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCWINDOWLININGPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWindowLiningProperties(static_cast< IfcWindowLiningProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWindowPanelProperties_Map.begin();
    while (it != expressDataSet->m_IfcWindowPanelProperties_Map.end()) {
        m_out << "#" << it->first << "=IFCWINDOWPANELPROPERTIES(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWindowPanelProperties(static_cast< IfcWindowPanelProperties * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWindowStyle_Map.begin();
    while (it != expressDataSet->m_IfcWindowStyle_Map.end()) {
        m_out << "#" << it->first << "=IFCWINDOWSTYLE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWindowStyle(static_cast< IfcWindowStyle * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWorkControl_Map.begin();
    while (it != expressDataSet->m_IfcWorkControl_Map.end()) {
        m_out << "#" << it->first << "=IFCWORKCONTROL(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWorkControl(static_cast< IfcWorkControl * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWorkPlan_Map.begin();
    while (it != expressDataSet->m_IfcWorkPlan_Map.end()) {
        m_out << "#" << it->first << "=IFCWORKPLAN(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWorkPlan(static_cast< IfcWorkPlan * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcWorkSchedule_Map.begin();
    while (it != expressDataSet->m_IfcWorkSchedule_Map.end()) {
        m_out << "#" << it->first << "=IFCWORKSCHEDULE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcWorkSchedule(static_cast< IfcWorkSchedule * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcZShapeProfileDef_Map.begin();
    while (it != expressDataSet->m_IfcZShapeProfileDef_Map.end()) {
        m_out << "#" << it->first << "=IFCZSHAPEPROFILEDEF(";
        if (!writeIfNotInited(it->first)) {
            writeIfcZShapeProfileDef(static_cast< IfcZShapeProfileDef * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcZone_Map.begin();
    while (it != expressDataSet->m_IfcZone_Map.end()) {
        m_out << "#" << it->first << "=IFCZONE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcZone(static_cast< IfcZone * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCivilStructureElement_Map.begin();
    while (it != expressDataSet->m_IfcCivilStructureElement_Map.end()) {
        m_out << "#" << it->first << "=IFCCIVILSTRUCTUREELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCivilStructureElement(static_cast< IfcCivilStructureElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgeStructureElement_Map.begin();
    while (it != expressDataSet->m_IfcBridgeStructureElement_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGESTRUCTUREELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgeStructureElement(static_cast< IfcBridgeStructureElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridge_Map.begin();
    while (it != expressDataSet->m_IfcBridge_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridge(static_cast< IfcBridge * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgePart_Map.begin();
    while (it != expressDataSet->m_IfcBridgePart_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGEPART(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgePart(static_cast< IfcBridgePart * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCivilElement_Map.begin();
    while (it != expressDataSet->m_IfcCivilElement_Map.end()) {
        m_out << "#" << it->first << "=IFCCIVILELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCivilElement(static_cast< IfcCivilElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgeElement_Map.begin();
    while (it != expressDataSet->m_IfcBridgeElement_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGEELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgeElement(static_cast< IfcBridgeElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgeSegment_Map.begin();
    while (it != expressDataSet->m_IfcBridgeSegment_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGESEGMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgeSegment(static_cast< IfcBridgeSegment * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgeSegmentPart_Map.begin();
    while (it != expressDataSet->m_IfcBridgeSegmentPart_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGESEGMENTPART(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgeSegmentPart(static_cast< IfcBridgeSegmentPart * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgeContactElement_Map.begin();
    while (it != expressDataSet->m_IfcBridgeContactElement_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGECONTACTELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgeContactElement(static_cast< IfcBridgeContactElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcBridgePrismaticElement_Map.begin();
    while (it != expressDataSet->m_IfcBridgePrismaticElement_Map.end()) {
        m_out << "#" << it->first << "=IFCBRIDGEPRISMATICELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcBridgePrismaticElement(static_cast< IfcBridgePrismaticElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcAlignmentElement_Map.begin();
    while (it != expressDataSet->m_IfcAlignmentElement_Map.end()) {
        m_out << "#" << it->first << "=IFCALIGNMENTELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcAlignmentElement(static_cast< IfcAlignmentElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferenceElement_Map.begin();
    while (it != expressDataSet->m_IfcReferenceElement_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCEELEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferenceElement(static_cast< IfcReferenceElement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferenceCurve_Map.begin();
    while (it != expressDataSet->m_IfcReferenceCurve_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCECURVE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferenceCurve(static_cast< IfcReferenceCurve * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferenceCurve3D_Map.begin();
    while (it != expressDataSet->m_IfcReferenceCurve3D_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCECURVE3D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferenceCurve3D(static_cast< IfcReferenceCurve3D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferenceCurveAlignment2D_Map.begin();
    while (it != expressDataSet->m_IfcReferenceCurveAlignment2D_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCECURVEALIGNMENT2D(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferenceCurveAlignment2D(static_cast< IfcReferenceCurveAlignment2D * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferencePlacement_Map.begin();
    while (it != expressDataSet->m_IfcReferencePlacement_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCEPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferencePlacement(static_cast< IfcReferencePlacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferenceCurvePlacement_Map.begin();
    while (it != expressDataSet->m_IfcReferenceCurvePlacement_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCECURVEPLACEMENT(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferenceCurvePlacement(static_cast< IfcReferenceCurvePlacement * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferenceCurvePlacementSystem_Map.begin();
    while (it != expressDataSet->m_IfcReferenceCurvePlacementSystem_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCECURVEPLACEMENTSYSTEM(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferenceCurvePlacementSystem(static_cast< IfcReferenceCurvePlacementSystem * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcElementPart_Map.begin();
    while (it != expressDataSet->m_IfcElementPart_Map.end()) {
        m_out << "#" << it->first << "=IFCELEMENTPART(";
        if (!writeIfNotInited(it->first)) {
            writeIfcElementPart(static_cast< IfcElementPart * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCivilElementPart_Map.begin();
    while (it != expressDataSet->m_IfcCivilElementPart_Map.end()) {
        m_out << "#" << it->first << "=IFCCIVILELEMENTPART(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCivilElementPart(static_cast< IfcCivilElementPart * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCivilSheath_Map.begin();
    while (it != expressDataSet->m_IfcCivilSheath_Map.end()) {
        m_out << "#" << it->first << "=IFCCIVILSHEATH(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCivilSheath(static_cast< IfcCivilSheath * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcCivilVoid_Map.begin();
    while (it != expressDataSet->m_IfcCivilVoid_Map.end()) {
        m_out << "#" << it->first << "=IFCCIVILVOID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcCivilVoid(static_cast< IfcCivilVoid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcClothoid_Map.begin();
    while (it != expressDataSet->m_IfcClothoid_Map.end()) {
        m_out << "#" << it->first << "=IFCCLOTHOID(";
        if (!writeIfNotInited(it->first)) {
            writeIfcClothoid(static_cast< IfcClothoid * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    it = expressDataSet->m_IfcReferencedSectionedSpine_Map.begin();
    while (it != expressDataSet->m_IfcReferencedSectionedSpine_Map.end()) {
        m_out << "#" << it->first << "=IFCREFERENCEDSECTIONEDSPINE(";
        if (!writeIfNotInited(it->first)) {
            writeIfcReferencedSectionedSpine(static_cast< IfcReferencedSectionedSpine * > (it->second.get()));
            m_out << ");\n";
        }
        it++;
    }
    writeEnder();
    return true;
}

void SPFWriter::writeIfc2DCompositeCurve(Ifc2DCompositeCurve *ptr) {
    if (Step::isUnset(ptr->getSegments())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCompositeCurveSegment > >::iterator step_it0 = (ptr->getSegments()).begin();
            if ((ptr->getSegments()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSegments()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
}

void SPFWriter::writeIfcActionRequest(IfcActionRequest *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRequestID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRequestID());
    }
}

void SPFWriter::writeIfcActor(IfcActor *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTheActor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getTheActor());
    }
}

void SPFWriter::writeIfcActorSelect(IfcActorSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcActorSelect::IFCORGANIZATION:
        writeAttribute(selectData->getIfcOrganization());
        break;
    case IfcActorSelect::IFCPERSON:
        writeAttribute(selectData->getIfcPerson());
        break;
    case IfcActorSelect::IFCPERSONANDORGANIZATION:
        writeAttribute(selectData->getIfcPersonAndOrganization());
        break;
        }
}

void SPFWriter::writeIfcActorRole(IfcActorRole *ptr) {
    if (Step::isUnsetEnum(ptr->getRole())) {
        m_out << "$";
    }
    else {
        writeIfcRoleEnum(ptr->getRole());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedRole())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedRole());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcRoleEnum(IfcRoleEnum enumData) {
    switch(enumData) {
    case IfcRoleEnum_SUPPLIER:
        m_out << ".SUPPLIER.";
        break;
    case IfcRoleEnum_MANUFACTURER:
        m_out << ".MANUFACTURER.";
        break;
    case IfcRoleEnum_CONTRACTOR:
        m_out << ".CONTRACTOR.";
        break;
    case IfcRoleEnum_SUBCONTRACTOR:
        m_out << ".SUBCONTRACTOR.";
        break;
    case IfcRoleEnum_ARCHITECT:
        m_out << ".ARCHITECT.";
        break;
    case IfcRoleEnum_STRUCTURALENGINEER:
        m_out << ".STRUCTURALENGINEER.";
        break;
    case IfcRoleEnum_COSTENGINEER:
        m_out << ".COSTENGINEER.";
        break;
    case IfcRoleEnum_CLIENT:
        m_out << ".CLIENT.";
        break;
    case IfcRoleEnum_BUILDINGOWNER:
        m_out << ".BUILDINGOWNER.";
        break;
    case IfcRoleEnum_BUILDINGOPERATOR:
        m_out << ".BUILDINGOPERATOR.";
        break;
    case IfcRoleEnum_MECHANICALENGINEER:
        m_out << ".MECHANICALENGINEER.";
        break;
    case IfcRoleEnum_ELECTRICALENGINEER:
        m_out << ".ELECTRICALENGINEER.";
        break;
    case IfcRoleEnum_PROJECTMANAGER:
        m_out << ".PROJECTMANAGER.";
        break;
    case IfcRoleEnum_FACILITIESMANAGER:
        m_out << ".FACILITIESMANAGER.";
        break;
    case IfcRoleEnum_CIVILENGINEER:
        m_out << ".CIVILENGINEER.";
        break;
    case IfcRoleEnum_COMISSIONINGENGINEER:
        m_out << ".COMISSIONINGENGINEER.";
        break;
    case IfcRoleEnum_ENGINEER:
        m_out << ".ENGINEER.";
        break;
    case IfcRoleEnum_OWNER:
        m_out << ".OWNER.";
        break;
    case IfcRoleEnum_CONSULTANT:
        m_out << ".CONSULTANT.";
        break;
    case IfcRoleEnum_CONSTRUCTIONMANAGER:
        m_out << ".CONSTRUCTIONMANAGER.";
        break;
    case IfcRoleEnum_FIELDCONSTRUCTIONMANAGER:
        m_out << ".FIELDCONSTRUCTIONMANAGER.";
        break;
    case IfcRoleEnum_RESELLER:
        m_out << ".RESELLER.";
        break;
    case IfcRoleEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcActuatorType(IfcActuatorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcActuatorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcActuatorTypeEnum(IfcActuatorTypeEnum enumData) {
    switch(enumData) {
    case IfcActuatorTypeEnum_ELECTRICACTUATOR:
        m_out << ".ELECTRICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_HANDOPERATEDACTUATOR:
        m_out << ".HANDOPERATEDACTUATOR.";
        break;
    case IfcActuatorTypeEnum_HYDRAULICACTUATOR:
        m_out << ".HYDRAULICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_PNEUMATICACTUATOR:
        m_out << ".PNEUMATICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_THERMOSTATICACTUATOR:
        m_out << ".THERMOSTATICACTUATOR.";
        break;
    case IfcActuatorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcActuatorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcAddress(IfcAddress *ptr) {
    if (Step::isUnsetEnum(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeIfcAddressTypeEnum(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedPurpose());
    }
}

void SPFWriter::writeIfcAddressTypeEnum(IfcAddressTypeEnum enumData) {
    switch(enumData) {
    case IfcAddressTypeEnum_OFFICE:
        m_out << ".OFFICE.";
        break;
    case IfcAddressTypeEnum_SITE:
        m_out << ".SITE.";
        break;
    case IfcAddressTypeEnum_HOME:
        m_out << ".HOME.";
        break;
    case IfcAddressTypeEnum_DISTRIBUTIONPOINT:
        m_out << ".DISTRIBUTIONPOINT.";
        break;
    case IfcAddressTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcAirTerminalBoxType(IfcAirTerminalBoxType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcAirTerminalBoxTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcAirTerminalBoxTypeEnum(IfcAirTerminalBoxTypeEnum enumData) {
    switch(enumData) {
    case IfcAirTerminalBoxTypeEnum_CONSTANTFLOW:
        m_out << ".CONSTANTFLOW.";
        break;
    case IfcAirTerminalBoxTypeEnum_VARIABLEFLOWPRESSUREDEPENDANT:
        m_out << ".VARIABLEFLOWPRESSUREDEPENDANT.";
        break;
    case IfcAirTerminalBoxTypeEnum_VARIABLEFLOWPRESSUREINDEPENDANT:
        m_out << ".VARIABLEFLOWPRESSUREINDEPENDANT.";
        break;
    case IfcAirTerminalBoxTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcAirTerminalBoxTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcAirTerminalType(IfcAirTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcAirTerminalTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcAirTerminalTypeEnum(IfcAirTerminalTypeEnum enumData) {
    switch(enumData) {
    case IfcAirTerminalTypeEnum_GRILLE:
        m_out << ".GRILLE.";
        break;
    case IfcAirTerminalTypeEnum_REGISTER:
        m_out << ".REGISTER.";
        break;
    case IfcAirTerminalTypeEnum_DIFFUSER:
        m_out << ".DIFFUSER.";
        break;
    case IfcAirTerminalTypeEnum_EYEBALL:
        m_out << ".EYEBALL.";
        break;
    case IfcAirTerminalTypeEnum_IRIS:
        m_out << ".IRIS.";
        break;
    case IfcAirTerminalTypeEnum_LINEARGRILLE:
        m_out << ".LINEARGRILLE.";
        break;
    case IfcAirTerminalTypeEnum_LINEARDIFFUSER:
        m_out << ".LINEARDIFFUSER.";
        break;
    case IfcAirTerminalTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcAirTerminalTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcAirToAirHeatRecoveryType(IfcAirToAirHeatRecoveryType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcAirToAirHeatRecoveryTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcAirToAirHeatRecoveryTypeEnum(IfcAirToAirHeatRecoveryTypeEnum enumData) {
    switch(enumData) {
    case IfcAirToAirHeatRecoveryTypeEnum_FIXEDPLATECOUNTERFLOWEXCHANGER:
        m_out << ".FIXEDPLATECOUNTERFLOWEXCHANGER.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_FIXEDPLATECROSSFLOWEXCHANGER:
        m_out << ".FIXEDPLATECROSSFLOWEXCHANGER.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_FIXEDPLATEPARALLELFLOWEXCHANGER:
        m_out << ".FIXEDPLATEPARALLELFLOWEXCHANGER.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_ROTARYWHEEL:
        m_out << ".ROTARYWHEEL.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_RUNAROUNDCOILLOOP:
        m_out << ".RUNAROUNDCOILLOOP.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_HEATPIPE:
        m_out << ".HEATPIPE.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_TWINTOWERENTHALPYRECOVERYLOOPS:
        m_out << ".TWINTOWERENTHALPYRECOVERYLOOPS.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS:
        m_out << ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_THERMOSIPHONCOILTYPEHEATEXCHANGERS:
        m_out << ".THERMOSIPHONCOILTYPEHEATEXCHANGERS.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcAirToAirHeatRecoveryTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcAlarmType(IfcAlarmType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcAlarmTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcAlarmTypeEnum(IfcAlarmTypeEnum enumData) {
    switch(enumData) {
    case IfcAlarmTypeEnum_BELL:
        m_out << ".BELL.";
        break;
    case IfcAlarmTypeEnum_BREAKGLASSBUTTON:
        m_out << ".BREAKGLASSBUTTON.";
        break;
    case IfcAlarmTypeEnum_LIGHT:
        m_out << ".LIGHT.";
        break;
    case IfcAlarmTypeEnum_MANUALPULLBOX:
        m_out << ".MANUALPULLBOX.";
        break;
    case IfcAlarmTypeEnum_SIREN:
        m_out << ".SIREN.";
        break;
    case IfcAlarmTypeEnum_WHISTLE:
        m_out << ".WHISTLE.";
        break;
    case IfcAlarmTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcAlarmTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcAngularDimension(IfcAngularDimension *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcDraughtingCalloutElement(IfcDraughtingCalloutElement *selectData) {
    switch(selectData->currentType()) {
    case IfcDraughtingCalloutElement::IFCANNOTATIONCURVEOCCURRENCE:
        writeAttribute(selectData->getIfcAnnotationCurveOccurrence());
        break;
    case IfcDraughtingCalloutElement::IFCANNOTATIONTEXTOCCURRENCE:
        writeAttribute(selectData->getIfcAnnotationTextOccurrence());
        break;
    case IfcDraughtingCalloutElement::IFCANNOTATIONSYMBOLOCCURRENCE:
        writeAttribute(selectData->getIfcAnnotationSymbolOccurrence());
        break;
        }
}

void SPFWriter::writeIfcAnnotation(IfcAnnotation *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcAnnotationCurveOccurrence(IfcAnnotationCurveOccurrence *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcAnnotationFillArea(IfcAnnotationFillArea *ptr) {
    if (Step::isUnset(ptr->getOuterBoundary())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuterBoundary());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInnerBoundaries())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcCurve > >::iterator step_it0 = (ptr->getInnerBoundaries()).begin();
            if ((ptr->getInnerBoundaries()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getInnerBoundaries()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcAnnotationFillAreaOccurrence(IfcAnnotationFillAreaOccurrence *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFillStyleTarget())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFillStyleTarget());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
}

void SPFWriter::writeIfcGlobalOrLocalEnum(IfcGlobalOrLocalEnum enumData) {
    switch(enumData) {
    case IfcGlobalOrLocalEnum_GLOBAL_COORDS:
        m_out << ".GLOBAL_COORDS.";
        break;
    case IfcGlobalOrLocalEnum_LOCAL_COORDS:
        m_out << ".LOCAL_COORDS.";
        break;
        }
}

void SPFWriter::writeIfcAnnotationOccurrence(IfcAnnotationOccurrence *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcAnnotationSurface(IfcAnnotationSurface *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextureCoordinates())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextureCoordinates());
    }
}

void SPFWriter::writeIfcAnnotationSurfaceOccurrence(IfcAnnotationSurfaceOccurrence *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcAnnotationSymbolOccurrence(IfcAnnotationSymbolOccurrence *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcAnnotationTextOccurrence(IfcAnnotationTextOccurrence *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcApplication(IfcApplication *ptr) {
    if (Step::isUnset(ptr->getApplicationDeveloper())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicationDeveloper());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVersion())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVersion());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicationFullName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicationFullName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicationIdentifier());
    }
}

void SPFWriter::writeIfcAppliedValue(IfcAppliedValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedValue())) {
        m_out << "$";
    }
    else {
        writeIfcAppliedValueSelect(ptr->getAppliedValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnitBasis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnitBasis());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getApplicableDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFixedUntilDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getFixedUntilDate());
    }
}

void SPFWriter::writeIfcAppliedValueSelect(IfcAppliedValueSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcAppliedValueSelect::IFCRATIOMEASURE:
        m_out << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        m_out << ")";
        break;
    case IfcAppliedValueSelect::IFCMEASUREWITHUNIT:
        writeAttribute(selectData->getIfcMeasureWithUnit());
        break;
    case IfcAppliedValueSelect::IFCMONETARYMEASURE:
        m_out << "IFCMONETARYMEASURE(";
        writeAttribute(selectData->getIfcMonetaryMeasure());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcDateTimeSelect(IfcDateTimeSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcDateTimeSelect::IFCCALENDARDATE:
        writeAttribute(selectData->getIfcCalendarDate());
        break;
    case IfcDateTimeSelect::IFCLOCALTIME:
        writeAttribute(selectData->getIfcLocalTime());
        break;
    case IfcDateTimeSelect::IFCDATEANDTIME:
        writeAttribute(selectData->getIfcDateAndTime());
        break;
        }
}

void SPFWriter::writeIfcAppliedValueRelationship(IfcAppliedValueRelationship *ptr) {
    if (Step::isUnset(ptr->getComponentOfTotal())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getComponentOfTotal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getComponents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcAppliedValue > >::iterator step_it0 = (ptr->getComponents()).begin();
            if ((ptr->getComponents()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getComponents()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getArithmeticOperator())) {
        m_out << "$";
    }
    else {
        writeIfcArithmeticOperatorEnum(ptr->getArithmeticOperator());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcArithmeticOperatorEnum(IfcArithmeticOperatorEnum enumData) {
    switch(enumData) {
    case IfcArithmeticOperatorEnum_ADD:
        m_out << ".ADD.";
        break;
    case IfcArithmeticOperatorEnum_DIVIDE:
        m_out << ".DIVIDE.";
        break;
    case IfcArithmeticOperatorEnum_MULTIPLY:
        m_out << ".MULTIPLY.";
        break;
    case IfcArithmeticOperatorEnum_SUBTRACT:
        m_out << ".SUBTRACT.";
        break;
        }
}

void SPFWriter::writeIfcApproval(IfcApproval *ptr) {
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApprovalDateTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getApprovalDateTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApprovalStatus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApprovalStatus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApprovalLevel())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApprovalLevel());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApprovalQualifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApprovalQualifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIdentifier());
    }
}

void SPFWriter::writeIfcApprovalActorRelationship(IfcApprovalActorRelationship *ptr) {
    if (Step::isUnset(ptr->getActor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getActor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApproval())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApproval());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRole())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRole());
    }
}

void SPFWriter::writeIfcApprovalPropertyRelationship(IfcApprovalPropertyRelationship *ptr) {
    if (Step::isUnset(ptr->getApprovedProperties())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProperty > >::iterator step_it0 = (ptr->getApprovedProperties()).begin();
            if ((ptr->getApprovedProperties()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getApprovedProperties()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApproval())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApproval());
    }
}

void SPFWriter::writeIfcApprovalRelationship(IfcApprovalRelationship *ptr) {
    if (Step::isUnset(ptr->getRelatedApproval())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedApproval());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingApproval())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingApproval());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcArbitraryClosedProfileDef(IfcArbitraryClosedProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOuterCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuterCurve());
    }
}

void SPFWriter::writeIfcProfileTypeEnum(IfcProfileTypeEnum enumData) {
    switch(enumData) {
    case IfcProfileTypeEnum_CURVE:
        m_out << ".CURVE.";
        break;
    case IfcProfileTypeEnum_AREA:
        m_out << ".AREA.";
        break;
        }
}

void SPFWriter::writeIfcArbitraryOpenProfileDef(IfcArbitraryOpenProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurve());
    }
}

void SPFWriter::writeIfcArbitraryProfileDefWithVoids(IfcArbitraryProfileDefWithVoids *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOuterCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuterCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInnerCurves())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcCurve > >::iterator step_it0 = (ptr->getInnerCurves()).begin();
            if ((ptr->getInnerCurves()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getInnerCurves()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcAsset(IfcAsset *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAssetID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAssetID());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOriginalValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOriginalValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurrentValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurrentValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTotalReplacementCost())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTotalReplacementCost());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwner())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getOwner());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUser())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getUser());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResponsiblePerson())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResponsiblePerson());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIncorporationDate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIncorporationDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepreciatedValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepreciatedValue());
    }
}

void SPFWriter::writeIfcAsymmetricIShapeProfileDef(IfcAsymmetricIShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTopFlangeWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTopFlangeWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTopFlangeThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTopFlangeThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTopFlangeFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTopFlangeFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
}

void SPFWriter::writeIfcAxis1Placement(IfcAxis1Placement *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis());
    }
}

void SPFWriter::writeIfcAxis2Placement2D(IfcAxis2Placement2D *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRefDirection());
    }
}

void SPFWriter::writeIfcAxis2Placement3D(IfcAxis2Placement3D *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRefDirection());
    }
}

void SPFWriter::writeIfcBSplineCurve(IfcBSplineCurve *ptr) {
    if (Step::isUnset(ptr->getDegree())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDegree());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getControlPointsList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCartesianPoint > >::iterator step_it0 = (ptr->getControlPointsList()).begin();
            if ((ptr->getControlPointsList()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getControlPointsList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCurveForm())) {
        m_out << "$";
    }
    else {
        writeIfcBSplineCurveForm(ptr->getCurveForm());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getClosedCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getClosedCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
}

void SPFWriter::writeIfcBSplineCurveForm(IfcBSplineCurveForm enumData) {
    switch(enumData) {
    case IfcBSplineCurveForm_POLYLINE_FORM:
        m_out << ".POLYLINE_FORM.";
        break;
    case IfcBSplineCurveForm_CIRCULAR_ARC:
        m_out << ".CIRCULAR_ARC.";
        break;
    case IfcBSplineCurveForm_ELLIPTIC_ARC:
        m_out << ".ELLIPTIC_ARC.";
        break;
    case IfcBSplineCurveForm_PARABOLIC_ARC:
        m_out << ".PARABOLIC_ARC.";
        break;
    case IfcBSplineCurveForm_HYPERBOLIC_ARC:
        m_out << ".HYPERBOLIC_ARC.";
        break;
    case IfcBSplineCurveForm_UNSPECIFIED:
        m_out << ".UNSPECIFIED.";
        break;
        }
}

void SPFWriter::writeIfcBeam(IfcBeam *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcBeamType(IfcBeamType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcBeamTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcBeamTypeEnum(IfcBeamTypeEnum enumData) {
    switch(enumData) {
    case IfcBeamTypeEnum_BEAM:
        m_out << ".BEAM.";
        break;
    case IfcBeamTypeEnum_JOIST:
        m_out << ".JOIST.";
        break;
    case IfcBeamTypeEnum_LINTEL:
        m_out << ".LINTEL.";
        break;
    case IfcBeamTypeEnum_T_BEAM:
        m_out << ".T_BEAM.";
        break;
    case IfcBeamTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcBeamTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcBezierCurve(IfcBezierCurve *ptr) {
    if (Step::isUnset(ptr->getDegree())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDegree());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getControlPointsList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCartesianPoint > >::iterator step_it0 = (ptr->getControlPointsList()).begin();
            if ((ptr->getControlPointsList()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getControlPointsList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCurveForm())) {
        m_out << "$";
    }
    else {
        writeIfcBSplineCurveForm(ptr->getCurveForm());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getClosedCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getClosedCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
}

void SPFWriter::writeIfcBlobTexture(IfcBlobTexture *ptr) {
    if (Step::isUnset(ptr->getRepeatS())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatS());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepeatT())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatT());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTextureType())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceTextureEnum(ptr->getTextureType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextureTransform())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextureTransform());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRasterFormat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRasterFormat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRasterCode())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRasterCode());
    }
}

void SPFWriter::writeIfcSurfaceTextureEnum(IfcSurfaceTextureEnum enumData) {
    switch(enumData) {
    case IfcSurfaceTextureEnum_BUMP:
        m_out << ".BUMP.";
        break;
    case IfcSurfaceTextureEnum_OPACITY:
        m_out << ".OPACITY.";
        break;
    case IfcSurfaceTextureEnum_REFLECTION:
        m_out << ".REFLECTION.";
        break;
    case IfcSurfaceTextureEnum_SELFILLUMINATION:
        m_out << ".SELFILLUMINATION.";
        break;
    case IfcSurfaceTextureEnum_SHININESS:
        m_out << ".SHININESS.";
        break;
    case IfcSurfaceTextureEnum_SPECULAR:
        m_out << ".SPECULAR.";
        break;
    case IfcSurfaceTextureEnum_TEXTURE:
        m_out << ".TEXTURE.";
        break;
    case IfcSurfaceTextureEnum_TRANSPARENCYMAP:
        m_out << ".TRANSPARENCYMAP.";
        break;
    case IfcSurfaceTextureEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcBlock(IfcBlock *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getXLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getXLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getZLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getZLength());
    }
}

void SPFWriter::writeIfcBoilerType(IfcBoilerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcBoilerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcBoilerTypeEnum(IfcBoilerTypeEnum enumData) {
    switch(enumData) {
    case IfcBoilerTypeEnum_WATER:
        m_out << ".WATER.";
        break;
    case IfcBoilerTypeEnum_STEAM:
        m_out << ".STEAM.";
        break;
    case IfcBoilerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcBoilerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcBooleanClippingResult(IfcBooleanClippingResult *ptr) {
    if (Step::isUnsetEnum(ptr->getOperator())) {
        m_out << "$";
    }
    else {
        writeIfcBooleanOperator(ptr->getOperator());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFirstOperand())) {
        m_out << "$";
    }
    else {
        writeIfcBooleanOperand(ptr->getFirstOperand());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondOperand())) {
        m_out << "$";
    }
    else {
        writeIfcBooleanOperand(ptr->getSecondOperand());
    }
}

void SPFWriter::writeIfcBooleanOperator(IfcBooleanOperator enumData) {
    switch(enumData) {
    case IfcBooleanOperator_UNION:
        m_out << ".UNION.";
        break;
    case IfcBooleanOperator_INTERSECTION:
        m_out << ".INTERSECTION.";
        break;
    case IfcBooleanOperator_DIFFERENCE:
        m_out << ".DIFFERENCE.";
        break;
        }
}

void SPFWriter::writeIfcBooleanOperand(IfcBooleanOperand *selectData) {
    switch(selectData->currentType()) {
    case IfcBooleanOperand::IFCSOLIDMODEL:
        writeAttribute(selectData->getIfcSolidModel());
        break;
    case IfcBooleanOperand::IFCHALFSPACESOLID:
        writeAttribute(selectData->getIfcHalfSpaceSolid());
        break;
    case IfcBooleanOperand::IFCBOOLEANRESULT:
        writeAttribute(selectData->getIfcBooleanResult());
        break;
    case IfcBooleanOperand::IFCCSGPRIMITIVE3D:
        writeAttribute(selectData->getIfcCsgPrimitive3D());
        break;
        }
}

void SPFWriter::writeIfcBooleanResult(IfcBooleanResult *ptr) {
    if (Step::isUnsetEnum(ptr->getOperator())) {
        m_out << "$";
    }
    else {
        writeIfcBooleanOperator(ptr->getOperator());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFirstOperand())) {
        m_out << "$";
    }
    else {
        writeIfcBooleanOperand(ptr->getFirstOperand());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondOperand())) {
        m_out << "$";
    }
    else {
        writeIfcBooleanOperand(ptr->getSecondOperand());
    }
}

void SPFWriter::writeIfcBoundaryCondition(IfcBoundaryCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcBoundaryEdgeCondition(IfcBoundaryEdgeCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessByLengthX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessByLengthX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessByLengthY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessByLengthY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessByLengthZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessByLengthZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessByLengthX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessByLengthX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessByLengthY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessByLengthY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessByLengthZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessByLengthZ());
    }
}

void SPFWriter::writeIfcBoundaryFaceCondition(IfcBoundaryFaceCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessByAreaX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessByAreaX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessByAreaY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessByAreaY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessByAreaZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessByAreaZ());
    }
}

void SPFWriter::writeIfcBoundaryNodeCondition(IfcBoundaryNodeCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessZ());
    }
}

void SPFWriter::writeIfcBoundaryNodeConditionWarping(IfcBoundaryNodeConditionWarping *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearStiffnessZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearStiffnessZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalStiffnessZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalStiffnessZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWarpingStiffness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWarpingStiffness());
    }
}

void SPFWriter::writeIfcBoundedCurve(IfcBoundedCurve *ptr) {
}

void SPFWriter::writeIfcBoundedSurface(IfcBoundedSurface *ptr) {
}

void SPFWriter::writeIfcBoundingBox(IfcBoundingBox *ptr) {
    if (Step::isUnset(ptr->getCorner())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCorner());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getXDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getXDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getZDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getZDim());
    }
}

void SPFWriter::writeIfcBoxedHalfSpace(IfcBoxedHalfSpace *ptr) {
    if (Step::isUnset(ptr->getBaseSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAgreementFlag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAgreementFlag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEnclosure())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEnclosure());
    }
}

void SPFWriter::writeIfcBuilding(IfcBuilding *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElevationOfRefHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElevationOfRefHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElevationOfTerrain())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElevationOfTerrain());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBuildingAddress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBuildingAddress());
    }
}

void SPFWriter::writeIfcElementCompositionEnum(IfcElementCompositionEnum enumData) {
    switch(enumData) {
    case IfcElementCompositionEnum_COMPLEX:
        m_out << ".COMPLEX.";
        break;
    case IfcElementCompositionEnum_ELEMENT:
        m_out << ".ELEMENT.";
        break;
    case IfcElementCompositionEnum_PARTIAL:
        m_out << ".PARTIAL.";
        break;
        }
}

void SPFWriter::writeIfcBuildingElement(IfcBuildingElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcBuildingElementPart(IfcBuildingElementPart *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcBuildingElementProxy(IfcBuildingElementProxy *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
}

void SPFWriter::writeIfcBuildingElementProxyType(IfcBuildingElementProxyType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcBuildingElementProxyTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcBuildingElementProxyTypeEnum(IfcBuildingElementProxyTypeEnum enumData) {
    switch(enumData) {
    case IfcBuildingElementProxyTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcBuildingElementProxyTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcBuildingElementType(IfcBuildingElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcBuildingStorey(IfcBuildingStorey *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElevation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElevation());
    }
}

void SPFWriter::writeIfcCShapeProfileDef(IfcCShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWallThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWallThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getGirth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGirth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInternalFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInternalFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInX());
    }
}

void SPFWriter::writeIfcCableCarrierFittingType(IfcCableCarrierFittingType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCableCarrierFittingTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCableCarrierFittingTypeEnum(IfcCableCarrierFittingTypeEnum enumData) {
    switch(enumData) {
    case IfcCableCarrierFittingTypeEnum_BEND:
        m_out << ".BEND.";
        break;
    case IfcCableCarrierFittingTypeEnum_CROSS:
        m_out << ".CROSS.";
        break;
    case IfcCableCarrierFittingTypeEnum_REDUCER:
        m_out << ".REDUCER.";
        break;
    case IfcCableCarrierFittingTypeEnum_TEE:
        m_out << ".TEE.";
        break;
    case IfcCableCarrierFittingTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCableCarrierFittingTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCableCarrierSegmentType(IfcCableCarrierSegmentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCableCarrierSegmentTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCableCarrierSegmentTypeEnum(IfcCableCarrierSegmentTypeEnum enumData) {
    switch(enumData) {
    case IfcCableCarrierSegmentTypeEnum_CABLELADDERSEGMENT:
        m_out << ".CABLELADDERSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_CABLETRAYSEGMENT:
        m_out << ".CABLETRAYSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_CABLETRUNKINGSEGMENT:
        m_out << ".CABLETRUNKINGSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_CONDUITSEGMENT:
        m_out << ".CONDUITSEGMENT.";
        break;
    case IfcCableCarrierSegmentTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCableCarrierSegmentTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCableSegmentType(IfcCableSegmentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCableSegmentTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCableSegmentTypeEnum(IfcCableSegmentTypeEnum enumData) {
    switch(enumData) {
    case IfcCableSegmentTypeEnum_CABLESEGMENT:
        m_out << ".CABLESEGMENT.";
        break;
    case IfcCableSegmentTypeEnum_CONDUCTORSEGMENT:
        m_out << ".CONDUCTORSEGMENT.";
        break;
    case IfcCableSegmentTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCableSegmentTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCalendarDate(IfcCalendarDate *ptr) {
    if (Step::isUnset(ptr->getDayComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDayComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMonthComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMonthComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYearComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYearComponent());
    }
}

void SPFWriter::writeIfcCartesianPoint(IfcCartesianPoint *ptr) {
    if (Step::isUnset(ptr->getCoordinates())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLengthMeasure >::iterator step_it0 = (ptr->getCoordinates()).begin();
            if ((ptr->getCoordinates()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getCoordinates()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcCartesianTransformationOperator(IfcCartesianTransformationOperator *ptr) {
    if (Step::isUnset(ptr->getAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocalOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocalOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale());
    }
}

void SPFWriter::writeIfcCartesianTransformationOperator2D(IfcCartesianTransformationOperator2D *ptr) {
    if (Step::isUnset(ptr->getAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocalOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocalOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale());
    }
}

void SPFWriter::writeIfcCartesianTransformationOperator2DnonUniform(IfcCartesianTransformationOperator2DnonUniform *ptr) {
    if (Step::isUnset(ptr->getAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocalOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocalOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale2());
    }
}

void SPFWriter::writeIfcCartesianTransformationOperator3D(IfcCartesianTransformationOperator3D *ptr) {
    if (Step::isUnset(ptr->getAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocalOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocalOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis3())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis3());
    }
}

void SPFWriter::writeIfcCartesianTransformationOperator3DnonUniform(IfcCartesianTransformationOperator3DnonUniform *ptr) {
    if (Step::isUnset(ptr->getAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocalOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocalOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis3())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis3());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScale3())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScale3());
    }
}

void SPFWriter::writeIfcCenterLineProfileDef(IfcCenterLineProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThickness());
    }
}

void SPFWriter::writeIfcChamferEdgeFeature(IfcChamferEdgeFeature *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFeatureLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFeatureLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeight());
    }
}

void SPFWriter::writeIfcChillerType(IfcChillerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcChillerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcChillerTypeEnum(IfcChillerTypeEnum enumData) {
    switch(enumData) {
    case IfcChillerTypeEnum_AIRCOOLED:
        m_out << ".AIRCOOLED.";
        break;
    case IfcChillerTypeEnum_WATERCOOLED:
        m_out << ".WATERCOOLED.";
        break;
    case IfcChillerTypeEnum_HEATRECOVERY:
        m_out << ".HEATRECOVERY.";
        break;
    case IfcChillerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcChillerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCircle(IfcCircle *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
}

void SPFWriter::writeIfcAxis2Placement(IfcAxis2Placement *selectData) {
    switch(selectData->currentType()) {
    case IfcAxis2Placement::IFCAXIS2PLACEMENT2D:
        writeAttribute(selectData->getIfcAxis2Placement2D());
        break;
    case IfcAxis2Placement::IFCAXIS2PLACEMENT3D:
        writeAttribute(selectData->getIfcAxis2Placement3D());
        break;
        }
}

void SPFWriter::writeIfcCircleHollowProfileDef(IfcCircleHollowProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWallThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWallThickness());
    }
}

void SPFWriter::writeIfcCircleProfileDef(IfcCircleProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
}

void SPFWriter::writeIfcClassification(IfcClassification *ptr) {
    if (Step::isUnset(ptr->getSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEditionDate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEditionDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcClassificationItem(IfcClassificationItem *ptr) {
    if (Step::isUnset(ptr->getNotation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNotation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemOf())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemOf());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTitle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTitle());
    }
}

void SPFWriter::writeIfcClassificationItemRelationship(IfcClassificationItemRelationship *ptr) {
    if (Step::isUnset(ptr->getRelatingItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcClassificationItem > >::iterator step_it0 = (ptr->getRelatedItems()).begin();
            if ((ptr->getRelatedItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcClassificationNotation(IfcClassificationNotation *ptr) {
    if (Step::isUnset(ptr->getNotationFacets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcClassificationNotationFacet > >::iterator step_it0 = (ptr->getNotationFacets()).begin();
            if ((ptr->getNotationFacets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getNotationFacets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcClassificationNotationFacet(IfcClassificationNotationFacet *ptr) {
    if (Step::isUnset(ptr->getNotationValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNotationValue());
    }
}

void SPFWriter::writeIfcClassificationReference(IfcClassificationReference *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getReferencedSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getReferencedSource());
    }
}

void SPFWriter::writeIfcClosedShell(IfcClosedShell *ptr) {
    if (Step::isUnset(ptr->getCfsFaces())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFace > >::iterator step_it0 = (ptr->getCfsFaces()).begin();
            if ((ptr->getCfsFaces()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCfsFaces()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcCoilType(IfcCoilType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCoilTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCoilTypeEnum(IfcCoilTypeEnum enumData) {
    switch(enumData) {
    case IfcCoilTypeEnum_DXCOOLINGCOIL:
        m_out << ".DXCOOLINGCOIL.";
        break;
    case IfcCoilTypeEnum_WATERCOOLINGCOIL:
        m_out << ".WATERCOOLINGCOIL.";
        break;
    case IfcCoilTypeEnum_STEAMHEATINGCOIL:
        m_out << ".STEAMHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_WATERHEATINGCOIL:
        m_out << ".WATERHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_ELECTRICHEATINGCOIL:
        m_out << ".ELECTRICHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_GASHEATINGCOIL:
        m_out << ".GASHEATINGCOIL.";
        break;
    case IfcCoilTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCoilTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcColourRgb(IfcColourRgb *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRed())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRed());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getGreen())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGreen());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBlue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBlue());
    }
}

void SPFWriter::writeIfcColourSpecification(IfcColourSpecification *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcColumn(IfcColumn *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcColumnType(IfcColumnType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcColumnTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcColumnTypeEnum(IfcColumnTypeEnum enumData) {
    switch(enumData) {
    case IfcColumnTypeEnum_COLUMN:
        m_out << ".COLUMN.";
        break;
    case IfcColumnTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcColumnTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcComplexProperty(IfcComplexProperty *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUsageName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUsageName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasProperties())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProperty > >::iterator step_it0 = (ptr->getHasProperties()).begin();
            if ((ptr->getHasProperties()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasProperties()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcCompositeCurve(IfcCompositeCurve *ptr) {
    if (Step::isUnset(ptr->getSegments())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCompositeCurveSegment > >::iterator step_it0 = (ptr->getSegments()).begin();
            if ((ptr->getSegments()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSegments()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
}

void SPFWriter::writeIfcCompositeCurveSegment(IfcCompositeCurveSegment *ptr) {
    if (Step::isUnsetEnum(ptr->getTransition())) {
        m_out << "$";
    }
    else {
        writeIfcTransitionCode(ptr->getTransition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSameSense())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSameSense());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getParentCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getParentCurve());
    }
}

void SPFWriter::writeIfcTransitionCode(IfcTransitionCode enumData) {
    switch(enumData) {
    case IfcTransitionCode_DISCONTINUOUS:
        m_out << ".DISCONTINUOUS.";
        break;
    case IfcTransitionCode_CONTINUOUS:
        m_out << ".CONTINUOUS.";
        break;
    case IfcTransitionCode_CONTSAMEGRADIENT:
        m_out << ".CONTSAMEGRADIENT.";
        break;
    case IfcTransitionCode_CONTSAMEGRADIENTSAMECURVATURE:
        m_out << ".CONTSAMEGRADIENTSAMECURVATURE.";
        break;
        }
}

void SPFWriter::writeIfcCompositeProfileDef(IfcCompositeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfiles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProfileDef > >::iterator step_it0 = (ptr->getProfiles()).begin();
            if ((ptr->getProfiles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getProfiles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLabel())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLabel());
    }
}

void SPFWriter::writeIfcCompressorType(IfcCompressorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCompressorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCompressorTypeEnum(IfcCompressorTypeEnum enumData) {
    switch(enumData) {
    case IfcCompressorTypeEnum_DYNAMIC:
        m_out << ".DYNAMIC.";
        break;
    case IfcCompressorTypeEnum_RECIPROCATING:
        m_out << ".RECIPROCATING.";
        break;
    case IfcCompressorTypeEnum_ROTARY:
        m_out << ".ROTARY.";
        break;
    case IfcCompressorTypeEnum_SCROLL:
        m_out << ".SCROLL.";
        break;
    case IfcCompressorTypeEnum_TROCHOIDAL:
        m_out << ".TROCHOIDAL.";
        break;
    case IfcCompressorTypeEnum_SINGLESTAGE:
        m_out << ".SINGLESTAGE.";
        break;
    case IfcCompressorTypeEnum_BOOSTER:
        m_out << ".BOOSTER.";
        break;
    case IfcCompressorTypeEnum_OPENTYPE:
        m_out << ".OPENTYPE.";
        break;
    case IfcCompressorTypeEnum_HERMETIC:
        m_out << ".HERMETIC.";
        break;
    case IfcCompressorTypeEnum_SEMIHERMETIC:
        m_out << ".SEMIHERMETIC.";
        break;
    case IfcCompressorTypeEnum_WELDEDSHELLHERMETIC:
        m_out << ".WELDEDSHELLHERMETIC.";
        break;
    case IfcCompressorTypeEnum_ROLLINGPISTON:
        m_out << ".ROLLINGPISTON.";
        break;
    case IfcCompressorTypeEnum_ROTARYVANE:
        m_out << ".ROTARYVANE.";
        break;
    case IfcCompressorTypeEnum_SINGLESCREW:
        m_out << ".SINGLESCREW.";
        break;
    case IfcCompressorTypeEnum_TWINSCREW:
        m_out << ".TWINSCREW.";
        break;
    case IfcCompressorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCompressorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCondenserType(IfcCondenserType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCondenserTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCondenserTypeEnum(IfcCondenserTypeEnum enumData) {
    switch(enumData) {
    case IfcCondenserTypeEnum_WATERCOOLEDSHELLTUBE:
        m_out << ".WATERCOOLEDSHELLTUBE.";
        break;
    case IfcCondenserTypeEnum_WATERCOOLEDSHELLCOIL:
        m_out << ".WATERCOOLEDSHELLCOIL.";
        break;
    case IfcCondenserTypeEnum_WATERCOOLEDTUBEINTUBE:
        m_out << ".WATERCOOLEDTUBEINTUBE.";
        break;
    case IfcCondenserTypeEnum_WATERCOOLEDBRAZEDPLATE:
        m_out << ".WATERCOOLEDBRAZEDPLATE.";
        break;
    case IfcCondenserTypeEnum_AIRCOOLED:
        m_out << ".AIRCOOLED.";
        break;
    case IfcCondenserTypeEnum_EVAPORATIVECOOLED:
        m_out << ".EVAPORATIVECOOLED.";
        break;
    case IfcCondenserTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCondenserTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCondition(IfcCondition *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcConditionCriterion(IfcConditionCriterion *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCriterion())) {
        m_out << "$";
    }
    else {
        writeIfcConditionCriterionSelect(ptr->getCriterion());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCriterionDateTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCriterionDateTime());
    }
}

void SPFWriter::writeIfcConditionCriterionSelect(IfcConditionCriterionSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcConditionCriterionSelect::IFCLABEL:
        m_out << "IFCLABEL(";
        writeAttribute(selectData->getIfcLabel());
        m_out << ")";
        break;
    case IfcConditionCriterionSelect::IFCMEASUREWITHUNIT:
        writeAttribute(selectData->getIfcMeasureWithUnit());
        break;
        }
}

void SPFWriter::writeIfcConic(IfcConic *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPosition());
    }
}

void SPFWriter::writeIfcConnectedFaceSet(IfcConnectedFaceSet *ptr) {
    if (Step::isUnset(ptr->getCfsFaces())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFace > >::iterator step_it0 = (ptr->getCfsFaces()).begin();
            if ((ptr->getCfsFaces()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCfsFaces()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcConnectionCurveGeometry(IfcConnectionCurveGeometry *ptr) {
    if (Step::isUnset(ptr->getCurveOnRelatingElement())) {
        m_out << "$";
    }
    else {
        writeIfcCurveOrEdgeCurve(ptr->getCurveOnRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurveOnRelatedElement())) {
        m_out << "$";
    }
    else {
        writeIfcCurveOrEdgeCurve(ptr->getCurveOnRelatedElement());
    }
}

void SPFWriter::writeIfcCurveOrEdgeCurve(IfcCurveOrEdgeCurve *selectData) {
    switch(selectData->currentType()) {
    case IfcCurveOrEdgeCurve::IFCBOUNDEDCURVE:
        writeAttribute(selectData->getIfcBoundedCurve());
        break;
    case IfcCurveOrEdgeCurve::IFCEDGECURVE:
        writeAttribute(selectData->getIfcEdgeCurve());
        break;
        }
}

void SPFWriter::writeIfcConnectionGeometry(IfcConnectionGeometry *ptr) {
}

void SPFWriter::writeIfcConnectionPointEccentricity(IfcConnectionPointEccentricity *ptr) {
    if (Step::isUnset(ptr->getPointOnRelatingElement())) {
        m_out << "$";
    }
    else {
        writeIfcPointOrVertexPoint(ptr->getPointOnRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPointOnRelatedElement())) {
        m_out << "$";
    }
    else {
        writeIfcPointOrVertexPoint(ptr->getPointOnRelatedElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEccentricityInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEccentricityInX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEccentricityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEccentricityInY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEccentricityInZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEccentricityInZ());
    }
}

void SPFWriter::writeIfcPointOrVertexPoint(IfcPointOrVertexPoint *selectData) {
    switch(selectData->currentType()) {
    case IfcPointOrVertexPoint::IFCPOINT:
        writeAttribute(selectData->getIfcPoint());
        break;
    case IfcPointOrVertexPoint::IFCVERTEXPOINT:
        writeAttribute(selectData->getIfcVertexPoint());
        break;
        }
}

void SPFWriter::writeIfcConnectionPointGeometry(IfcConnectionPointGeometry *ptr) {
    if (Step::isUnset(ptr->getPointOnRelatingElement())) {
        m_out << "$";
    }
    else {
        writeIfcPointOrVertexPoint(ptr->getPointOnRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPointOnRelatedElement())) {
        m_out << "$";
    }
    else {
        writeIfcPointOrVertexPoint(ptr->getPointOnRelatedElement());
    }
}

void SPFWriter::writeIfcConnectionPortGeometry(IfcConnectionPortGeometry *ptr) {
    if (Step::isUnset(ptr->getLocationAtRelatingElement())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getLocationAtRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocationAtRelatedElement())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getLocationAtRelatedElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileOfPort())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileOfPort());
    }
}

void SPFWriter::writeIfcConnectionSurfaceGeometry(IfcConnectionSurfaceGeometry *ptr) {
    if (Step::isUnset(ptr->getSurfaceOnRelatingElement())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceOrFaceSurface(ptr->getSurfaceOnRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSurfaceOnRelatedElement())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceOrFaceSurface(ptr->getSurfaceOnRelatedElement());
    }
}

void SPFWriter::writeIfcSurfaceOrFaceSurface(IfcSurfaceOrFaceSurface *selectData) {
    switch(selectData->currentType()) {
    case IfcSurfaceOrFaceSurface::IFCSURFACE:
        writeAttribute(selectData->getIfcSurface());
        break;
    case IfcSurfaceOrFaceSurface::IFCFACESURFACE:
        writeAttribute(selectData->getIfcFaceSurface());
        break;
    case IfcSurfaceOrFaceSurface::IFCFACEBASEDSURFACEMODEL:
        writeAttribute(selectData->getIfcFaceBasedSurfaceModel());
        break;
        }
}

void SPFWriter::writeIfcConstraint(IfcConstraint *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConstraintGrade())) {
        m_out << "$";
    }
    else {
        writeIfcConstraintEnum(ptr->getConstraintGrade());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConstraintSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConstraintSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreatingActor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getCreatingActor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCreationTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedGrade());
    }
}

void SPFWriter::writeIfcConstraintEnum(IfcConstraintEnum enumData) {
    switch(enumData) {
    case IfcConstraintEnum_HARD:
        m_out << ".HARD.";
        break;
    case IfcConstraintEnum_SOFT:
        m_out << ".SOFT.";
        break;
    case IfcConstraintEnum_ADVISORY:
        m_out << ".ADVISORY.";
        break;
    case IfcConstraintEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcConstraintEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcConstraintAggregationRelationship(IfcConstraintAggregationRelationship *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingConstraint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingConstraint());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedConstraints())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcConstraint > >::iterator step_it0 = (ptr->getRelatedConstraints()).begin();
            if ((ptr->getRelatedConstraints()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedConstraints()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getLogicalAggregator())) {
        m_out << "$";
    }
    else {
        writeIfcLogicalOperatorEnum(ptr->getLogicalAggregator());
    }
}

void SPFWriter::writeIfcLogicalOperatorEnum(IfcLogicalOperatorEnum enumData) {
    switch(enumData) {
    case IfcLogicalOperatorEnum_LOGICALAND:
        m_out << ".LOGICALAND.";
        break;
    case IfcLogicalOperatorEnum_LOGICALOR:
        m_out << ".LOGICALOR.";
        break;
        }
}

void SPFWriter::writeIfcConstraintClassificationRelationship(IfcConstraintClassificationRelationship *ptr) {
    if (Step::isUnset(ptr->getClassifiedConstraint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getClassifiedConstraint());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedClassifications())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcClassificationNotationSelect > >::iterator step_it0 = (ptr->getRelatedClassifications()).begin();
            if ((ptr->getRelatedClassifications()).size()) {
                writeIfcClassificationNotationSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedClassifications()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcClassificationNotationSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcClassificationNotationSelect(IfcClassificationNotationSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcClassificationNotationSelect::IFCCLASSIFICATIONNOTATION:
        writeAttribute(selectData->getIfcClassificationNotation());
        break;
    case IfcClassificationNotationSelect::IFCCLASSIFICATIONREFERENCE:
        writeAttribute(selectData->getIfcClassificationReference());
        break;
        }
}

void SPFWriter::writeIfcConstraintRelationship(IfcConstraintRelationship *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingConstraint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingConstraint());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedConstraints())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcConstraint > >::iterator step_it0 = (ptr->getRelatedConstraints()).begin();
            if ((ptr->getRelatedConstraints()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedConstraints()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcConstructionEquipmentResource(IfcConstructionEquipmentResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
}

void SPFWriter::writeIfcResourceConsumptionEnum(IfcResourceConsumptionEnum enumData) {
    switch(enumData) {
    case IfcResourceConsumptionEnum_CONSUMED:
        m_out << ".CONSUMED.";
        break;
    case IfcResourceConsumptionEnum_PARTIALLYCONSUMED:
        m_out << ".PARTIALLYCONSUMED.";
        break;
    case IfcResourceConsumptionEnum_NOTCONSUMED:
        m_out << ".NOTCONSUMED.";
        break;
    case IfcResourceConsumptionEnum_OCCUPIED:
        m_out << ".OCCUPIED.";
        break;
    case IfcResourceConsumptionEnum_PARTIALLYOCCUPIED:
        m_out << ".PARTIALLYOCCUPIED.";
        break;
    case IfcResourceConsumptionEnum_NOTOCCUPIED:
        m_out << ".NOTOCCUPIED.";
        break;
    case IfcResourceConsumptionEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcResourceConsumptionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcConstructionMaterialResource(IfcConstructionMaterialResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSuppliers())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcActorSelect > >::iterator step_it0 = (ptr->getSuppliers()).begin();
            if ((ptr->getSuppliers()).size()) {
                writeIfcActorSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSuppliers()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcActorSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUsageRatio())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUsageRatio());
    }
}

void SPFWriter::writeIfcConstructionProductResource(IfcConstructionProductResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
}

void SPFWriter::writeIfcConstructionResource(IfcConstructionResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
}

void SPFWriter::writeIfcContextDependentUnit(IfcContextDependentUnit *ptr) {
    if (Step::isUnset(ptr->getDimensions())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDimensions());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getUnitType())) {
        m_out << "$";
    }
    else {
        writeIfcUnitEnum(ptr->getUnitType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcUnitEnum(IfcUnitEnum enumData) {
    switch(enumData) {
    case IfcUnitEnum_ABSORBEDDOSEUNIT:
        m_out << ".ABSORBEDDOSEUNIT.";
        break;
    case IfcUnitEnum_AMOUNTOFSUBSTANCEUNIT:
        m_out << ".AMOUNTOFSUBSTANCEUNIT.";
        break;
    case IfcUnitEnum_AREAUNIT:
        m_out << ".AREAUNIT.";
        break;
    case IfcUnitEnum_DOSEEQUIVALENTUNIT:
        m_out << ".DOSEEQUIVALENTUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCAPACITANCEUNIT:
        m_out << ".ELECTRICCAPACITANCEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCHARGEUNIT:
        m_out << ".ELECTRICCHARGEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCONDUCTANCEUNIT:
        m_out << ".ELECTRICCONDUCTANCEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICCURRENTUNIT:
        m_out << ".ELECTRICCURRENTUNIT.";
        break;
    case IfcUnitEnum_ELECTRICRESISTANCEUNIT:
        m_out << ".ELECTRICRESISTANCEUNIT.";
        break;
    case IfcUnitEnum_ELECTRICVOLTAGEUNIT:
        m_out << ".ELECTRICVOLTAGEUNIT.";
        break;
    case IfcUnitEnum_ENERGYUNIT:
        m_out << ".ENERGYUNIT.";
        break;
    case IfcUnitEnum_FORCEUNIT:
        m_out << ".FORCEUNIT.";
        break;
    case IfcUnitEnum_FREQUENCYUNIT:
        m_out << ".FREQUENCYUNIT.";
        break;
    case IfcUnitEnum_ILLUMINANCEUNIT:
        m_out << ".ILLUMINANCEUNIT.";
        break;
    case IfcUnitEnum_INDUCTANCEUNIT:
        m_out << ".INDUCTANCEUNIT.";
        break;
    case IfcUnitEnum_LENGTHUNIT:
        m_out << ".LENGTHUNIT.";
        break;
    case IfcUnitEnum_LUMINOUSFLUXUNIT:
        m_out << ".LUMINOUSFLUXUNIT.";
        break;
    case IfcUnitEnum_LUMINOUSINTENSITYUNIT:
        m_out << ".LUMINOUSINTENSITYUNIT.";
        break;
    case IfcUnitEnum_MAGNETICFLUXDENSITYUNIT:
        m_out << ".MAGNETICFLUXDENSITYUNIT.";
        break;
    case IfcUnitEnum_MAGNETICFLUXUNIT:
        m_out << ".MAGNETICFLUXUNIT.";
        break;
    case IfcUnitEnum_MASSUNIT:
        m_out << ".MASSUNIT.";
        break;
    case IfcUnitEnum_PLANEANGLEUNIT:
        m_out << ".PLANEANGLEUNIT.";
        break;
    case IfcUnitEnum_POWERUNIT:
        m_out << ".POWERUNIT.";
        break;
    case IfcUnitEnum_PRESSUREUNIT:
        m_out << ".PRESSUREUNIT.";
        break;
    case IfcUnitEnum_RADIOACTIVITYUNIT:
        m_out << ".RADIOACTIVITYUNIT.";
        break;
    case IfcUnitEnum_SOLIDANGLEUNIT:
        m_out << ".SOLIDANGLEUNIT.";
        break;
    case IfcUnitEnum_THERMODYNAMICTEMPERATUREUNIT:
        m_out << ".THERMODYNAMICTEMPERATUREUNIT.";
        break;
    case IfcUnitEnum_TIMEUNIT:
        m_out << ".TIMEUNIT.";
        break;
    case IfcUnitEnum_VOLUMEUNIT:
        m_out << ".VOLUMEUNIT.";
        break;
    case IfcUnitEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcControl(IfcControl *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcControllerType(IfcControllerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcControllerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcControllerTypeEnum(IfcControllerTypeEnum enumData) {
    switch(enumData) {
    case IfcControllerTypeEnum_FLOATING:
        m_out << ".FLOATING.";
        break;
    case IfcControllerTypeEnum_PROPORTIONAL:
        m_out << ".PROPORTIONAL.";
        break;
    case IfcControllerTypeEnum_PROPORTIONALINTEGRAL:
        m_out << ".PROPORTIONALINTEGRAL.";
        break;
    case IfcControllerTypeEnum_PROPORTIONALINTEGRALDERIVATIVE:
        m_out << ".PROPORTIONALINTEGRALDERIVATIVE.";
        break;
    case IfcControllerTypeEnum_TIMEDTWOPOSITION:
        m_out << ".TIMEDTWOPOSITION.";
        break;
    case IfcControllerTypeEnum_TWOPOSITION:
        m_out << ".TWOPOSITION.";
        break;
    case IfcControllerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcControllerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcConversionBasedUnit(IfcConversionBasedUnit *ptr) {
    if (Step::isUnset(ptr->getDimensions())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDimensions());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getUnitType())) {
        m_out << "$";
    }
    else {
        writeIfcUnitEnum(ptr->getUnitType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConversionFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConversionFactor());
    }
}

void SPFWriter::writeIfcCooledBeamType(IfcCooledBeamType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCooledBeamTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCooledBeamTypeEnum(IfcCooledBeamTypeEnum enumData) {
    switch(enumData) {
    case IfcCooledBeamTypeEnum_ACTIVE:
        m_out << ".ACTIVE.";
        break;
    case IfcCooledBeamTypeEnum_PASSIVE:
        m_out << ".PASSIVE.";
        break;
    case IfcCooledBeamTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCooledBeamTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCoolingTowerType(IfcCoolingTowerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCoolingTowerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCoolingTowerTypeEnum(IfcCoolingTowerTypeEnum enumData) {
    switch(enumData) {
    case IfcCoolingTowerTypeEnum_NATURALDRAFT:
        m_out << ".NATURALDRAFT.";
        break;
    case IfcCoolingTowerTypeEnum_MECHANICALINDUCEDDRAFT:
        m_out << ".MECHANICALINDUCEDDRAFT.";
        break;
    case IfcCoolingTowerTypeEnum_MECHANICALFORCEDDRAFT:
        m_out << ".MECHANICALFORCEDDRAFT.";
        break;
    case IfcCoolingTowerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCoolingTowerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCoordinatedUniversalTimeOffset(IfcCoordinatedUniversalTimeOffset *ptr) {
    if (Step::isUnset(ptr->getHourOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHourOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinuteOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinuteOffset());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getSense())) {
        m_out << "$";
    }
    else {
        writeIfcAheadOrBehind(ptr->getSense());
    }
}

void SPFWriter::writeIfcAheadOrBehind(IfcAheadOrBehind enumData) {
    switch(enumData) {
    case IfcAheadOrBehind_AHEAD:
        m_out << ".AHEAD.";
        break;
    case IfcAheadOrBehind_BEHIND:
        m_out << ".BEHIND.";
        break;
        }
}

void SPFWriter::writeIfcCostItem(IfcCostItem *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcCostSchedule(IfcCostSchedule *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSubmittedBy())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getSubmittedBy());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPreparedBy())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getPreparedBy());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSubmittedOn())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getSubmittedOn());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStatus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStatus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTargetUsers())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcActorSelect > >::iterator step_it0 = (ptr->getTargetUsers()).begin();
            if ((ptr->getTargetUsers()).size()) {
                writeIfcActorSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTargetUsers()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcActorSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUpdateDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getUpdateDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getID());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCostScheduleTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCostScheduleTypeEnum(IfcCostScheduleTypeEnum enumData) {
    switch(enumData) {
    case IfcCostScheduleTypeEnum_BUDGET:
        m_out << ".BUDGET.";
        break;
    case IfcCostScheduleTypeEnum_COSTPLAN:
        m_out << ".COSTPLAN.";
        break;
    case IfcCostScheduleTypeEnum_ESTIMATE:
        m_out << ".ESTIMATE.";
        break;
    case IfcCostScheduleTypeEnum_TENDER:
        m_out << ".TENDER.";
        break;
    case IfcCostScheduleTypeEnum_PRICEDBILLOFQUANTITIES:
        m_out << ".PRICEDBILLOFQUANTITIES.";
        break;
    case IfcCostScheduleTypeEnum_UNPRICEDBILLOFQUANTITIES:
        m_out << ".UNPRICEDBILLOFQUANTITIES.";
        break;
    case IfcCostScheduleTypeEnum_SCHEDULEOFRATES:
        m_out << ".SCHEDULEOFRATES.";
        break;
    case IfcCostScheduleTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCostScheduleTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCostValue(IfcCostValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedValue())) {
        m_out << "$";
    }
    else {
        writeIfcAppliedValueSelect(ptr->getAppliedValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnitBasis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnitBasis());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getApplicableDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFixedUntilDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getFixedUntilDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCostType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCostType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCondition());
    }
}

void SPFWriter::writeIfcCovering(IfcCovering *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCoveringTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCoveringTypeEnum(IfcCoveringTypeEnum enumData) {
    switch(enumData) {
    case IfcCoveringTypeEnum_CEILING:
        m_out << ".CEILING.";
        break;
    case IfcCoveringTypeEnum_FLOORING:
        m_out << ".FLOORING.";
        break;
    case IfcCoveringTypeEnum_CLADDING:
        m_out << ".CLADDING.";
        break;
    case IfcCoveringTypeEnum_ROOFING:
        m_out << ".ROOFING.";
        break;
    case IfcCoveringTypeEnum_INSULATION:
        m_out << ".INSULATION.";
        break;
    case IfcCoveringTypeEnum_MEMBRANE:
        m_out << ".MEMBRANE.";
        break;
    case IfcCoveringTypeEnum_SLEEVING:
        m_out << ".SLEEVING.";
        break;
    case IfcCoveringTypeEnum_WRAPPING:
        m_out << ".WRAPPING.";
        break;
    case IfcCoveringTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCoveringTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCoveringType(IfcCoveringType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCoveringTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCraneRailAShapeProfileDef(IfcCraneRailAShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseWidth2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseWidth2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeadWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeadWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeadDepth2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeadDepth2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeadDepth3())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeadDepth3());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseWidth4())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseWidth4());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseDepth1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseDepth1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseDepth2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseDepth2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseDepth3())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseDepth3());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
}

void SPFWriter::writeIfcCraneRailFShapeProfileDef(IfcCraneRailFShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeadWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeadWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeadDepth2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeadDepth2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeadDepth3())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeadDepth3());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseDepth1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseDepth1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseDepth2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseDepth2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
}

void SPFWriter::writeIfcCrewResource(IfcCrewResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
}

void SPFWriter::writeIfcCsgPrimitive3D(IfcCsgPrimitive3D *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
}

void SPFWriter::writeIfcCsgSolid(IfcCsgSolid *ptr) {
    if (Step::isUnset(ptr->getTreeRootExpression())) {
        m_out << "$";
    }
    else {
        writeIfcCsgSelect(ptr->getTreeRootExpression());
    }
}

void SPFWriter::writeIfcCsgSelect(IfcCsgSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcCsgSelect::IFCBOOLEANRESULT:
        writeAttribute(selectData->getIfcBooleanResult());
        break;
    case IfcCsgSelect::IFCCSGPRIMITIVE3D:
        writeAttribute(selectData->getIfcCsgPrimitive3D());
        break;
        }
}

void SPFWriter::writeIfcCurrencyRelationship(IfcCurrencyRelationship *ptr) {
    if (Step::isUnset(ptr->getRelatingMonetaryUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingMonetaryUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedMonetaryUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedMonetaryUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExchangeRate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExchangeRate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRateDateTime())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRateDateTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRateSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRateSource());
    }
}

void SPFWriter::writeIfcCurtainWall(IfcCurtainWall *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcCurtainWallType(IfcCurtainWallType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcCurtainWallTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcCurtainWallTypeEnum(IfcCurtainWallTypeEnum enumData) {
    switch(enumData) {
    case IfcCurtainWallTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcCurtainWallTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcCurve(IfcCurve *ptr) {
}

void SPFWriter::writeIfcCurveBoundedPlane(IfcCurveBoundedPlane *ptr) {
    if (Step::isUnset(ptr->getBasisSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOuterBoundary())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuterBoundary());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInnerBoundaries())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcCurve > >::iterator step_it0 = (ptr->getInnerBoundaries()).begin();
            if ((ptr->getInnerBoundaries()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getInnerBoundaries()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcCurveStyle(IfcCurveStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurveFont())) {
        m_out << "$";
    }
    else {
        writeIfcCurveFontOrScaledCurveFontSelect(ptr->getCurveFont());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurveWidth())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getCurveWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurveColour())) {
        m_out << "$";
    }
    else {
        writeIfcColour(ptr->getCurveColour());
    }
}

void SPFWriter::writeIfcCurveFontOrScaledCurveFontSelect(IfcCurveFontOrScaledCurveFontSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcCurveFontOrScaledCurveFontSelect::IFCPREDEFINEDCURVEFONT:
        writeAttribute(selectData->getIfcPreDefinedCurveFont());
        break;
    case IfcCurveFontOrScaledCurveFontSelect::IFCCURVESTYLEFONT:
        writeAttribute(selectData->getIfcCurveStyleFont());
        break;
    case IfcCurveFontOrScaledCurveFontSelect::IFCCURVESTYLEFONTANDSCALING:
        writeAttribute(selectData->getIfcCurveStyleFontAndScaling());
        break;
        }
}

void SPFWriter::writeIfcSizeSelect(IfcSizeSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcSizeSelect::IFCRATIOMEASURE:
        m_out << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        m_out << ")";
        break;
    case IfcSizeSelect::IFCLENGTHMEASURE:
        m_out << "IFCLENGTHMEASURE(";
        writeAttribute(selectData->getIfcLengthMeasure());
        m_out << ")";
        break;
    case IfcSizeSelect::IFCDESCRIPTIVEMEASURE:
        m_out << "IFCDESCRIPTIVEMEASURE(";
        writeAttribute(selectData->getIfcDescriptiveMeasure());
        m_out << ")";
        break;
    case IfcSizeSelect::IFCPOSITIVELENGTHMEASURE:
        m_out << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        m_out << ")";
        break;
    case IfcSizeSelect::IFCNORMALISEDRATIOMEASURE:
        m_out << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        m_out << ")";
        break;
    case IfcSizeSelect::IFCPOSITIVERATIOMEASURE:
        m_out << "IFCPOSITIVERATIOMEASURE(";
        writeAttribute(selectData->getIfcPositiveRatioMeasure());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcColour(IfcColour *selectData) {
    switch(selectData->currentType()) {
    case IfcColour::IFCCOLOURSPECIFICATION:
        writeAttribute(selectData->getIfcColourSpecification());
        break;
    case IfcColour::IFCPREDEFINEDCOLOUR:
        writeAttribute(selectData->getIfcPreDefinedColour());
        break;
        }
}

void SPFWriter::writeIfcCurveStyleFont(IfcCurveStyleFont *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPatternList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCurveStyleFontPattern > >::iterator step_it0 = (ptr->getPatternList()).begin();
            if ((ptr->getPatternList()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getPatternList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcCurveStyleFontAndScaling(IfcCurveStyleFontAndScaling *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurveFont())) {
        m_out << "$";
    }
    else {
        writeIfcCurveStyleFontSelect(ptr->getCurveFont());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurveFontScaling())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurveFontScaling());
    }
}

void SPFWriter::writeIfcCurveStyleFontSelect(IfcCurveStyleFontSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcCurveStyleFontSelect::IFCPREDEFINEDCURVEFONT:
        writeAttribute(selectData->getIfcPreDefinedCurveFont());
        break;
    case IfcCurveStyleFontSelect::IFCCURVESTYLEFONT:
        writeAttribute(selectData->getIfcCurveStyleFont());
        break;
        }
}

void SPFWriter::writeIfcCurveStyleFontPattern(IfcCurveStyleFontPattern *ptr) {
    if (Step::isUnset(ptr->getVisibleSegmentLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVisibleSegmentLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInvisibleSegmentLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInvisibleSegmentLength());
    }
}

void SPFWriter::writeIfcDamperType(IfcDamperType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcDamperTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcDamperTypeEnum(IfcDamperTypeEnum enumData) {
    switch(enumData) {
    case IfcDamperTypeEnum_CONTROLDAMPER:
        m_out << ".CONTROLDAMPER.";
        break;
    case IfcDamperTypeEnum_FIREDAMPER:
        m_out << ".FIREDAMPER.";
        break;
    case IfcDamperTypeEnum_SMOKEDAMPER:
        m_out << ".SMOKEDAMPER.";
        break;
    case IfcDamperTypeEnum_FIRESMOKEDAMPER:
        m_out << ".FIRESMOKEDAMPER.";
        break;
    case IfcDamperTypeEnum_BACKDRAFTDAMPER:
        m_out << ".BACKDRAFTDAMPER.";
        break;
    case IfcDamperTypeEnum_RELIEFDAMPER:
        m_out << ".RELIEFDAMPER.";
        break;
    case IfcDamperTypeEnum_BLASTDAMPER:
        m_out << ".BLASTDAMPER.";
        break;
    case IfcDamperTypeEnum_GRAVITYDAMPER:
        m_out << ".GRAVITYDAMPER.";
        break;
    case IfcDamperTypeEnum_GRAVITYRELIEFDAMPER:
        m_out << ".GRAVITYRELIEFDAMPER.";
        break;
    case IfcDamperTypeEnum_BALANCINGDAMPER:
        m_out << ".BALANCINGDAMPER.";
        break;
    case IfcDamperTypeEnum_FUMEHOODEXHAUST:
        m_out << ".FUMEHOODEXHAUST.";
        break;
    case IfcDamperTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDamperTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDateAndTime(IfcDateAndTime *ptr) {
    if (Step::isUnset(ptr->getDateComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDateComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeComponent());
    }
}

void SPFWriter::writeIfcDefinedSymbol(IfcDefinedSymbol *ptr) {
    if (Step::isUnset(ptr->getDefinition())) {
        m_out << "$";
    }
    else {
        writeIfcDefinedSymbolSelect(ptr->getDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTarget())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTarget());
    }
}

void SPFWriter::writeIfcDefinedSymbolSelect(IfcDefinedSymbolSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcDefinedSymbolSelect::IFCPREDEFINEDSYMBOL:
        writeAttribute(selectData->getIfcPreDefinedSymbol());
        break;
    case IfcDefinedSymbolSelect::IFCEXTERNALLYDEFINEDSYMBOL:
        writeAttribute(selectData->getIfcExternallyDefinedSymbol());
        break;
        }
}

void SPFWriter::writeIfcDerivedProfileDef(IfcDerivedProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getParentProfile())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getParentProfile());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOperator())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOperator());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLabel())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLabel());
    }
}

void SPFWriter::writeIfcDerivedUnit(IfcDerivedUnit *ptr) {
    if (Step::isUnset(ptr->getElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDerivedUnitElement > >::iterator step_it0 = (ptr->getElements()).begin();
            if ((ptr->getElements()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getElements()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getUnitType())) {
        m_out << "$";
    }
    else {
        writeIfcDerivedUnitEnum(ptr->getUnitType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedType());
    }
}

void SPFWriter::writeIfcDerivedUnitEnum(IfcDerivedUnitEnum enumData) {
    switch(enumData) {
    case IfcDerivedUnitEnum_ANGULARVELOCITYUNIT:
        m_out << ".ANGULARVELOCITYUNIT.";
        break;
    case IfcDerivedUnitEnum_COMPOUNDPLANEANGLEUNIT:
        m_out << ".COMPOUNDPLANEANGLEUNIT.";
        break;
    case IfcDerivedUnitEnum_DYNAMICVISCOSITYUNIT:
        m_out << ".DYNAMICVISCOSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_HEATFLUXDENSITYUNIT:
        m_out << ".HEATFLUXDENSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_INTEGERCOUNTRATEUNIT:
        m_out << ".INTEGERCOUNTRATEUNIT.";
        break;
    case IfcDerivedUnitEnum_ISOTHERMALMOISTURECAPACITYUNIT:
        m_out << ".ISOTHERMALMOISTURECAPACITYUNIT.";
        break;
    case IfcDerivedUnitEnum_KINEMATICVISCOSITYUNIT:
        m_out << ".KINEMATICVISCOSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARVELOCITYUNIT:
        m_out << ".LINEARVELOCITYUNIT.";
        break;
    case IfcDerivedUnitEnum_MASSDENSITYUNIT:
        m_out << ".MASSDENSITYUNIT.";
        break;
    case IfcDerivedUnitEnum_MASSFLOWRATEUNIT:
        m_out << ".MASSFLOWRATEUNIT.";
        break;
    case IfcDerivedUnitEnum_MOISTUREDIFFUSIVITYUNIT:
        m_out << ".MOISTUREDIFFUSIVITYUNIT.";
        break;
    case IfcDerivedUnitEnum_MOLECULARWEIGHTUNIT:
        m_out << ".MOLECULARWEIGHTUNIT.";
        break;
    case IfcDerivedUnitEnum_SPECIFICHEATCAPACITYUNIT:
        m_out << ".SPECIFICHEATCAPACITYUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALADMITTANCEUNIT:
        m_out << ".THERMALADMITTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALCONDUCTANCEUNIT:
        m_out << ".THERMALCONDUCTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALRESISTANCEUNIT:
        m_out << ".THERMALRESISTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALTRANSMITTANCEUNIT:
        m_out << ".THERMALTRANSMITTANCEUNIT.";
        break;
    case IfcDerivedUnitEnum_VAPORPERMEABILITYUNIT:
        m_out << ".VAPORPERMEABILITYUNIT.";
        break;
    case IfcDerivedUnitEnum_VOLUMETRICFLOWRATEUNIT:
        m_out << ".VOLUMETRICFLOWRATEUNIT.";
        break;
    case IfcDerivedUnitEnum_ROTATIONALFREQUENCYUNIT:
        m_out << ".ROTATIONALFREQUENCYUNIT.";
        break;
    case IfcDerivedUnitEnum_TORQUEUNIT:
        m_out << ".TORQUEUNIT.";
        break;
    case IfcDerivedUnitEnum_MOMENTOFINERTIAUNIT:
        m_out << ".MOMENTOFINERTIAUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARMOMENTUNIT:
        m_out << ".LINEARMOMENTUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARFORCEUNIT:
        m_out << ".LINEARFORCEUNIT.";
        break;
    case IfcDerivedUnitEnum_PLANARFORCEUNIT:
        m_out << ".PLANARFORCEUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFELASTICITYUNIT:
        m_out << ".MODULUSOFELASTICITYUNIT.";
        break;
    case IfcDerivedUnitEnum_SHEARMODULUSUNIT:
        m_out << ".SHEARMODULUSUNIT.";
        break;
    case IfcDerivedUnitEnum_LINEARSTIFFNESSUNIT:
        m_out << ".LINEARSTIFFNESSUNIT.";
        break;
    case IfcDerivedUnitEnum_ROTATIONALSTIFFNESSUNIT:
        m_out << ".ROTATIONALSTIFFNESSUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFSUBGRADEREACTIONUNIT:
        m_out << ".MODULUSOFSUBGRADEREACTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_ACCELERATIONUNIT:
        m_out << ".ACCELERATIONUNIT.";
        break;
    case IfcDerivedUnitEnum_CURVATUREUNIT:
        m_out << ".CURVATUREUNIT.";
        break;
    case IfcDerivedUnitEnum_HEATINGVALUEUNIT:
        m_out << ".HEATINGVALUEUNIT.";
        break;
    case IfcDerivedUnitEnum_IONCONCENTRATIONUNIT:
        m_out << ".IONCONCENTRATIONUNIT.";
        break;
    case IfcDerivedUnitEnum_LUMINOUSINTENSITYDISTRIBUTIONUNIT:
        m_out << ".LUMINOUSINTENSITYDISTRIBUTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_MASSPERLENGTHUNIT:
        m_out << ".MASSPERLENGTHUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFLINEARSUBGRADEREACTIONUNIT:
        m_out << ".MODULUSOFLINEARSUBGRADEREACTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_MODULUSOFROTATIONALSUBGRADEREACTIONUNIT:
        m_out << ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT.";
        break;
    case IfcDerivedUnitEnum_PHUNIT:
        m_out << ".PHUNIT.";
        break;
    case IfcDerivedUnitEnum_ROTATIONALMASSUNIT:
        m_out << ".ROTATIONALMASSUNIT.";
        break;
    case IfcDerivedUnitEnum_SECTIONAREAINTEGRALUNIT:
        m_out << ".SECTIONAREAINTEGRALUNIT.";
        break;
    case IfcDerivedUnitEnum_SECTIONMODULUSUNIT:
        m_out << ".SECTIONMODULUSUNIT.";
        break;
    case IfcDerivedUnitEnum_SOUNDPOWERUNIT:
        m_out << ".SOUNDPOWERUNIT.";
        break;
    case IfcDerivedUnitEnum_SOUNDPRESSUREUNIT:
        m_out << ".SOUNDPRESSUREUNIT.";
        break;
    case IfcDerivedUnitEnum_TEMPERATUREGRADIENTUNIT:
        m_out << ".TEMPERATUREGRADIENTUNIT.";
        break;
    case IfcDerivedUnitEnum_THERMALEXPANSIONCOEFFICIENTUNIT:
        m_out << ".THERMALEXPANSIONCOEFFICIENTUNIT.";
        break;
    case IfcDerivedUnitEnum_WARPINGCONSTANTUNIT:
        m_out << ".WARPINGCONSTANTUNIT.";
        break;
    case IfcDerivedUnitEnum_WARPINGMOMENTUNIT:
        m_out << ".WARPINGMOMENTUNIT.";
        break;
    case IfcDerivedUnitEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDerivedUnitElement(IfcDerivedUnitElement *ptr) {
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExponent());
    }
}

void SPFWriter::writeIfcDiameterDimension(IfcDiameterDimension *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcDimensionCalloutRelationship(IfcDimensionCalloutRelationship *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingDraughtingCallout())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingDraughtingCallout());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedDraughtingCallout())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedDraughtingCallout());
    }
}

void SPFWriter::writeIfcDimensionCurve(IfcDimensionCurve *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcDimensionCurveDirectedCallout(IfcDimensionCurveDirectedCallout *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcDimensionCurveTerminator(IfcDimensionCurveTerminator *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAnnotatedCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAnnotatedCurve());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRole())) {
        m_out << "$";
    }
    else {
        writeIfcDimensionExtentUsage(ptr->getRole());
    }
}

void SPFWriter::writeIfcDimensionExtentUsage(IfcDimensionExtentUsage enumData) {
    switch(enumData) {
    case IfcDimensionExtentUsage_ORIGIN:
        m_out << ".ORIGIN.";
        break;
    case IfcDimensionExtentUsage_TARGET:
        m_out << ".TARGET.";
        break;
        }
}

void SPFWriter::writeIfcDimensionPair(IfcDimensionPair *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingDraughtingCallout())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingDraughtingCallout());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedDraughtingCallout())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedDraughtingCallout());
    }
}

void SPFWriter::writeIfcDimensionalExponents(IfcDimensionalExponents *ptr) {
    if (Step::isUnset(ptr->getLengthExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLengthExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMassExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMassExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElectricCurrentExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElectricCurrentExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermodynamicTemperatureExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermodynamicTemperatureExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmountOfSubstanceExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmountOfSubstanceExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLuminousIntensityExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLuminousIntensityExponent());
    }
}

void SPFWriter::writeIfcDirection(IfcDirection *ptr) {
    if (Step::isUnset(ptr->getDirectionRatios())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::Real >::iterator step_it0 = (ptr->getDirectionRatios()).begin();
            if ((ptr->getDirectionRatios()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getDirectionRatios()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcDiscreteAccessory(IfcDiscreteAccessory *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcDiscreteAccessoryType(IfcDiscreteAccessoryType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcDistributionChamberElement(IfcDistributionChamberElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcDistributionChamberElementType(IfcDistributionChamberElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcDistributionChamberElementTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcDistributionChamberElementTypeEnum(IfcDistributionChamberElementTypeEnum enumData) {
    switch(enumData) {
    case IfcDistributionChamberElementTypeEnum_FORMEDDUCT:
        m_out << ".FORMEDDUCT.";
        break;
    case IfcDistributionChamberElementTypeEnum_INSPECTIONCHAMBER:
        m_out << ".INSPECTIONCHAMBER.";
        break;
    case IfcDistributionChamberElementTypeEnum_INSPECTIONPIT:
        m_out << ".INSPECTIONPIT.";
        break;
    case IfcDistributionChamberElementTypeEnum_MANHOLE:
        m_out << ".MANHOLE.";
        break;
    case IfcDistributionChamberElementTypeEnum_METERCHAMBER:
        m_out << ".METERCHAMBER.";
        break;
    case IfcDistributionChamberElementTypeEnum_SUMP:
        m_out << ".SUMP.";
        break;
    case IfcDistributionChamberElementTypeEnum_TRENCH:
        m_out << ".TRENCH.";
        break;
    case IfcDistributionChamberElementTypeEnum_VALVECHAMBER:
        m_out << ".VALVECHAMBER.";
        break;
    case IfcDistributionChamberElementTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDistributionChamberElementTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDistributionControlElement(IfcDistributionControlElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getControlElementId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getControlElementId());
    }
}

void SPFWriter::writeIfcDistributionControlElementType(IfcDistributionControlElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcDistributionElement(IfcDistributionElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcDistributionElementType(IfcDistributionElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcDistributionFlowElement(IfcDistributionFlowElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcDistributionFlowElementType(IfcDistributionFlowElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcDistributionPort(IfcDistributionPort *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getFlowDirection())) {
        m_out << "$";
    }
    else {
        writeIfcFlowDirectionEnum(ptr->getFlowDirection());
    }
}

void SPFWriter::writeIfcFlowDirectionEnum(IfcFlowDirectionEnum enumData) {
    switch(enumData) {
    case IfcFlowDirectionEnum_SOURCE:
        m_out << ".SOURCE.";
        break;
    case IfcFlowDirectionEnum_SINK:
        m_out << ".SINK.";
        break;
    case IfcFlowDirectionEnum_SOURCEANDSINK:
        m_out << ".SOURCEANDSINK.";
        break;
    case IfcFlowDirectionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDocumentElectronicFormat(IfcDocumentElectronicFormat *ptr) {
    if (Step::isUnset(ptr->getFileExtension())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFileExtension());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMimeContentType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMimeContentType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMimeSubtype())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMimeSubtype());
    }
}

void SPFWriter::writeIfcDocumentInformation(IfcDocumentInformation *ptr) {
    if (Step::isUnset(ptr->getDocumentId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDocumentId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDocumentReferences())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDocumentReference > >::iterator step_it0 = (ptr->getDocumentReferences()).begin();
            if ((ptr->getDocumentReferences()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getDocumentReferences()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntendedUse())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntendedUse());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScope())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScope());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRevision())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRevision());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDocumentOwner())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getDocumentOwner());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEditors())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcActorSelect > >::iterator step_it0 = (ptr->getEditors()).begin();
            if ((ptr->getEditors()).size()) {
                writeIfcActorSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getEditors()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcActorSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationTime())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCreationTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLastRevisionTime())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLastRevisionTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElectronicFormat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElectronicFormat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getValidFrom())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getValidFrom());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getValidUntil())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getValidUntil());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConfidentiality())) {
        m_out << "$";
    }
    else {
        writeIfcDocumentConfidentialityEnum(ptr->getConfidentiality());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getStatus())) {
        m_out << "$";
    }
    else {
        writeIfcDocumentStatusEnum(ptr->getStatus());
    }
}

void SPFWriter::writeIfcDocumentConfidentialityEnum(IfcDocumentConfidentialityEnum enumData) {
    switch(enumData) {
    case IfcDocumentConfidentialityEnum_PUBLIC:
        m_out << ".PUBLIC.";
        break;
    case IfcDocumentConfidentialityEnum_RESTRICTED:
        m_out << ".RESTRICTED.";
        break;
    case IfcDocumentConfidentialityEnum_CONFIDENTIAL:
        m_out << ".CONFIDENTIAL.";
        break;
    case IfcDocumentConfidentialityEnum_PERSONAL:
        m_out << ".PERSONAL.";
        break;
    case IfcDocumentConfidentialityEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDocumentConfidentialityEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDocumentStatusEnum(IfcDocumentStatusEnum enumData) {
    switch(enumData) {
    case IfcDocumentStatusEnum_DRAFT:
        m_out << ".DRAFT.";
        break;
    case IfcDocumentStatusEnum_FINALDRAFT:
        m_out << ".FINALDRAFT.";
        break;
    case IfcDocumentStatusEnum_FINAL:
        m_out << ".FINAL.";
        break;
    case IfcDocumentStatusEnum_REVISION:
        m_out << ".REVISION.";
        break;
    case IfcDocumentStatusEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDocumentInformationRelationship(IfcDocumentInformationRelationship *ptr) {
    if (Step::isUnset(ptr->getRelatingDocument())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingDocument());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedDocuments())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDocumentInformation > >::iterator step_it0 = (ptr->getRelatedDocuments()).begin();
            if ((ptr->getRelatedDocuments()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedDocuments()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelationshipType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelationshipType());
    }
}

void SPFWriter::writeIfcDocumentReference(IfcDocumentReference *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcDoor(IfcDoor *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallWidth());
    }
}

void SPFWriter::writeIfcDoorLiningProperties(IfcDoorLiningProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLiningDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiningDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLiningThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiningThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThresholdDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThresholdDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThresholdThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThresholdThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransomThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransomThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransomOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransomOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLiningOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiningOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThresholdOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThresholdOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCasingThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCasingThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCasingDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCasingDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShapeAspectStyle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShapeAspectStyle());
    }
}

void SPFWriter::writeIfcDoorPanelProperties(IfcDoorPanelProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPanelDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPanelDepth());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPanelOperation())) {
        m_out << "$";
    }
    else {
        writeIfcDoorPanelOperationEnum(ptr->getPanelOperation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPanelWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPanelWidth());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPanelPosition())) {
        m_out << "$";
    }
    else {
        writeIfcDoorPanelPositionEnum(ptr->getPanelPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShapeAspectStyle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShapeAspectStyle());
    }
}

void SPFWriter::writeIfcDoorPanelOperationEnum(IfcDoorPanelOperationEnum enumData) {
    switch(enumData) {
    case IfcDoorPanelOperationEnum_SWINGING:
        m_out << ".SWINGING.";
        break;
    case IfcDoorPanelOperationEnum_DOUBLE_ACTING:
        m_out << ".DOUBLE_ACTING.";
        break;
    case IfcDoorPanelOperationEnum_SLIDING:
        m_out << ".SLIDING.";
        break;
    case IfcDoorPanelOperationEnum_FOLDING:
        m_out << ".FOLDING.";
        break;
    case IfcDoorPanelOperationEnum_REVOLVING:
        m_out << ".REVOLVING.";
        break;
    case IfcDoorPanelOperationEnum_ROLLINGUP:
        m_out << ".ROLLINGUP.";
        break;
    case IfcDoorPanelOperationEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDoorPanelOperationEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDoorPanelPositionEnum(IfcDoorPanelPositionEnum enumData) {
    switch(enumData) {
    case IfcDoorPanelPositionEnum_LEFT:
        m_out << ".LEFT.";
        break;
    case IfcDoorPanelPositionEnum_MIDDLE:
        m_out << ".MIDDLE.";
        break;
    case IfcDoorPanelPositionEnum_RIGHT:
        m_out << ".RIGHT.";
        break;
    case IfcDoorPanelPositionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDoorStyle(IfcDoorStyle *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getOperationType())) {
        m_out << "$";
    }
    else {
        writeIfcDoorStyleOperationEnum(ptr->getOperationType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConstructionType())) {
        m_out << "$";
    }
    else {
        writeIfcDoorStyleConstructionEnum(ptr->getConstructionType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getParameterTakesPrecedence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getParameterTakesPrecedence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSizeable())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSizeable());
    }
}

void SPFWriter::writeIfcDoorStyleOperationEnum(IfcDoorStyleOperationEnum enumData) {
    switch(enumData) {
    case IfcDoorStyleOperationEnum_SINGLE_SWING_LEFT:
        m_out << ".SINGLE_SWING_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_SINGLE_SWING_RIGHT:
        m_out << ".SINGLE_SWING_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SINGLE_SWING:
        m_out << ".DOUBLE_DOOR_SINGLE_SWING.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT:
        m_out << ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT:
        m_out << ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_SWING_LEFT:
        m_out << ".DOUBLE_SWING_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_SWING_RIGHT:
        m_out << ".DOUBLE_SWING_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_DOUBLE_SWING:
        m_out << ".DOUBLE_DOOR_DOUBLE_SWING.";
        break;
    case IfcDoorStyleOperationEnum_SLIDING_TO_LEFT:
        m_out << ".SLIDING_TO_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_SLIDING_TO_RIGHT:
        m_out << ".SLIDING_TO_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_SLIDING:
        m_out << ".DOUBLE_DOOR_SLIDING.";
        break;
    case IfcDoorStyleOperationEnum_FOLDING_TO_LEFT:
        m_out << ".FOLDING_TO_LEFT.";
        break;
    case IfcDoorStyleOperationEnum_FOLDING_TO_RIGHT:
        m_out << ".FOLDING_TO_RIGHT.";
        break;
    case IfcDoorStyleOperationEnum_DOUBLE_DOOR_FOLDING:
        m_out << ".DOUBLE_DOOR_FOLDING.";
        break;
    case IfcDoorStyleOperationEnum_REVOLVING:
        m_out << ".REVOLVING.";
        break;
    case IfcDoorStyleOperationEnum_ROLLINGUP:
        m_out << ".ROLLINGUP.";
        break;
    case IfcDoorStyleOperationEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDoorStyleOperationEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDoorStyleConstructionEnum(IfcDoorStyleConstructionEnum enumData) {
    switch(enumData) {
    case IfcDoorStyleConstructionEnum_ALUMINIUM:
        m_out << ".ALUMINIUM.";
        break;
    case IfcDoorStyleConstructionEnum_HIGH_GRADE_STEEL:
        m_out << ".HIGH_GRADE_STEEL.";
        break;
    case IfcDoorStyleConstructionEnum_STEEL:
        m_out << ".STEEL.";
        break;
    case IfcDoorStyleConstructionEnum_WOOD:
        m_out << ".WOOD.";
        break;
    case IfcDoorStyleConstructionEnum_ALUMINIUM_WOOD:
        m_out << ".ALUMINIUM_WOOD.";
        break;
    case IfcDoorStyleConstructionEnum_ALUMINIUM_PLASTIC:
        m_out << ".ALUMINIUM_PLASTIC.";
        break;
    case IfcDoorStyleConstructionEnum_PLASTIC:
        m_out << ".PLASTIC.";
        break;
    case IfcDoorStyleConstructionEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDoorStyleConstructionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDraughtingCallout(IfcDraughtingCallout *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcDraughtingCalloutRelationship(IfcDraughtingCalloutRelationship *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingDraughtingCallout())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingDraughtingCallout());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedDraughtingCallout())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedDraughtingCallout());
    }
}

void SPFWriter::writeIfcDraughtingPreDefinedColour(IfcDraughtingPreDefinedColour *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcDraughtingPreDefinedCurveFont(IfcDraughtingPreDefinedCurveFont *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcDraughtingPreDefinedTextFont(IfcDraughtingPreDefinedTextFont *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcDuctFittingType(IfcDuctFittingType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcDuctFittingTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcDuctFittingTypeEnum(IfcDuctFittingTypeEnum enumData) {
    switch(enumData) {
    case IfcDuctFittingTypeEnum_BEND:
        m_out << ".BEND.";
        break;
    case IfcDuctFittingTypeEnum_CONNECTOR:
        m_out << ".CONNECTOR.";
        break;
    case IfcDuctFittingTypeEnum_ENTRY:
        m_out << ".ENTRY.";
        break;
    case IfcDuctFittingTypeEnum_EXIT:
        m_out << ".EXIT.";
        break;
    case IfcDuctFittingTypeEnum_JUNCTION:
        m_out << ".JUNCTION.";
        break;
    case IfcDuctFittingTypeEnum_OBSTRUCTION:
        m_out << ".OBSTRUCTION.";
        break;
    case IfcDuctFittingTypeEnum_TRANSITION:
        m_out << ".TRANSITION.";
        break;
    case IfcDuctFittingTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDuctFittingTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDuctSegmentType(IfcDuctSegmentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcDuctSegmentTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcDuctSegmentTypeEnum(IfcDuctSegmentTypeEnum enumData) {
    switch(enumData) {
    case IfcDuctSegmentTypeEnum_RIGIDSEGMENT:
        m_out << ".RIGIDSEGMENT.";
        break;
    case IfcDuctSegmentTypeEnum_FLEXIBLESEGMENT:
        m_out << ".FLEXIBLESEGMENT.";
        break;
    case IfcDuctSegmentTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDuctSegmentTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDuctSilencerType(IfcDuctSilencerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcDuctSilencerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcDuctSilencerTypeEnum(IfcDuctSilencerTypeEnum enumData) {
    switch(enumData) {
    case IfcDuctSilencerTypeEnum_FLATOVAL:
        m_out << ".FLATOVAL.";
        break;
    case IfcDuctSilencerTypeEnum_RECTANGULAR:
        m_out << ".RECTANGULAR.";
        break;
    case IfcDuctSilencerTypeEnum_ROUND:
        m_out << ".ROUND.";
        break;
    case IfcDuctSilencerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDuctSilencerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcEdge(IfcEdge *ptr) {
    if (Step::isUnset(ptr->getEdgeStart())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeEnd())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeEnd());
    }
}

void SPFWriter::writeIfcEdgeCurve(IfcEdgeCurve *ptr) {
    if (Step::isUnset(ptr->getEdgeStart())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeEnd())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeEnd());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeGeometry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeGeometry());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSameSense())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSameSense());
    }
}

void SPFWriter::writeIfcEdgeFeature(IfcEdgeFeature *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFeatureLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFeatureLength());
    }
}

void SPFWriter::writeIfcEdgeLoop(IfcEdgeLoop *ptr) {
    if (Step::isUnset(ptr->getEdgeList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcOrientedEdge > >::iterator step_it0 = (ptr->getEdgeList()).begin();
            if ((ptr->getEdgeList()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getEdgeList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcElectricApplianceType(IfcElectricApplianceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricApplianceTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcElectricApplianceTypeEnum(IfcElectricApplianceTypeEnum enumData) {
    switch(enumData) {
    case IfcElectricApplianceTypeEnum_COMPUTER:
        m_out << ".COMPUTER.";
        break;
    case IfcElectricApplianceTypeEnum_DIRECTWATERHEATER:
        m_out << ".DIRECTWATERHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_DISHWASHER:
        m_out << ".DISHWASHER.";
        break;
    case IfcElectricApplianceTypeEnum_ELECTRICCOOKER:
        m_out << ".ELECTRICCOOKER.";
        break;
    case IfcElectricApplianceTypeEnum_ELECTRICHEATER:
        m_out << ".ELECTRICHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_FACSIMILE:
        m_out << ".FACSIMILE.";
        break;
    case IfcElectricApplianceTypeEnum_FREESTANDINGFAN:
        m_out << ".FREESTANDINGFAN.";
        break;
    case IfcElectricApplianceTypeEnum_FREEZER:
        m_out << ".FREEZER.";
        break;
    case IfcElectricApplianceTypeEnum_FRIDGE_FREEZER:
        m_out << ".FRIDGE_FREEZER.";
        break;
    case IfcElectricApplianceTypeEnum_HANDDRYER:
        m_out << ".HANDDRYER.";
        break;
    case IfcElectricApplianceTypeEnum_INDIRECTWATERHEATER:
        m_out << ".INDIRECTWATERHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_MICROWAVE:
        m_out << ".MICROWAVE.";
        break;
    case IfcElectricApplianceTypeEnum_PHOTOCOPIER:
        m_out << ".PHOTOCOPIER.";
        break;
    case IfcElectricApplianceTypeEnum_PRINTER:
        m_out << ".PRINTER.";
        break;
    case IfcElectricApplianceTypeEnum_REFRIGERATOR:
        m_out << ".REFRIGERATOR.";
        break;
    case IfcElectricApplianceTypeEnum_RADIANTHEATER:
        m_out << ".RADIANTHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_SCANNER:
        m_out << ".SCANNER.";
        break;
    case IfcElectricApplianceTypeEnum_TELEPHONE:
        m_out << ".TELEPHONE.";
        break;
    case IfcElectricApplianceTypeEnum_TUMBLEDRYER:
        m_out << ".TUMBLEDRYER.";
        break;
    case IfcElectricApplianceTypeEnum_TV:
        m_out << ".TV.";
        break;
    case IfcElectricApplianceTypeEnum_VENDINGMACHINE:
        m_out << ".VENDINGMACHINE.";
        break;
    case IfcElectricApplianceTypeEnum_WASHINGMACHINE:
        m_out << ".WASHINGMACHINE.";
        break;
    case IfcElectricApplianceTypeEnum_WATERHEATER:
        m_out << ".WATERHEATER.";
        break;
    case IfcElectricApplianceTypeEnum_WATERCOOLER:
        m_out << ".WATERCOOLER.";
        break;
    case IfcElectricApplianceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricApplianceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricDistributionPoint(IfcElectricDistributionPoint *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getDistributionPointFunction())) {
        m_out << "$";
    }
    else {
        writeIfcElectricDistributionPointFunctionEnum(ptr->getDistributionPointFunction());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedFunction())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedFunction());
    }
}

void SPFWriter::writeIfcElectricDistributionPointFunctionEnum(IfcElectricDistributionPointFunctionEnum enumData) {
    switch(enumData) {
    case IfcElectricDistributionPointFunctionEnum_ALARMPANEL:
        m_out << ".ALARMPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_CONSUMERUNIT:
        m_out << ".CONSUMERUNIT.";
        break;
    case IfcElectricDistributionPointFunctionEnum_CONTROLPANEL:
        m_out << ".CONTROLPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_DISTRIBUTIONBOARD:
        m_out << ".DISTRIBUTIONBOARD.";
        break;
    case IfcElectricDistributionPointFunctionEnum_GASDETECTORPANEL:
        m_out << ".GASDETECTORPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_INDICATORPANEL:
        m_out << ".INDICATORPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_MIMICPANEL:
        m_out << ".MIMICPANEL.";
        break;
    case IfcElectricDistributionPointFunctionEnum_MOTORCONTROLCENTRE:
        m_out << ".MOTORCONTROLCENTRE.";
        break;
    case IfcElectricDistributionPointFunctionEnum_SWITCHBOARD:
        m_out << ".SWITCHBOARD.";
        break;
    case IfcElectricDistributionPointFunctionEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricDistributionPointFunctionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricFlowStorageDeviceType(IfcElectricFlowStorageDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricFlowStorageDeviceTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcElectricFlowStorageDeviceTypeEnum(IfcElectricFlowStorageDeviceTypeEnum enumData) {
    switch(enumData) {
    case IfcElectricFlowStorageDeviceTypeEnum_BATTERY:
        m_out << ".BATTERY.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_CAPACITORBANK:
        m_out << ".CAPACITORBANK.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_HARMONICFILTER:
        m_out << ".HARMONICFILTER.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_INDUCTORBANK:
        m_out << ".INDUCTORBANK.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_UPS:
        m_out << ".UPS.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricFlowStorageDeviceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricGeneratorType(IfcElectricGeneratorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricGeneratorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcElectricGeneratorTypeEnum(IfcElectricGeneratorTypeEnum enumData) {
    switch(enumData) {
    case IfcElectricGeneratorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricGeneratorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricHeaterType(IfcElectricHeaterType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricHeaterTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcElectricHeaterTypeEnum(IfcElectricHeaterTypeEnum enumData) {
    switch(enumData) {
    case IfcElectricHeaterTypeEnum_ELECTRICPOINTHEATER:
        m_out << ".ELECTRICPOINTHEATER.";
        break;
    case IfcElectricHeaterTypeEnum_ELECTRICCABLEHEATER:
        m_out << ".ELECTRICCABLEHEATER.";
        break;
    case IfcElectricHeaterTypeEnum_ELECTRICMATHEATER:
        m_out << ".ELECTRICMATHEATER.";
        break;
    case IfcElectricHeaterTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricHeaterTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricMotorType(IfcElectricMotorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricMotorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcElectricMotorTypeEnum(IfcElectricMotorTypeEnum enumData) {
    switch(enumData) {
    case IfcElectricMotorTypeEnum_DC:
        m_out << ".DC.";
        break;
    case IfcElectricMotorTypeEnum_INDUCTION:
        m_out << ".INDUCTION.";
        break;
    case IfcElectricMotorTypeEnum_POLYPHASE:
        m_out << ".POLYPHASE.";
        break;
    case IfcElectricMotorTypeEnum_RELUCTANCESYNCHRONOUS:
        m_out << ".RELUCTANCESYNCHRONOUS.";
        break;
    case IfcElectricMotorTypeEnum_SYNCHRONOUS:
        m_out << ".SYNCHRONOUS.";
        break;
    case IfcElectricMotorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricMotorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricTimeControlType(IfcElectricTimeControlType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricTimeControlTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcElectricTimeControlTypeEnum(IfcElectricTimeControlTypeEnum enumData) {
    switch(enumData) {
    case IfcElectricTimeControlTypeEnum_TIMECLOCK:
        m_out << ".TIMECLOCK.";
        break;
    case IfcElectricTimeControlTypeEnum_TIMEDELAY:
        m_out << ".TIMEDELAY.";
        break;
    case IfcElectricTimeControlTypeEnum_RELAY:
        m_out << ".RELAY.";
        break;
    case IfcElectricTimeControlTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElectricTimeControlTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricalBaseProperties(IfcElectricalBaseProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getEnergySequence())) {
        m_out << "$";
    }
    else {
        writeIfcEnergySequenceEnum(ptr->getEnergySequence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedEnergySequence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedEnergySequence());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getElectricCurrentType())) {
        m_out << "$";
    }
    else {
        writeIfcElectricCurrentEnum(ptr->getElectricCurrentType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInputVoltage())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInputVoltage());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInputFrequency())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInputFrequency());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFullLoadCurrent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFullLoadCurrent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumCircuitCurrent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumCircuitCurrent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumPowerInput())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumPowerInput());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRatedPowerInput())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRatedPowerInput());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInputPhase())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInputPhase());
    }
}

void SPFWriter::writeIfcEnergySequenceEnum(IfcEnergySequenceEnum enumData) {
    switch(enumData) {
    case IfcEnergySequenceEnum_PRIMARY:
        m_out << ".PRIMARY.";
        break;
    case IfcEnergySequenceEnum_SECONDARY:
        m_out << ".SECONDARY.";
        break;
    case IfcEnergySequenceEnum_TERTIARY:
        m_out << ".TERTIARY.";
        break;
    case IfcEnergySequenceEnum_AUXILIARY:
        m_out << ".AUXILIARY.";
        break;
    case IfcEnergySequenceEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcEnergySequenceEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricCurrentEnum(IfcElectricCurrentEnum enumData) {
    switch(enumData) {
    case IfcElectricCurrentEnum_ALTERNATING:
        m_out << ".ALTERNATING.";
        break;
    case IfcElectricCurrentEnum_DIRECT:
        m_out << ".DIRECT.";
        break;
    case IfcElectricCurrentEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElectricalCircuit(IfcElectricalCircuit *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcElectricalElement(IfcElectricalElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcElement(IfcElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcElementAssembly(IfcElementAssembly *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getAssemblyPlace())) {
        m_out << "$";
    }
    else {
        writeIfcAssemblyPlaceEnum(ptr->getAssemblyPlace());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcElementAssemblyTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcAssemblyPlaceEnum(IfcAssemblyPlaceEnum enumData) {
    switch(enumData) {
    case IfcAssemblyPlaceEnum_SITE:
        m_out << ".SITE.";
        break;
    case IfcAssemblyPlaceEnum_FACTORY:
        m_out << ".FACTORY.";
        break;
    case IfcAssemblyPlaceEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElementAssemblyTypeEnum(IfcElementAssemblyTypeEnum enumData) {
    switch(enumData) {
    case IfcElementAssemblyTypeEnum_ACCESSORY_ASSEMBLY:
        m_out << ".ACCESSORY_ASSEMBLY.";
        break;
    case IfcElementAssemblyTypeEnum_ARCH:
        m_out << ".ARCH.";
        break;
    case IfcElementAssemblyTypeEnum_BEAM_GRID:
        m_out << ".BEAM_GRID.";
        break;
    case IfcElementAssemblyTypeEnum_BRACED_FRAME:
        m_out << ".BRACED_FRAME.";
        break;
    case IfcElementAssemblyTypeEnum_GIRDER:
        m_out << ".GIRDER.";
        break;
    case IfcElementAssemblyTypeEnum_REINFORCEMENT_UNIT:
        m_out << ".REINFORCEMENT_UNIT.";
        break;
    case IfcElementAssemblyTypeEnum_RIGID_FRAME:
        m_out << ".RIGID_FRAME.";
        break;
    case IfcElementAssemblyTypeEnum_SLAB_FIELD:
        m_out << ".SLAB_FIELD.";
        break;
    case IfcElementAssemblyTypeEnum_TRUSS:
        m_out << ".TRUSS.";
        break;
    case IfcElementAssemblyTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcElementAssemblyTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcElementComponent(IfcElementComponent *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcElementComponentType(IfcElementComponentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcElementQuantity(IfcElementQuantity *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMethodOfMeasurement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMethodOfMeasurement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getQuantities())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPhysicalQuantity > >::iterator step_it0 = (ptr->getQuantities()).begin();
            if ((ptr->getQuantities()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getQuantities()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcElementType(IfcElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcElementarySurface(IfcElementarySurface *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
}

void SPFWriter::writeIfcEllipse(IfcEllipse *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSemiAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSemiAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSemiAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSemiAxis2());
    }
}

void SPFWriter::writeIfcEllipseProfileDef(IfcEllipseProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSemiAxis1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSemiAxis1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSemiAxis2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSemiAxis2());
    }
}

void SPFWriter::writeIfcEnergyConversionDevice(IfcEnergyConversionDevice *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcEnergyConversionDeviceType(IfcEnergyConversionDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcEnergyProperties(IfcEnergyProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getEnergySequence())) {
        m_out << "$";
    }
    else {
        writeIfcEnergySequenceEnum(ptr->getEnergySequence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedEnergySequence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedEnergySequence());
    }
}

void SPFWriter::writeIfcEnvironmentalImpactValue(IfcEnvironmentalImpactValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedValue())) {
        m_out << "$";
    }
    else {
        writeIfcAppliedValueSelect(ptr->getAppliedValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnitBasis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnitBasis());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getApplicableDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFixedUntilDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getFixedUntilDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getImpactType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getImpactType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCategory())) {
        m_out << "$";
    }
    else {
        writeIfcEnvironmentalImpactCategoryEnum(ptr->getCategory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedCategory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedCategory());
    }
}

void SPFWriter::writeIfcEnvironmentalImpactCategoryEnum(IfcEnvironmentalImpactCategoryEnum enumData) {
    switch(enumData) {
    case IfcEnvironmentalImpactCategoryEnum_COMBINEDVALUE:
        m_out << ".COMBINEDVALUE.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_DISPOSAL:
        m_out << ".DISPOSAL.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_EXTRACTION:
        m_out << ".EXTRACTION.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_INSTALLATION:
        m_out << ".INSTALLATION.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_MANUFACTURE:
        m_out << ".MANUFACTURE.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_TRANSPORTATION:
        m_out << ".TRANSPORTATION.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcEnvironmentalImpactCategoryEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcEquipmentElement(IfcEquipmentElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcEquipmentStandard(IfcEquipmentStandard *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcEvaporativeCoolerType(IfcEvaporativeCoolerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcEvaporativeCoolerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcEvaporativeCoolerTypeEnum(IfcEvaporativeCoolerTypeEnum enumData) {
    switch(enumData) {
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER:
        m_out << ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER:
        m_out << ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER:
        m_out << ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER:
        m_out << ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_DIRECTEVAPORATIVEAIRWASHER:
        m_out << ".DIRECTEVAPORATIVEAIRWASHER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER:
        m_out << ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTEVAPORATIVEWETCOIL:
        m_out << ".INDIRECTEVAPORATIVEWETCOIL.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER:
        m_out << ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER.";
        break;
    case IfcEvaporativeCoolerTypeEnum_INDIRECTDIRECTCOMBINATION:
        m_out << ".INDIRECTDIRECTCOMBINATION.";
        break;
    case IfcEvaporativeCoolerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcEvaporativeCoolerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcEvaporatorType(IfcEvaporatorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcEvaporatorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcEvaporatorTypeEnum(IfcEvaporatorTypeEnum enumData) {
    switch(enumData) {
    case IfcEvaporatorTypeEnum_DIRECTEXPANSIONSHELLANDTUBE:
        m_out << ".DIRECTEXPANSIONSHELLANDTUBE.";
        break;
    case IfcEvaporatorTypeEnum_DIRECTEXPANSIONTUBEINTUBE:
        m_out << ".DIRECTEXPANSIONTUBEINTUBE.";
        break;
    case IfcEvaporatorTypeEnum_DIRECTEXPANSIONBRAZEDPLATE:
        m_out << ".DIRECTEXPANSIONBRAZEDPLATE.";
        break;
    case IfcEvaporatorTypeEnum_FLOODEDSHELLANDTUBE:
        m_out << ".FLOODEDSHELLANDTUBE.";
        break;
    case IfcEvaporatorTypeEnum_SHELLANDCOIL:
        m_out << ".SHELLANDCOIL.";
        break;
    case IfcEvaporatorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcEvaporatorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcExtendedMaterialProperties(IfcExtendedMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExtendedProperties())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProperty > >::iterator step_it0 = (ptr->getExtendedProperties()).begin();
            if ((ptr->getExtendedProperties()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getExtendedProperties()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcExternalReference(IfcExternalReference *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcExternallyDefinedHatchStyle(IfcExternallyDefinedHatchStyle *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcExternallyDefinedSurfaceStyle(IfcExternallyDefinedSurfaceStyle *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcExternallyDefinedSymbol(IfcExternallyDefinedSymbol *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcExternallyDefinedTextFont(IfcExternallyDefinedTextFont *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcExtrudedAreaSolid(IfcExtrudedAreaSolid *ptr) {
    if (Step::isUnset(ptr->getSweptArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExtrudedDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExtrudedDirection());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
}

void SPFWriter::writeIfcFace(IfcFace *ptr) {
    if (Step::isUnset(ptr->getBounds())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFaceBound > >::iterator step_it0 = (ptr->getBounds()).begin();
            if ((ptr->getBounds()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getBounds()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcFaceBasedSurfaceModel(IfcFaceBasedSurfaceModel *ptr) {
    if (Step::isUnset(ptr->getFbsmFaces())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcConnectedFaceSet > >::iterator step_it0 = (ptr->getFbsmFaces()).begin();
            if ((ptr->getFbsmFaces()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getFbsmFaces()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcFaceBound(IfcFaceBound *ptr) {
    if (Step::isUnset(ptr->getBound())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBound());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOrientation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientation());
    }
}

void SPFWriter::writeIfcFaceOuterBound(IfcFaceOuterBound *ptr) {
    if (Step::isUnset(ptr->getBound())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBound());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOrientation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientation());
    }
}

void SPFWriter::writeIfcFaceSurface(IfcFaceSurface *ptr) {
    if (Step::isUnset(ptr->getBounds())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFaceBound > >::iterator step_it0 = (ptr->getBounds()).begin();
            if ((ptr->getBounds()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getBounds()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFaceSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFaceSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSameSense())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSameSense());
    }
}

void SPFWriter::writeIfcFacetedBrep(IfcFacetedBrep *ptr) {
    if (Step::isUnset(ptr->getOuter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuter());
    }
}

void SPFWriter::writeIfcFacetedBrepWithVoids(IfcFacetedBrepWithVoids *ptr) {
    if (Step::isUnset(ptr->getOuter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVoids())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcClosedShell > >::iterator step_it0 = (ptr->getVoids()).begin();
            if ((ptr->getVoids()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getVoids()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcFailureConnectionCondition(IfcFailureConnectionCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTensionFailureX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTensionFailureX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTensionFailureY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTensionFailureY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTensionFailureZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTensionFailureZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCompressionFailureX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCompressionFailureX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCompressionFailureY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCompressionFailureY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCompressionFailureZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCompressionFailureZ());
    }
}

void SPFWriter::writeIfcFanType(IfcFanType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcFanTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcFanTypeEnum(IfcFanTypeEnum enumData) {
    switch(enumData) {
    case IfcFanTypeEnum_CENTRIFUGALFORWARDCURVED:
        m_out << ".CENTRIFUGALFORWARDCURVED.";
        break;
    case IfcFanTypeEnum_CENTRIFUGALRADIAL:
        m_out << ".CENTRIFUGALRADIAL.";
        break;
    case IfcFanTypeEnum_CENTRIFUGALBACKWARDINCLINEDCURVED:
        m_out << ".CENTRIFUGALBACKWARDINCLINEDCURVED.";
        break;
    case IfcFanTypeEnum_CENTRIFUGALAIRFOIL:
        m_out << ".CENTRIFUGALAIRFOIL.";
        break;
    case IfcFanTypeEnum_TUBEAXIAL:
        m_out << ".TUBEAXIAL.";
        break;
    case IfcFanTypeEnum_VANEAXIAL:
        m_out << ".VANEAXIAL.";
        break;
    case IfcFanTypeEnum_PROPELLORAXIAL:
        m_out << ".PROPELLORAXIAL.";
        break;
    case IfcFanTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcFanTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcFastener(IfcFastener *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFastenerType(IfcFastenerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFeatureElement(IfcFeatureElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFeatureElementAddition(IfcFeatureElementAddition *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFeatureElementSubtraction(IfcFeatureElementSubtraction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFillAreaStyle(IfcFillAreaStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFillStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFillStyleSelect > >::iterator step_it0 = (ptr->getFillStyles()).begin();
            if ((ptr->getFillStyles()).size()) {
                writeIfcFillStyleSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getFillStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcFillStyleSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcFillStyleSelect(IfcFillStyleSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcFillStyleSelect::IFCFILLAREASTYLEHATCHING:
        writeAttribute(selectData->getIfcFillAreaStyleHatching());
        break;
    case IfcFillStyleSelect::IFCFILLAREASTYLETILES:
        writeAttribute(selectData->getIfcFillAreaStyleTiles());
        break;
    case IfcFillStyleSelect::IFCCOLOURSPECIFICATION:
        writeAttribute(selectData->getIfcColourSpecification());
        break;
    case IfcFillStyleSelect::IFCPREDEFINEDCOLOUR:
        writeAttribute(selectData->getIfcPreDefinedColour());
        break;
    case IfcFillStyleSelect::IFCEXTERNALLYDEFINEDHATCHSTYLE:
        writeAttribute(selectData->getIfcExternallyDefinedHatchStyle());
        break;
        }
}

void SPFWriter::writeIfcFillAreaStyleHatching(IfcFillAreaStyleHatching *ptr) {
    if (Step::isUnset(ptr->getHatchLineAppearance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHatchLineAppearance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartOfNextHatchLine())) {
        m_out << "$";
    }
    else {
        writeIfcHatchLineDistanceSelect(ptr->getStartOfNextHatchLine());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPointOfReferenceHatchLine())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPointOfReferenceHatchLine());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPatternStart())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPatternStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHatchLineAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHatchLineAngle());
    }
}

void SPFWriter::writeIfcHatchLineDistanceSelect(IfcHatchLineDistanceSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcHatchLineDistanceSelect::IFCONEDIRECTIONREPEATFACTOR:
        writeAttribute(selectData->getIfcOneDirectionRepeatFactor());
        break;
    case IfcHatchLineDistanceSelect::IFCPOSITIVELENGTHMEASURE:
        m_out << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcFillAreaStyleTileSymbolWithStyle(IfcFillAreaStyleTileSymbolWithStyle *ptr) {
    if (Step::isUnset(ptr->getSymbol())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSymbol());
    }
}

void SPFWriter::writeIfcFillAreaStyleTiles(IfcFillAreaStyleTiles *ptr) {
    if (Step::isUnset(ptr->getTilingPattern())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTilingPattern());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTiles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFillAreaStyleTileShapeSelect > >::iterator step_it0 = (ptr->getTiles()).begin();
            if ((ptr->getTiles()).size()) {
                writeIfcFillAreaStyleTileShapeSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTiles()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcFillAreaStyleTileShapeSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTilingScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTilingScale());
    }
}

void SPFWriter::writeIfcFillAreaStyleTileShapeSelect(IfcFillAreaStyleTileShapeSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcFillAreaStyleTileShapeSelect::IFCFILLAREASTYLETILESYMBOLWITHSTYLE:
        writeAttribute(selectData->getIfcFillAreaStyleTileSymbolWithStyle());
        break;
        }
}

void SPFWriter::writeIfcFilterType(IfcFilterType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcFilterTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcFilterTypeEnum(IfcFilterTypeEnum enumData) {
    switch(enumData) {
    case IfcFilterTypeEnum_AIRPARTICLEFILTER:
        m_out << ".AIRPARTICLEFILTER.";
        break;
    case IfcFilterTypeEnum_ODORFILTER:
        m_out << ".ODORFILTER.";
        break;
    case IfcFilterTypeEnum_OILFILTER:
        m_out << ".OILFILTER.";
        break;
    case IfcFilterTypeEnum_STRAINER:
        m_out << ".STRAINER.";
        break;
    case IfcFilterTypeEnum_WATERFILTER:
        m_out << ".WATERFILTER.";
        break;
    case IfcFilterTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcFilterTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcFireSuppressionTerminalType(IfcFireSuppressionTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcFireSuppressionTerminalTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcFireSuppressionTerminalTypeEnum(IfcFireSuppressionTerminalTypeEnum enumData) {
    switch(enumData) {
    case IfcFireSuppressionTerminalTypeEnum_BREECHINGINLET:
        m_out << ".BREECHINGINLET.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_FIREHYDRANT:
        m_out << ".FIREHYDRANT.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_HOSEREEL:
        m_out << ".HOSEREEL.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_SPRINKLER:
        m_out << ".SPRINKLER.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_SPRINKLERDEFLECTOR:
        m_out << ".SPRINKLERDEFLECTOR.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcFireSuppressionTerminalTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcFlowController(IfcFlowController *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowControllerType(IfcFlowControllerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFlowFitting(IfcFlowFitting *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowFittingType(IfcFlowFittingType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFlowInstrumentType(IfcFlowInstrumentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcFlowInstrumentTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcFlowInstrumentTypeEnum(IfcFlowInstrumentTypeEnum enumData) {
    switch(enumData) {
    case IfcFlowInstrumentTypeEnum_PRESSUREGAUGE:
        m_out << ".PRESSUREGAUGE.";
        break;
    case IfcFlowInstrumentTypeEnum_THERMOMETER:
        m_out << ".THERMOMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_AMMETER:
        m_out << ".AMMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_FREQUENCYMETER:
        m_out << ".FREQUENCYMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_POWERFACTORMETER:
        m_out << ".POWERFACTORMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_PHASEANGLEMETER:
        m_out << ".PHASEANGLEMETER.";
        break;
    case IfcFlowInstrumentTypeEnum_VOLTMETER_PEAK:
        m_out << ".VOLTMETER_PEAK.";
        break;
    case IfcFlowInstrumentTypeEnum_VOLTMETER_RMS:
        m_out << ".VOLTMETER_RMS.";
        break;
    case IfcFlowInstrumentTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcFlowInstrumentTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcFlowMeterType(IfcFlowMeterType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcFlowMeterTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcFlowMeterTypeEnum(IfcFlowMeterTypeEnum enumData) {
    switch(enumData) {
    case IfcFlowMeterTypeEnum_ELECTRICMETER:
        m_out << ".ELECTRICMETER.";
        break;
    case IfcFlowMeterTypeEnum_ENERGYMETER:
        m_out << ".ENERGYMETER.";
        break;
    case IfcFlowMeterTypeEnum_FLOWMETER:
        m_out << ".FLOWMETER.";
        break;
    case IfcFlowMeterTypeEnum_GASMETER:
        m_out << ".GASMETER.";
        break;
    case IfcFlowMeterTypeEnum_OILMETER:
        m_out << ".OILMETER.";
        break;
    case IfcFlowMeterTypeEnum_WATERMETER:
        m_out << ".WATERMETER.";
        break;
    case IfcFlowMeterTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcFlowMeterTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcFlowMovingDevice(IfcFlowMovingDevice *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowMovingDeviceType(IfcFlowMovingDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFlowSegment(IfcFlowSegment *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowSegmentType(IfcFlowSegmentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFlowStorageDevice(IfcFlowStorageDevice *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowStorageDeviceType(IfcFlowStorageDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFlowTerminal(IfcFlowTerminal *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowTerminalType(IfcFlowTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFlowTreatmentDevice(IfcFlowTreatmentDevice *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFlowTreatmentDeviceType(IfcFlowTreatmentDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFluidFlowProperties(IfcFluidFlowProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPropertySource())) {
        m_out << "$";
    }
    else {
        writeIfcPropertySourceEnum(ptr->getPropertySource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlowConditionTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlowConditionTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVelocityTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVelocityTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlowrateTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlowrateTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFluid())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFluid());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPressureTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPressureTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedPropertySource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedPropertySource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTemperatureSingleValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTemperatureSingleValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWetBulbTemperatureSingleValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWetBulbTemperatureSingleValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWetBulbTemperatureTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWetBulbTemperatureTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTemperatureTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTemperatureTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlowrateSingleValue())) {
        m_out << "$";
    }
    else {
        writeIfcDerivedMeasureValue(ptr->getFlowrateSingleValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlowConditionSingleValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlowConditionSingleValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVelocitySingleValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVelocitySingleValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPressureSingleValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPressureSingleValue());
    }
}

void SPFWriter::writeIfcPropertySourceEnum(IfcPropertySourceEnum enumData) {
    switch(enumData) {
    case IfcPropertySourceEnum_DESIGN:
        m_out << ".DESIGN.";
        break;
    case IfcPropertySourceEnum_DESIGNMAXIMUM:
        m_out << ".DESIGNMAXIMUM.";
        break;
    case IfcPropertySourceEnum_DESIGNMINIMUM:
        m_out << ".DESIGNMINIMUM.";
        break;
    case IfcPropertySourceEnum_SIMULATED:
        m_out << ".SIMULATED.";
        break;
    case IfcPropertySourceEnum_ASBUILT:
        m_out << ".ASBUILT.";
        break;
    case IfcPropertySourceEnum_COMMISSIONING:
        m_out << ".COMMISSIONING.";
        break;
    case IfcPropertySourceEnum_MEASURED:
        m_out << ".MEASURED.";
        break;
    case IfcPropertySourceEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPropertySourceEnum_NOTKNOWN:
        m_out << ".NOTKNOWN.";
        break;
        }
}

void SPFWriter::writeIfcDerivedMeasureValue(IfcDerivedMeasureValue *selectData) {
    switch(selectData->currentType()) {
    case IfcDerivedMeasureValue::IFCVOLUMETRICFLOWRATEMEASURE:
        m_out << "IFCVOLUMETRICFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcVolumetricFlowRateMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTIMESTAMP:
        m_out << "IFCTIMESTAMP(";
        writeAttribute(selectData->getIfcTimeStamp());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALTRANSMITTANCEMEASURE:
        m_out << "IFCTHERMALTRANSMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalTransmittanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALRESISTANCEMEASURE:
        m_out << "IFCTHERMALRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalResistanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALADMITTANCEMEASURE:
        m_out << "IFCTHERMALADMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalAdmittanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCPRESSUREMEASURE:
        m_out << "IFCPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcPressureMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCPOWERMEASURE:
        m_out << "IFCPOWERMEASURE(";
        writeAttribute(selectData->getIfcPowerMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMASSFLOWRATEMEASURE:
        m_out << "IFCMASSFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcMassFlowRateMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMASSDENSITYMEASURE:
        m_out << "IFCMASSDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMassDensityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARVELOCITYMEASURE:
        m_out << "IFCLINEARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcLinearVelocityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCKINEMATICVISCOSITYMEASURE:
        m_out << "IFCKINEMATICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcKinematicViscosityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCINTEGERCOUNTRATEMEASURE:
        m_out << "IFCINTEGERCOUNTRATEMEASURE(";
        writeAttribute(selectData->getIfcIntegerCountRateMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCHEATFLUXDENSITYMEASURE:
        m_out << "IFCHEATFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcHeatFluxDensityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCFREQUENCYMEASURE:
        m_out << "IFCFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcFrequencyMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCENERGYMEASURE:
        m_out << "IFCENERGYMEASURE(";
        writeAttribute(selectData->getIfcEnergyMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICVOLTAGEMEASURE:
        m_out << "IFCELECTRICVOLTAGEMEASURE(";
        writeAttribute(selectData->getIfcElectricVoltageMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCDYNAMICVISCOSITYMEASURE:
        m_out << "IFCDYNAMICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcDynamicViscosityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCCOMPOUNDPLANEANGLEMEASURE:
        m_out << "IFCCOMPOUNDPLANEANGLEMEASURE(";
        m_out << "(";
        {
            IfcCompoundPlaneAngleMeasure::iterator step_it0 = (selectData->getIfcCompoundPlaneAngleMeasure()).begin();
            if ((selectData->getIfcCompoundPlaneAngleMeasure()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (selectData->getIfcCompoundPlaneAngleMeasure()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCANGULARVELOCITYMEASURE:
        m_out << "IFCANGULARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcAngularVelocityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALCONDUCTIVITYMEASURE:
        m_out << "IFCTHERMALCONDUCTIVITYMEASURE(";
        writeAttribute(selectData->getIfcThermalConductivityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMOLECULARWEIGHTMEASURE:
        m_out << "IFCMOLECULARWEIGHTMEASURE(";
        writeAttribute(selectData->getIfcMolecularWeightMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCVAPORPERMEABILITYMEASURE:
        m_out << "IFCVAPORPERMEABILITYMEASURE(";
        writeAttribute(selectData->getIfcVaporPermeabilityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMOISTUREDIFFUSIVITYMEASURE:
        m_out << "IFCMOISTUREDIFFUSIVITYMEASURE(";
        writeAttribute(selectData->getIfcMoistureDiffusivityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCISOTHERMALMOISTURECAPACITYMEASURE:
        m_out << "IFCISOTHERMALMOISTURECAPACITYMEASURE(";
        writeAttribute(selectData->getIfcIsothermalMoistureCapacityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCSPECIFICHEATCAPACITYMEASURE:
        m_out << "IFCSPECIFICHEATCAPACITYMEASURE(";
        writeAttribute(selectData->getIfcSpecificHeatCapacityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMONETARYMEASURE:
        m_out << "IFCMONETARYMEASURE(";
        writeAttribute(selectData->getIfcMonetaryMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMAGNETICFLUXDENSITYMEASURE:
        m_out << "IFCMAGNETICFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxDensityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMAGNETICFLUXMEASURE:
        m_out << "IFCMAGNETICFLUXMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCLUMINOUSFLUXMEASURE:
        m_out << "IFCLUMINOUSFLUXMEASURE(";
        writeAttribute(selectData->getIfcLuminousFluxMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCFORCEMEASURE:
        m_out << "IFCFORCEMEASURE(";
        writeAttribute(selectData->getIfcForceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCINDUCTANCEMEASURE:
        m_out << "IFCINDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcInductanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCILLUMINANCEMEASURE:
        m_out << "IFCILLUMINANCEMEASURE(";
        writeAttribute(selectData->getIfcIlluminanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICRESISTANCEMEASURE:
        m_out << "IFCELECTRICRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricResistanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICCONDUCTANCEMEASURE:
        m_out << "IFCELECTRICCONDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricConductanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICCHARGEMEASURE:
        m_out << "IFCELECTRICCHARGEMEASURE(";
        writeAttribute(selectData->getIfcElectricChargeMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCDOSEEQUIVALENTMEASURE:
        m_out << "IFCDOSEEQUIVALENTMEASURE(";
        writeAttribute(selectData->getIfcDoseEquivalentMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCELECTRICCAPACITANCEMEASURE:
        m_out << "IFCELECTRICCAPACITANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricCapacitanceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCABSORBEDDOSEMEASURE:
        m_out << "IFCABSORBEDDOSEMEASURE(";
        writeAttribute(selectData->getIfcAbsorbedDoseMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCRADIOACTIVITYMEASURE:
        m_out << "IFCRADIOACTIVITYMEASURE(";
        writeAttribute(selectData->getIfcRadioActivityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCROTATIONALFREQUENCYMEASURE:
        m_out << "IFCROTATIONALFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcRotationalFrequencyMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTORQUEMEASURE:
        m_out << "IFCTORQUEMEASURE(";
        writeAttribute(selectData->getIfcTorqueMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCACCELERATIONMEASURE:
        m_out << "IFCACCELERATIONMEASURE(";
        writeAttribute(selectData->getIfcAccelerationMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARFORCEMEASURE:
        m_out << "IFCLINEARFORCEMEASURE(";
        writeAttribute(selectData->getIfcLinearForceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARSTIFFNESSMEASURE:
        m_out << "IFCLINEARSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcLinearStiffnessMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFSUBGRADEREACTIONMEASURE:
        m_out << "IFCMODULUSOFSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfSubgradeReactionMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFELASTICITYMEASURE:
        m_out << "IFCMODULUSOFELASTICITYMEASURE(";
        writeAttribute(selectData->getIfcModulusOfElasticityMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMOMENTOFINERTIAMEASURE:
        m_out << "IFCMOMENTOFINERTIAMEASURE(";
        writeAttribute(selectData->getIfcMomentOfInertiaMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCPLANARFORCEMEASURE:
        m_out << "IFCPLANARFORCEMEASURE(";
        writeAttribute(selectData->getIfcPlanarForceMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCROTATIONALSTIFFNESSMEASURE:
        m_out << "IFCROTATIONALSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcRotationalStiffnessMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCSHEARMODULUSMEASURE:
        m_out << "IFCSHEARMODULUSMEASURE(";
        writeAttribute(selectData->getIfcShearModulusMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCLINEARMOMENTMEASURE:
        m_out << "IFCLINEARMOMENTMEASURE(";
        writeAttribute(selectData->getIfcLinearMomentMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE:
        m_out << "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityDistributionMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCCURVATUREMEASURE:
        m_out << "IFCCURVATUREMEASURE(";
        writeAttribute(selectData->getIfcCurvatureMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMASSPERLENGTHMEASURE:
        m_out << "IFCMASSPERLENGTHMEASURE(";
        writeAttribute(selectData->getIfcMassPerLengthMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE:
        m_out << "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfLinearSubgradeReactionMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE:
        m_out << "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfRotationalSubgradeReactionMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCROTATIONALMASSMEASURE:
        m_out << "IFCROTATIONALMASSMEASURE(";
        writeAttribute(selectData->getIfcRotationalMassMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCSECTIONALAREAINTEGRALMEASURE:
        m_out << "IFCSECTIONALAREAINTEGRALMEASURE(";
        writeAttribute(selectData->getIfcSectionalAreaIntegralMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCSECTIONMODULUSMEASURE:
        m_out << "IFCSECTIONMODULUSMEASURE(";
        writeAttribute(selectData->getIfcSectionModulusMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTEMPERATUREGRADIENTMEASURE:
        m_out << "IFCTEMPERATUREGRADIENTMEASURE(";
        writeAttribute(selectData->getIfcTemperatureGradientMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCTHERMALEXPANSIONCOEFFICIENTMEASURE:
        m_out << "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE(";
        writeAttribute(selectData->getIfcThermalExpansionCoefficientMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCWARPINGCONSTANTMEASURE:
        m_out << "IFCWARPINGCONSTANTMEASURE(";
        writeAttribute(selectData->getIfcWarpingConstantMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCWARPINGMOMENTMEASURE:
        m_out << "IFCWARPINGMOMENTMEASURE(";
        writeAttribute(selectData->getIfcWarpingMomentMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCSOUNDPOWERMEASURE:
        m_out << "IFCSOUNDPOWERMEASURE(";
        writeAttribute(selectData->getIfcSoundPowerMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCSOUNDPRESSUREMEASURE:
        m_out << "IFCSOUNDPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcSoundPressureMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCHEATINGVALUEMEASURE:
        m_out << "IFCHEATINGVALUEMEASURE(";
        writeAttribute(selectData->getIfcHeatingValueMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCPHMEASURE:
        m_out << "IFCPHMEASURE(";
        writeAttribute(selectData->getIfcPHMeasure());
        m_out << ")";
        break;
    case IfcDerivedMeasureValue::IFCIONCONCENTRATIONMEASURE:
        m_out << "IFCIONCONCENTRATIONMEASURE(";
        writeAttribute(selectData->getIfcIonConcentrationMeasure());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcFooting(IfcFooting *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcFootingTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcFootingTypeEnum(IfcFootingTypeEnum enumData) {
    switch(enumData) {
    case IfcFootingTypeEnum_FOOTING_BEAM:
        m_out << ".FOOTING_BEAM.";
        break;
    case IfcFootingTypeEnum_PAD_FOOTING:
        m_out << ".PAD_FOOTING.";
        break;
    case IfcFootingTypeEnum_PILE_CAP:
        m_out << ".PILE_CAP.";
        break;
    case IfcFootingTypeEnum_STRIP_FOOTING:
        m_out << ".STRIP_FOOTING.";
        break;
    case IfcFootingTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcFootingTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcFuelProperties(IfcFuelProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCombustionTemperature())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCombustionTemperature());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCarbonContent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCarbonContent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLowerHeatingValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLowerHeatingValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHigherHeatingValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHigherHeatingValue());
    }
}

void SPFWriter::writeIfcFurnishingElement(IfcFurnishingElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcFurnishingElementType(IfcFurnishingElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcFurnitureStandard(IfcFurnitureStandard *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcFurnitureType(IfcFurnitureType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getAssemblyPlace())) {
        m_out << "$";
    }
    else {
        writeIfcAssemblyPlaceEnum(ptr->getAssemblyPlace());
    }
}

void SPFWriter::writeIfcGasTerminalType(IfcGasTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcGasTerminalTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcGasTerminalTypeEnum(IfcGasTerminalTypeEnum enumData) {
    switch(enumData) {
    case IfcGasTerminalTypeEnum_GASAPPLIANCE:
        m_out << ".GASAPPLIANCE.";
        break;
    case IfcGasTerminalTypeEnum_GASBOOSTER:
        m_out << ".GASBOOSTER.";
        break;
    case IfcGasTerminalTypeEnum_GASBURNER:
        m_out << ".GASBURNER.";
        break;
    case IfcGasTerminalTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcGasTerminalTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcGeneralMaterialProperties(IfcGeneralMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMolecularWeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMolecularWeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPorosity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPorosity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMassDensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMassDensity());
    }
}

void SPFWriter::writeIfcGeneralProfileProperties(IfcGeneralProfileProperties *ptr) {
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPhysicalWeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPhysicalWeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPerimeter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPerimeter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumPlateThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumPlateThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumPlateThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumPlateThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCrossSectionArea());
    }
}

void SPFWriter::writeIfcGeometricCurveSet(IfcGeometricCurveSet *ptr) {
    if (Step::isUnset(ptr->getElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcGeometricSetSelect > >::iterator step_it0 = (ptr->getElements()).begin();
            if ((ptr->getElements()).size()) {
                writeIfcGeometricSetSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getElements()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcGeometricSetSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcGeometricSetSelect(IfcGeometricSetSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcGeometricSetSelect::IFCPOINT:
        writeAttribute(selectData->getIfcPoint());
        break;
    case IfcGeometricSetSelect::IFCCURVE:
        writeAttribute(selectData->getIfcCurve());
        break;
    case IfcGeometricSetSelect::IFCSURFACE:
        writeAttribute(selectData->getIfcSurface());
        break;
        }
}

void SPFWriter::writeIfcGeometricRepresentationContext(IfcGeometricRepresentationContext *ptr) {
    if (Step::isUnset(ptr->getContextIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getContextType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCoordinateSpaceDimension())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCoordinateSpaceDimension());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPrecision())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPrecision());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWorldCoordinateSystem())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getWorldCoordinateSystem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTrueNorth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTrueNorth());
    }
}

void SPFWriter::writeIfcGeometricRepresentationItem(IfcGeometricRepresentationItem *ptr) {
}

void SPFWriter::writeIfcGeometricRepresentationSubContext(IfcGeometricRepresentationSubContext *ptr) {
    if (Step::isUnset(ptr->getContextIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getContextType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextType());
    }
    m_out << ",";
    m_out << "*";
    m_out << ",";
    m_out << "*";
    m_out << ",";
    m_out << "*";
    m_out << ",";
    m_out << "*";
    m_out << ",";
    if (Step::isUnset(ptr->getParentContext())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getParentContext());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTargetScale())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTargetScale());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTargetView())) {
        m_out << "$";
    }
    else {
        writeIfcGeometricProjectionEnum(ptr->getTargetView());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedTargetView())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedTargetView());
    }
}

void SPFWriter::writeIfcGeometricProjectionEnum(IfcGeometricProjectionEnum enumData) {
    switch(enumData) {
    case IfcGeometricProjectionEnum_GRAPH_VIEW:
        m_out << ".GRAPH_VIEW.";
        break;
    case IfcGeometricProjectionEnum_SKETCH_VIEW:
        m_out << ".SKETCH_VIEW.";
        break;
    case IfcGeometricProjectionEnum_MODEL_VIEW:
        m_out << ".MODEL_VIEW.";
        break;
    case IfcGeometricProjectionEnum_PLAN_VIEW:
        m_out << ".PLAN_VIEW.";
        break;
    case IfcGeometricProjectionEnum_REFLECTED_PLAN_VIEW:
        m_out << ".REFLECTED_PLAN_VIEW.";
        break;
    case IfcGeometricProjectionEnum_SECTION_VIEW:
        m_out << ".SECTION_VIEW.";
        break;
    case IfcGeometricProjectionEnum_ELEVATION_VIEW:
        m_out << ".ELEVATION_VIEW.";
        break;
    case IfcGeometricProjectionEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcGeometricProjectionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcGeometricSet(IfcGeometricSet *ptr) {
    if (Step::isUnset(ptr->getElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcGeometricSetSelect > >::iterator step_it0 = (ptr->getElements()).begin();
            if ((ptr->getElements()).size()) {
                writeIfcGeometricSetSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getElements()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcGeometricSetSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcGrid(IfcGrid *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUAxes())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcGridAxis > >::iterator step_it0 = (ptr->getUAxes()).begin();
            if ((ptr->getUAxes()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getUAxes()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVAxes())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcGridAxis > >::iterator step_it0 = (ptr->getVAxes()).begin();
            if ((ptr->getVAxes()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getVAxes()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWAxes())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcGridAxis > >::iterator step_it0 = (ptr->getWAxes()).begin();
            if ((ptr->getWAxes()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getWAxes()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcGridAxis(IfcGridAxis *ptr) {
    if (Step::isUnset(ptr->getAxisTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxisTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxisCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxisCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSameSense())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSameSense());
    }
}

void SPFWriter::writeIfcGridPlacement(IfcGridPlacement *ptr) {
    if (Step::isUnset(ptr->getPlacementLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlacementLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlacementRefDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlacementRefDirection());
    }
}

void SPFWriter::writeIfcGroup(IfcGroup *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcHalfSpaceSolid(IfcHalfSpaceSolid *ptr) {
    if (Step::isUnset(ptr->getBaseSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAgreementFlag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAgreementFlag());
    }
}

void SPFWriter::writeIfcHeatExchangerType(IfcHeatExchangerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcHeatExchangerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcHeatExchangerTypeEnum(IfcHeatExchangerTypeEnum enumData) {
    switch(enumData) {
    case IfcHeatExchangerTypeEnum_PLATE:
        m_out << ".PLATE.";
        break;
    case IfcHeatExchangerTypeEnum_SHELLANDTUBE:
        m_out << ".SHELLANDTUBE.";
        break;
    case IfcHeatExchangerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcHeatExchangerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcHumidifierType(IfcHumidifierType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcHumidifierTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcHumidifierTypeEnum(IfcHumidifierTypeEnum enumData) {
    switch(enumData) {
    case IfcHumidifierTypeEnum_STEAMINJECTION:
        m_out << ".STEAMINJECTION.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICAIRWASHER:
        m_out << ".ADIABATICAIRWASHER.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICPAN:
        m_out << ".ADIABATICPAN.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICWETTEDELEMENT:
        m_out << ".ADIABATICWETTEDELEMENT.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICATOMIZING:
        m_out << ".ADIABATICATOMIZING.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICULTRASONIC:
        m_out << ".ADIABATICULTRASONIC.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICRIGIDMEDIA:
        m_out << ".ADIABATICRIGIDMEDIA.";
        break;
    case IfcHumidifierTypeEnum_ADIABATICCOMPRESSEDAIRNOZZLE:
        m_out << ".ADIABATICCOMPRESSEDAIRNOZZLE.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDELECTRIC:
        m_out << ".ASSISTEDELECTRIC.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDNATURALGAS:
        m_out << ".ASSISTEDNATURALGAS.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDPROPANE:
        m_out << ".ASSISTEDPROPANE.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDBUTANE:
        m_out << ".ASSISTEDBUTANE.";
        break;
    case IfcHumidifierTypeEnum_ASSISTEDSTEAM:
        m_out << ".ASSISTEDSTEAM.";
        break;
    case IfcHumidifierTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcHumidifierTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcHygroscopicMaterialProperties(IfcHygroscopicMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUpperVaporResistanceFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUpperVaporResistanceFactor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLowerVaporResistanceFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLowerVaporResistanceFactor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsothermalMoistureCapacity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsothermalMoistureCapacity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVaporPermeability())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVaporPermeability());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMoistureDiffusivity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMoistureDiffusivity());
    }
}

void SPFWriter::writeIfcIShapeProfileDef(IfcIShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFilletRadius());
    }
}

void SPFWriter::writeIfcImageTexture(IfcImageTexture *ptr) {
    if (Step::isUnset(ptr->getRepeatS())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatS());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepeatT())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatT());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTextureType())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceTextureEnum(ptr->getTextureType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextureTransform())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextureTransform());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUrlReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUrlReference());
    }
}

void SPFWriter::writeIfcInventory(IfcInventory *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getInventoryType())) {
        m_out << "$";
    }
    else {
        writeIfcInventoryTypeEnum(ptr->getInventoryType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getJurisdiction())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getJurisdiction());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResponsiblePersons())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPerson > >::iterator step_it0 = (ptr->getResponsiblePersons()).begin();
            if ((ptr->getResponsiblePersons()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getResponsiblePersons()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLastUpdateDate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLastUpdateDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurrentValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurrentValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOriginalValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOriginalValue());
    }
}

void SPFWriter::writeIfcInventoryTypeEnum(IfcInventoryTypeEnum enumData) {
    switch(enumData) {
    case IfcInventoryTypeEnum_ASSETINVENTORY:
        m_out << ".ASSETINVENTORY.";
        break;
    case IfcInventoryTypeEnum_SPACEINVENTORY:
        m_out << ".SPACEINVENTORY.";
        break;
    case IfcInventoryTypeEnum_FURNITUREINVENTORY:
        m_out << ".FURNITUREINVENTORY.";
        break;
    case IfcInventoryTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcInventoryTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcIrregularTimeSeries(IfcIrregularTimeSeries *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStartTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEndTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getEndTime());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTimeSeriesDataType())) {
        m_out << "$";
    }
    else {
        writeIfcTimeSeriesDataTypeEnum(ptr->getTimeSeriesDataType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getDataOrigin())) {
        m_out << "$";
    }
    else {
        writeIfcDataOriginEnum(ptr->getDataOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedDataOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedDataOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcIrregularTimeSeriesValue > >::iterator step_it0 = (ptr->getValues()).begin();
            if ((ptr->getValues()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getValues()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTimeSeriesDataTypeEnum(IfcTimeSeriesDataTypeEnum enumData) {
    switch(enumData) {
    case IfcTimeSeriesDataTypeEnum_CONTINUOUS:
        m_out << ".CONTINUOUS.";
        break;
    case IfcTimeSeriesDataTypeEnum_DISCRETE:
        m_out << ".DISCRETE.";
        break;
    case IfcTimeSeriesDataTypeEnum_DISCRETEBINARY:
        m_out << ".DISCRETEBINARY.";
        break;
    case IfcTimeSeriesDataTypeEnum_PIECEWISEBINARY:
        m_out << ".PIECEWISEBINARY.";
        break;
    case IfcTimeSeriesDataTypeEnum_PIECEWISECONSTANT:
        m_out << ".PIECEWISECONSTANT.";
        break;
    case IfcTimeSeriesDataTypeEnum_PIECEWISECONTINUOUS:
        m_out << ".PIECEWISECONTINUOUS.";
        break;
    case IfcTimeSeriesDataTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcDataOriginEnum(IfcDataOriginEnum enumData) {
    switch(enumData) {
    case IfcDataOriginEnum_MEASURED:
        m_out << ".MEASURED.";
        break;
    case IfcDataOriginEnum_PREDICTED:
        m_out << ".PREDICTED.";
        break;
    case IfcDataOriginEnum_SIMULATED:
        m_out << ".SIMULATED.";
        break;
    case IfcDataOriginEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcDataOriginEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcUnit(IfcUnit *selectData) {
    switch(selectData->currentType()) {
    case IfcUnit::IFCDERIVEDUNIT:
        writeAttribute(selectData->getIfcDerivedUnit());
        break;
    case IfcUnit::IFCNAMEDUNIT:
        writeAttribute(selectData->getIfcNamedUnit());
        break;
    case IfcUnit::IFCMONETARYUNIT:
        writeAttribute(selectData->getIfcMonetaryUnit());
        break;
        }
}

void SPFWriter::writeIfcIrregularTimeSeriesValue(IfcIrregularTimeSeriesValue *ptr) {
    if (Step::isUnset(ptr->getTimeStamp())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getTimeStamp());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getListValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getListValues()).begin();
            if ((ptr->getListValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getListValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcValue(IfcValue *selectData) {
    switch(selectData->currentType()) {
    case IfcValue::IFCVOLUMEMEASURE:
        m_out << "IFCVOLUMEMEASURE(";
        writeAttribute(selectData->getIfcVolumeMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTIMEMEASURE:
        m_out << "IFCTIMEMEASURE(";
        writeAttribute(selectData->getIfcTimeMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTHERMODYNAMICTEMPERATUREMEASURE:
        m_out << "IFCTHERMODYNAMICTEMPERATUREMEASURE(";
        writeAttribute(selectData->getIfcThermodynamicTemperatureMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSOLIDANGLEMEASURE:
        m_out << "IFCSOLIDANGLEMEASURE(";
        writeAttribute(selectData->getIfcSolidAngleMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPOSITIVERATIOMEASURE:
        m_out << "IFCPOSITIVERATIOMEASURE(";
        writeAttribute(selectData->getIfcPositiveRatioMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCRATIOMEASURE:
        m_out << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPOSITIVEPLANEANGLEMEASURE:
        m_out << "IFCPOSITIVEPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPositivePlaneAngleMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPLANEANGLEMEASURE:
        m_out << "IFCPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPlaneAngleMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPARAMETERVALUE:
        m_out << "IFCPARAMETERVALUE(";
        writeAttribute(selectData->getIfcParameterValue());
        m_out << ")";
        break;
    case IfcValue::IFCNUMERICMEASURE:
        m_out << "IFCNUMERICMEASURE(";
        writeAttribute(selectData->getIfcNumericMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMASSMEASURE:
        m_out << "IFCMASSMEASURE(";
        writeAttribute(selectData->getIfcMassMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPOSITIVELENGTHMEASURE:
        m_out << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLENGTHMEASURE:
        m_out << "IFCLENGTHMEASURE(";
        writeAttribute(selectData->getIfcLengthMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCELECTRICCURRENTMEASURE:
        m_out << "IFCELECTRICCURRENTMEASURE(";
        writeAttribute(selectData->getIfcElectricCurrentMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCDESCRIPTIVEMEASURE:
        m_out << "IFCDESCRIPTIVEMEASURE(";
        writeAttribute(selectData->getIfcDescriptiveMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCCOUNTMEASURE:
        m_out << "IFCCOUNTMEASURE(";
        writeAttribute(selectData->getIfcCountMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCCONTEXTDEPENDENTMEASURE:
        m_out << "IFCCONTEXTDEPENDENTMEASURE(";
        writeAttribute(selectData->getIfcContextDependentMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCAREAMEASURE:
        m_out << "IFCAREAMEASURE(";
        writeAttribute(selectData->getIfcAreaMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCAMOUNTOFSUBSTANCEMEASURE:
        m_out << "IFCAMOUNTOFSUBSTANCEMEASURE(";
        writeAttribute(selectData->getIfcAmountOfSubstanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLUMINOUSINTENSITYMEASURE:
        m_out << "IFCLUMINOUSINTENSITYMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCNORMALISEDRATIOMEASURE:
        m_out << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCCOMPLEXNUMBER:
        m_out << "IFCCOMPLEXNUMBER(";
        m_out << "(";
        {
            IfcComplexNumber::iterator step_it1 = (selectData->getIfcComplexNumber()).begin();
            if ((selectData->getIfcComplexNumber()).size()) {
                writeAttribute(*step_it1);
                for (step_it1++; step_it1 != (selectData->getIfcComplexNumber()).end(); step_it1++) {
                    m_out << ",";
                    writeAttribute(*step_it1);
                }
            }
        }
        m_out << ")";
        m_out << ")";
        break;
    case IfcValue::IFCINTEGER:
        m_out << "IFCINTEGER(";
        writeAttribute(selectData->getIfcInteger());
        m_out << ")";
        break;
    case IfcValue::IFCREAL:
        m_out << "IFCREAL(";
        writeAttribute(selectData->getIfcReal());
        m_out << ")";
        break;
    case IfcValue::IFCBOOLEAN:
        m_out << "IFCBOOLEAN(";
        writeAttribute(selectData->getIfcBoolean());
        m_out << ")";
        break;
    case IfcValue::IFCIDENTIFIER:
        m_out << "IFCIDENTIFIER(";
        writeAttribute(selectData->getIfcIdentifier());
        m_out << ")";
        break;
    case IfcValue::IFCTEXT:
        m_out << "IFCTEXT(";
        writeAttribute(selectData->getIfcText());
        m_out << ")";
        break;
    case IfcValue::IFCLABEL:
        m_out << "IFCLABEL(";
        writeAttribute(selectData->getIfcLabel());
        m_out << ")";
        break;
    case IfcValue::IFCLOGICAL:
        m_out << "IFCLOGICAL(";
        writeAttribute(selectData->getIfcLogical());
        m_out << ")";
        break;
    case IfcValue::IFCVOLUMETRICFLOWRATEMEASURE:
        m_out << "IFCVOLUMETRICFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcVolumetricFlowRateMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTIMESTAMP:
        m_out << "IFCTIMESTAMP(";
        writeAttribute(selectData->getIfcTimeStamp());
        m_out << ")";
        break;
    case IfcValue::IFCTHERMALTRANSMITTANCEMEASURE:
        m_out << "IFCTHERMALTRANSMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalTransmittanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTHERMALRESISTANCEMEASURE:
        m_out << "IFCTHERMALRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalResistanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTHERMALADMITTANCEMEASURE:
        m_out << "IFCTHERMALADMITTANCEMEASURE(";
        writeAttribute(selectData->getIfcThermalAdmittanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPRESSUREMEASURE:
        m_out << "IFCPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcPressureMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPOWERMEASURE:
        m_out << "IFCPOWERMEASURE(";
        writeAttribute(selectData->getIfcPowerMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMASSFLOWRATEMEASURE:
        m_out << "IFCMASSFLOWRATEMEASURE(";
        writeAttribute(selectData->getIfcMassFlowRateMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMASSDENSITYMEASURE:
        m_out << "IFCMASSDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMassDensityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLINEARVELOCITYMEASURE:
        m_out << "IFCLINEARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcLinearVelocityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCKINEMATICVISCOSITYMEASURE:
        m_out << "IFCKINEMATICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcKinematicViscosityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCINTEGERCOUNTRATEMEASURE:
        m_out << "IFCINTEGERCOUNTRATEMEASURE(";
        writeAttribute(selectData->getIfcIntegerCountRateMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCHEATFLUXDENSITYMEASURE:
        m_out << "IFCHEATFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcHeatFluxDensityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCFREQUENCYMEASURE:
        m_out << "IFCFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcFrequencyMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCENERGYMEASURE:
        m_out << "IFCENERGYMEASURE(";
        writeAttribute(selectData->getIfcEnergyMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCELECTRICVOLTAGEMEASURE:
        m_out << "IFCELECTRICVOLTAGEMEASURE(";
        writeAttribute(selectData->getIfcElectricVoltageMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCDYNAMICVISCOSITYMEASURE:
        m_out << "IFCDYNAMICVISCOSITYMEASURE(";
        writeAttribute(selectData->getIfcDynamicViscosityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCCOMPOUNDPLANEANGLEMEASURE:
        m_out << "IFCCOMPOUNDPLANEANGLEMEASURE(";
        m_out << "(";
        {
            IfcCompoundPlaneAngleMeasure::iterator step_it1 = (selectData->getIfcCompoundPlaneAngleMeasure()).begin();
            if ((selectData->getIfcCompoundPlaneAngleMeasure()).size()) {
                writeAttribute(*step_it1);
                for (step_it1++; step_it1 != (selectData->getIfcCompoundPlaneAngleMeasure()).end(); step_it1++) {
                    m_out << ",";
                    writeAttribute(*step_it1);
                }
            }
        }
        m_out << ")";
        m_out << ")";
        break;
    case IfcValue::IFCANGULARVELOCITYMEASURE:
        m_out << "IFCANGULARVELOCITYMEASURE(";
        writeAttribute(selectData->getIfcAngularVelocityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTHERMALCONDUCTIVITYMEASURE:
        m_out << "IFCTHERMALCONDUCTIVITYMEASURE(";
        writeAttribute(selectData->getIfcThermalConductivityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMOLECULARWEIGHTMEASURE:
        m_out << "IFCMOLECULARWEIGHTMEASURE(";
        writeAttribute(selectData->getIfcMolecularWeightMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCVAPORPERMEABILITYMEASURE:
        m_out << "IFCVAPORPERMEABILITYMEASURE(";
        writeAttribute(selectData->getIfcVaporPermeabilityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMOISTUREDIFFUSIVITYMEASURE:
        m_out << "IFCMOISTUREDIFFUSIVITYMEASURE(";
        writeAttribute(selectData->getIfcMoistureDiffusivityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCISOTHERMALMOISTURECAPACITYMEASURE:
        m_out << "IFCISOTHERMALMOISTURECAPACITYMEASURE(";
        writeAttribute(selectData->getIfcIsothermalMoistureCapacityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSPECIFICHEATCAPACITYMEASURE:
        m_out << "IFCSPECIFICHEATCAPACITYMEASURE(";
        writeAttribute(selectData->getIfcSpecificHeatCapacityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMONETARYMEASURE:
        m_out << "IFCMONETARYMEASURE(";
        writeAttribute(selectData->getIfcMonetaryMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMAGNETICFLUXDENSITYMEASURE:
        m_out << "IFCMAGNETICFLUXDENSITYMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxDensityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMAGNETICFLUXMEASURE:
        m_out << "IFCMAGNETICFLUXMEASURE(";
        writeAttribute(selectData->getIfcMagneticFluxMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLUMINOUSFLUXMEASURE:
        m_out << "IFCLUMINOUSFLUXMEASURE(";
        writeAttribute(selectData->getIfcLuminousFluxMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCFORCEMEASURE:
        m_out << "IFCFORCEMEASURE(";
        writeAttribute(selectData->getIfcForceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCINDUCTANCEMEASURE:
        m_out << "IFCINDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcInductanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCILLUMINANCEMEASURE:
        m_out << "IFCILLUMINANCEMEASURE(";
        writeAttribute(selectData->getIfcIlluminanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCELECTRICRESISTANCEMEASURE:
        m_out << "IFCELECTRICRESISTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricResistanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCELECTRICCONDUCTANCEMEASURE:
        m_out << "IFCELECTRICCONDUCTANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricConductanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCELECTRICCHARGEMEASURE:
        m_out << "IFCELECTRICCHARGEMEASURE(";
        writeAttribute(selectData->getIfcElectricChargeMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCDOSEEQUIVALENTMEASURE:
        m_out << "IFCDOSEEQUIVALENTMEASURE(";
        writeAttribute(selectData->getIfcDoseEquivalentMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCELECTRICCAPACITANCEMEASURE:
        m_out << "IFCELECTRICCAPACITANCEMEASURE(";
        writeAttribute(selectData->getIfcElectricCapacitanceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCABSORBEDDOSEMEASURE:
        m_out << "IFCABSORBEDDOSEMEASURE(";
        writeAttribute(selectData->getIfcAbsorbedDoseMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCRADIOACTIVITYMEASURE:
        m_out << "IFCRADIOACTIVITYMEASURE(";
        writeAttribute(selectData->getIfcRadioActivityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCROTATIONALFREQUENCYMEASURE:
        m_out << "IFCROTATIONALFREQUENCYMEASURE(";
        writeAttribute(selectData->getIfcRotationalFrequencyMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTORQUEMEASURE:
        m_out << "IFCTORQUEMEASURE(";
        writeAttribute(selectData->getIfcTorqueMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCACCELERATIONMEASURE:
        m_out << "IFCACCELERATIONMEASURE(";
        writeAttribute(selectData->getIfcAccelerationMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLINEARFORCEMEASURE:
        m_out << "IFCLINEARFORCEMEASURE(";
        writeAttribute(selectData->getIfcLinearForceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLINEARSTIFFNESSMEASURE:
        m_out << "IFCLINEARSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcLinearStiffnessMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMODULUSOFSUBGRADEREACTIONMEASURE:
        m_out << "IFCMODULUSOFSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfSubgradeReactionMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMODULUSOFELASTICITYMEASURE:
        m_out << "IFCMODULUSOFELASTICITYMEASURE(";
        writeAttribute(selectData->getIfcModulusOfElasticityMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMOMENTOFINERTIAMEASURE:
        m_out << "IFCMOMENTOFINERTIAMEASURE(";
        writeAttribute(selectData->getIfcMomentOfInertiaMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPLANARFORCEMEASURE:
        m_out << "IFCPLANARFORCEMEASURE(";
        writeAttribute(selectData->getIfcPlanarForceMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCROTATIONALSTIFFNESSMEASURE:
        m_out << "IFCROTATIONALSTIFFNESSMEASURE(";
        writeAttribute(selectData->getIfcRotationalStiffnessMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSHEARMODULUSMEASURE:
        m_out << "IFCSHEARMODULUSMEASURE(";
        writeAttribute(selectData->getIfcShearModulusMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLINEARMOMENTMEASURE:
        m_out << "IFCLINEARMOMENTMEASURE(";
        writeAttribute(selectData->getIfcLinearMomentMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE:
        m_out << "IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityDistributionMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCCURVATUREMEASURE:
        m_out << "IFCCURVATUREMEASURE(";
        writeAttribute(selectData->getIfcCurvatureMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMASSPERLENGTHMEASURE:
        m_out << "IFCMASSPERLENGTHMEASURE(";
        writeAttribute(selectData->getIfcMassPerLengthMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE:
        m_out << "IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfLinearSubgradeReactionMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE:
        m_out << "IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE(";
        writeAttribute(selectData->getIfcModulusOfRotationalSubgradeReactionMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCROTATIONALMASSMEASURE:
        m_out << "IFCROTATIONALMASSMEASURE(";
        writeAttribute(selectData->getIfcRotationalMassMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSECTIONALAREAINTEGRALMEASURE:
        m_out << "IFCSECTIONALAREAINTEGRALMEASURE(";
        writeAttribute(selectData->getIfcSectionalAreaIntegralMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSECTIONMODULUSMEASURE:
        m_out << "IFCSECTIONMODULUSMEASURE(";
        writeAttribute(selectData->getIfcSectionModulusMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTEMPERATUREGRADIENTMEASURE:
        m_out << "IFCTEMPERATUREGRADIENTMEASURE(";
        writeAttribute(selectData->getIfcTemperatureGradientMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCTHERMALEXPANSIONCOEFFICIENTMEASURE:
        m_out << "IFCTHERMALEXPANSIONCOEFFICIENTMEASURE(";
        writeAttribute(selectData->getIfcThermalExpansionCoefficientMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCWARPINGCONSTANTMEASURE:
        m_out << "IFCWARPINGCONSTANTMEASURE(";
        writeAttribute(selectData->getIfcWarpingConstantMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCWARPINGMOMENTMEASURE:
        m_out << "IFCWARPINGMOMENTMEASURE(";
        writeAttribute(selectData->getIfcWarpingMomentMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSOUNDPOWERMEASURE:
        m_out << "IFCSOUNDPOWERMEASURE(";
        writeAttribute(selectData->getIfcSoundPowerMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCSOUNDPRESSUREMEASURE:
        m_out << "IFCSOUNDPRESSUREMEASURE(";
        writeAttribute(selectData->getIfcSoundPressureMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCHEATINGVALUEMEASURE:
        m_out << "IFCHEATINGVALUEMEASURE(";
        writeAttribute(selectData->getIfcHeatingValueMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCPHMEASURE:
        m_out << "IFCPHMEASURE(";
        writeAttribute(selectData->getIfcPHMeasure());
        m_out << ")";
        break;
    case IfcValue::IFCIONCONCENTRATIONMEASURE:
        m_out << "IFCIONCONCENTRATIONMEASURE(";
        writeAttribute(selectData->getIfcIonConcentrationMeasure());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcJunctionBoxType(IfcJunctionBoxType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcJunctionBoxTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcJunctionBoxTypeEnum(IfcJunctionBoxTypeEnum enumData) {
    switch(enumData) {
    case IfcJunctionBoxTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcJunctionBoxTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcLShapeProfileDef(IfcLShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLegSlope())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLegSlope());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
}

void SPFWriter::writeIfcLaborResource(IfcLaborResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSkillSet())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSkillSet());
    }
}

void SPFWriter::writeIfcLampType(IfcLampType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcLampTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcLampTypeEnum(IfcLampTypeEnum enumData) {
    switch(enumData) {
    case IfcLampTypeEnum_COMPACTFLUORESCENT:
        m_out << ".COMPACTFLUORESCENT.";
        break;
    case IfcLampTypeEnum_FLUORESCENT:
        m_out << ".FLUORESCENT.";
        break;
    case IfcLampTypeEnum_HIGHPRESSUREMERCURY:
        m_out << ".HIGHPRESSUREMERCURY.";
        break;
    case IfcLampTypeEnum_HIGHPRESSURESODIUM:
        m_out << ".HIGHPRESSURESODIUM.";
        break;
    case IfcLampTypeEnum_METALHALIDE:
        m_out << ".METALHALIDE.";
        break;
    case IfcLampTypeEnum_TUNGSTENFILAMENT:
        m_out << ".TUNGSTENFILAMENT.";
        break;
    case IfcLampTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcLampTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcLibraryInformation(IfcLibraryInformation *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVersion())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVersion());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPublisher())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPublisher());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVersionDate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVersionDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLibraryReference())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcLibraryReference > >::iterator step_it0 = (ptr->getLibraryReference()).begin();
            if ((ptr->getLibraryReference()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getLibraryReference()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcLibraryReference(IfcLibraryReference *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItemReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItemReference());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcLightDistributionData(IfcLightDistributionData *ptr) {
    if (Step::isUnset(ptr->getMainPlaneAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMainPlaneAngle());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondaryPlaneAngle())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcPlaneAngleMeasure >::iterator step_it0 = (ptr->getSecondaryPlaneAngle()).begin();
            if ((ptr->getSecondaryPlaneAngle()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getSecondaryPlaneAngle()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLuminousIntensity())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLuminousIntensityDistributionMeasure >::iterator step_it0 = (ptr->getLuminousIntensity()).begin();
            if ((ptr->getLuminousIntensity()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getLuminousIntensity()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcLightFixtureType(IfcLightFixtureType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcLightFixtureTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcLightFixtureTypeEnum(IfcLightFixtureTypeEnum enumData) {
    switch(enumData) {
    case IfcLightFixtureTypeEnum_POINTSOURCE:
        m_out << ".POINTSOURCE.";
        break;
    case IfcLightFixtureTypeEnum_DIRECTIONSOURCE:
        m_out << ".DIRECTIONSOURCE.";
        break;
    case IfcLightFixtureTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcLightFixtureTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcLightIntensityDistribution(IfcLightIntensityDistribution *ptr) {
    if (Step::isUnsetEnum(ptr->getLightDistributionCurve())) {
        m_out << "$";
    }
    else {
        writeIfcLightDistributionCurveEnum(ptr->getLightDistributionCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDistributionData())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcLightDistributionData > >::iterator step_it0 = (ptr->getDistributionData()).begin();
            if ((ptr->getDistributionData()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getDistributionData()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcLightDistributionCurveEnum(IfcLightDistributionCurveEnum enumData) {
    switch(enumData) {
    case IfcLightDistributionCurveEnum_TYPE_A:
        m_out << ".TYPE_A.";
        break;
    case IfcLightDistributionCurveEnum_TYPE_B:
        m_out << ".TYPE_B.";
        break;
    case IfcLightDistributionCurveEnum_TYPE_C:
        m_out << ".TYPE_C.";
        break;
    case IfcLightDistributionCurveEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcLightSource(IfcLightSource *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLightColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmbientIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmbientIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntensity());
    }
}

void SPFWriter::writeIfcLightSourceAmbient(IfcLightSourceAmbient *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLightColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmbientIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmbientIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntensity());
    }
}

void SPFWriter::writeIfcLightSourceDirectional(IfcLightSourceDirectional *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLightColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmbientIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmbientIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOrientation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientation());
    }
}

void SPFWriter::writeIfcLightSourceGoniometric(IfcLightSourceGoniometric *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLightColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmbientIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmbientIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getColourAppearance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getColourAppearance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getColourTemperature())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getColourTemperature());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLuminousFlux())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLuminousFlux());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getLightEmissionSource())) {
        m_out << "$";
    }
    else {
        writeIfcLightEmissionSourceEnum(ptr->getLightEmissionSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightDistributionDataSource())) {
        m_out << "$";
    }
    else {
        writeIfcLightDistributionDataSourceSelect(ptr->getLightDistributionDataSource());
    }
}

void SPFWriter::writeIfcLightEmissionSourceEnum(IfcLightEmissionSourceEnum enumData) {
    switch(enumData) {
    case IfcLightEmissionSourceEnum_COMPACTFLUORESCENT:
        m_out << ".COMPACTFLUORESCENT.";
        break;
    case IfcLightEmissionSourceEnum_FLUORESCENT:
        m_out << ".FLUORESCENT.";
        break;
    case IfcLightEmissionSourceEnum_HIGHPRESSUREMERCURY:
        m_out << ".HIGHPRESSUREMERCURY.";
        break;
    case IfcLightEmissionSourceEnum_HIGHPRESSURESODIUM:
        m_out << ".HIGHPRESSURESODIUM.";
        break;
    case IfcLightEmissionSourceEnum_LIGHTEMITTINGDIODE:
        m_out << ".LIGHTEMITTINGDIODE.";
        break;
    case IfcLightEmissionSourceEnum_LOWPRESSURESODIUM:
        m_out << ".LOWPRESSURESODIUM.";
        break;
    case IfcLightEmissionSourceEnum_LOWVOLTAGEHALOGEN:
        m_out << ".LOWVOLTAGEHALOGEN.";
        break;
    case IfcLightEmissionSourceEnum_MAINVOLTAGEHALOGEN:
        m_out << ".MAINVOLTAGEHALOGEN.";
        break;
    case IfcLightEmissionSourceEnum_METALHALIDE:
        m_out << ".METALHALIDE.";
        break;
    case IfcLightEmissionSourceEnum_TUNGSTENFILAMENT:
        m_out << ".TUNGSTENFILAMENT.";
        break;
    case IfcLightEmissionSourceEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcLightDistributionDataSourceSelect(IfcLightDistributionDataSourceSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcLightDistributionDataSourceSelect::IFCEXTERNALREFERENCE:
        writeAttribute(selectData->getIfcExternalReference());
        break;
    case IfcLightDistributionDataSourceSelect::IFCLIGHTINTENSITYDISTRIBUTION:
        writeAttribute(selectData->getIfcLightIntensityDistribution());
        break;
        }
}

void SPFWriter::writeIfcLightSourcePositional(IfcLightSourcePositional *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLightColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmbientIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmbientIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConstantAttenuation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConstantAttenuation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDistanceAttenuation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDistanceAttenuation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getQuadricAttenuation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getQuadricAttenuation());
    }
}

void SPFWriter::writeIfcLightSourceSpot(IfcLightSourceSpot *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLightColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLightColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAmbientIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAmbientIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntensity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntensity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConstantAttenuation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConstantAttenuation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDistanceAttenuation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDistanceAttenuation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getQuadricAttenuation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getQuadricAttenuation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOrientation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConcentrationExponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConcentrationExponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSpreadAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSpreadAngle());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBeamWidthAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBeamWidthAngle());
    }
}

void SPFWriter::writeIfcLine(IfcLine *ptr) {
    if (Step::isUnset(ptr->getPnt())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPnt());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDir())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDir());
    }
}

void SPFWriter::writeIfcLinearDimension(IfcLinearDimension *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcLocalPlacement(IfcLocalPlacement *ptr) {
    if (Step::isUnset(ptr->getPlacementRelTo())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlacementRelTo());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelativePlacement())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getRelativePlacement());
    }
}

void SPFWriter::writeIfcLocalTime(IfcLocalTime *ptr) {
    if (Step::isUnset(ptr->getHourComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHourComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinuteComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinuteComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondComponent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSecondComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getZone())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getZone());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDaylightSavingOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDaylightSavingOffset());
    }
}

void SPFWriter::writeIfcLoop(IfcLoop *ptr) {
}

void SPFWriter::writeIfcManifoldSolidBrep(IfcManifoldSolidBrep *ptr) {
    if (Step::isUnset(ptr->getOuter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuter());
    }
}

void SPFWriter::writeIfcMappedItem(IfcMappedItem *ptr) {
    if (Step::isUnset(ptr->getMappingSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMappingSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMappingTarget())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMappingTarget());
    }
}

void SPFWriter::writeIfcMaterial(IfcMaterial *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcMaterialClassificationRelationship(IfcMaterialClassificationRelationship *ptr) {
    if (Step::isUnset(ptr->getMaterialClassifications())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcClassificationNotationSelect > >::iterator step_it0 = (ptr->getMaterialClassifications()).begin();
            if ((ptr->getMaterialClassifications()).size()) {
                writeIfcClassificationNotationSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getMaterialClassifications()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcClassificationNotationSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getClassifiedMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getClassifiedMaterial());
    }
}

void SPFWriter::writeIfcMaterialDefinitionRepresentation(IfcMaterialDefinitionRepresentation *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentations())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentation > >::iterator step_it0 = (ptr->getRepresentations()).begin();
            if ((ptr->getRepresentations()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentations()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentedMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentedMaterial());
    }
}

void SPFWriter::writeIfcMaterialLayer(IfcMaterialLayer *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLayerThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLayerThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsVentilated())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsVentilated());
    }
}

void SPFWriter::writeIfcMaterialLayerSet(IfcMaterialLayerSet *ptr) {
    if (Step::isUnset(ptr->getMaterialLayers())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcMaterialLayer > >::iterator step_it0 = (ptr->getMaterialLayers()).begin();
            if ((ptr->getMaterialLayers()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getMaterialLayers()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLayerSetName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLayerSetName());
    }
}

void SPFWriter::writeIfcMaterialLayerSetUsage(IfcMaterialLayerSetUsage *ptr) {
    if (Step::isUnset(ptr->getForLayerSet())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForLayerSet());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getLayerSetDirection())) {
        m_out << "$";
    }
    else {
        writeIfcLayerSetDirectionEnum(ptr->getLayerSetDirection());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getDirectionSense())) {
        m_out << "$";
    }
    else {
        writeIfcDirectionSenseEnum(ptr->getDirectionSense());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOffsetFromReferenceLine())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOffsetFromReferenceLine());
    }
}

void SPFWriter::writeIfcLayerSetDirectionEnum(IfcLayerSetDirectionEnum enumData) {
    switch(enumData) {
    case IfcLayerSetDirectionEnum_AXIS1:
        m_out << ".AXIS1.";
        break;
    case IfcLayerSetDirectionEnum_AXIS2:
        m_out << ".AXIS2.";
        break;
    case IfcLayerSetDirectionEnum_AXIS3:
        m_out << ".AXIS3.";
        break;
        }
}

void SPFWriter::writeIfcDirectionSenseEnum(IfcDirectionSenseEnum enumData) {
    switch(enumData) {
    case IfcDirectionSenseEnum_POSITIVE:
        m_out << ".POSITIVE.";
        break;
    case IfcDirectionSenseEnum_NEGATIVE:
        m_out << ".NEGATIVE.";
        break;
        }
}

void SPFWriter::writeIfcMaterialList(IfcMaterialList *ptr) {
    if (Step::isUnset(ptr->getMaterials())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcMaterial > >::iterator step_it0 = (ptr->getMaterials()).begin();
            if ((ptr->getMaterials()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getMaterials()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcMaterialProperties(IfcMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
}

void SPFWriter::writeIfcMeasureWithUnit(IfcMeasureWithUnit *ptr) {
    if (Step::isUnset(ptr->getValueComponent())) {
        m_out << "$";
    }
    else {
        writeIfcValue(ptr->getValueComponent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnitComponent())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnitComponent());
    }
}

void SPFWriter::writeIfcMechanicalConcreteMaterialProperties(IfcMechanicalConcreteMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDynamicViscosity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDynamicViscosity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYoungModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYoungModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPoissonRatio())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPoissonRatio());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalExpansionCoefficient())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalExpansionCoefficient());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCompressiveStrength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCompressiveStrength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaxAggregateSize())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaxAggregateSize());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAdmixturesDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAdmixturesDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWorkability())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWorkability());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProtectivePoreRatio())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProtectivePoreRatio());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWaterImpermeability())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWaterImpermeability());
    }
}

void SPFWriter::writeIfcMechanicalFastener(IfcMechanicalFastener *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNominalDiameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNominalDiameter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNominalLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNominalLength());
    }
}

void SPFWriter::writeIfcMechanicalFastenerType(IfcMechanicalFastenerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcMechanicalMaterialProperties(IfcMechanicalMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDynamicViscosity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDynamicViscosity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYoungModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYoungModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPoissonRatio())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPoissonRatio());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalExpansionCoefficient())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalExpansionCoefficient());
    }
}

void SPFWriter::writeIfcMechanicalSteelMaterialProperties(IfcMechanicalSteelMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDynamicViscosity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDynamicViscosity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYoungModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYoungModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPoissonRatio())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPoissonRatio());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalExpansionCoefficient())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalExpansionCoefficient());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYieldStress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYieldStress());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUltimateStress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUltimateStress());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUltimateStrain())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUltimateStrain());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHardeningModule())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHardeningModule());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProportionalStress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProportionalStress());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlasticStrain())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlasticStrain());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelaxations())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRelaxation > >::iterator step_it0 = (ptr->getRelaxations()).begin();
            if ((ptr->getRelaxations()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelaxations()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcMember(IfcMember *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcMemberType(IfcMemberType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcMemberTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcMemberTypeEnum(IfcMemberTypeEnum enumData) {
    switch(enumData) {
    case IfcMemberTypeEnum_BRACE:
        m_out << ".BRACE.";
        break;
    case IfcMemberTypeEnum_CHORD:
        m_out << ".CHORD.";
        break;
    case IfcMemberTypeEnum_COLLAR:
        m_out << ".COLLAR.";
        break;
    case IfcMemberTypeEnum_MEMBER:
        m_out << ".MEMBER.";
        break;
    case IfcMemberTypeEnum_MULLION:
        m_out << ".MULLION.";
        break;
    case IfcMemberTypeEnum_PLATE:
        m_out << ".PLATE.";
        break;
    case IfcMemberTypeEnum_POST:
        m_out << ".POST.";
        break;
    case IfcMemberTypeEnum_PURLIN:
        m_out << ".PURLIN.";
        break;
    case IfcMemberTypeEnum_RAFTER:
        m_out << ".RAFTER.";
        break;
    case IfcMemberTypeEnum_STRINGER:
        m_out << ".STRINGER.";
        break;
    case IfcMemberTypeEnum_STRUT:
        m_out << ".STRUT.";
        break;
    case IfcMemberTypeEnum_STUD:
        m_out << ".STUD.";
        break;
    case IfcMemberTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcMemberTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcMetric(IfcMetric *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConstraintGrade())) {
        m_out << "$";
    }
    else {
        writeIfcConstraintEnum(ptr->getConstraintGrade());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConstraintSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConstraintSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreatingActor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getCreatingActor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCreationTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedGrade());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getBenchmark())) {
        m_out << "$";
    }
    else {
        writeIfcBenchmarkEnum(ptr->getBenchmark());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getValueSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getValueSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDataValue())) {
        m_out << "$";
    }
    else {
        writeIfcMetricValueSelect(ptr->getDataValue());
    }
}

void SPFWriter::writeIfcBenchmarkEnum(IfcBenchmarkEnum enumData) {
    switch(enumData) {
    case IfcBenchmarkEnum_GREATERTHAN:
        m_out << ".GREATERTHAN.";
        break;
    case IfcBenchmarkEnum_GREATERTHANOREQUALTO:
        m_out << ".GREATERTHANOREQUALTO.";
        break;
    case IfcBenchmarkEnum_LESSTHAN:
        m_out << ".LESSTHAN.";
        break;
    case IfcBenchmarkEnum_LESSTHANOREQUALTO:
        m_out << ".LESSTHANOREQUALTO.";
        break;
    case IfcBenchmarkEnum_EQUALTO:
        m_out << ".EQUALTO.";
        break;
    case IfcBenchmarkEnum_NOTEQUALTO:
        m_out << ".NOTEQUALTO.";
        break;
        }
}

void SPFWriter::writeIfcMetricValueSelect(IfcMetricValueSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcMetricValueSelect::IFCCALENDARDATE:
        writeAttribute(selectData->getIfcCalendarDate());
        break;
    case IfcMetricValueSelect::IFCLOCALTIME:
        writeAttribute(selectData->getIfcLocalTime());
        break;
    case IfcMetricValueSelect::IFCDATEANDTIME:
        writeAttribute(selectData->getIfcDateAndTime());
        break;
    case IfcMetricValueSelect::IFCMEASUREWITHUNIT:
        writeAttribute(selectData->getIfcMeasureWithUnit());
        break;
    case IfcMetricValueSelect::IFCTABLE:
        writeAttribute(selectData->getIfcTable());
        break;
    case IfcMetricValueSelect::IFCTEXT:
        m_out << "IFCTEXT(";
        writeAttribute(selectData->getIfcText());
        m_out << ")";
        break;
    case IfcMetricValueSelect::IFCTIMESERIES:
        writeAttribute(selectData->getIfcTimeSeries());
        break;
    case IfcMetricValueSelect::IFCCOSTVALUE:
        writeAttribute(selectData->getIfcCostValue());
        break;
        }
}

void SPFWriter::writeIfcMonetaryUnit(IfcMonetaryUnit *ptr) {
    if (Step::isUnsetEnum(ptr->getCurrency())) {
        m_out << "$";
    }
    else {
        writeIfcCurrencyEnum(ptr->getCurrency());
    }
}

void SPFWriter::writeIfcCurrencyEnum(IfcCurrencyEnum enumData) {
    switch(enumData) {
    case IfcCurrencyEnum_AED:
        m_out << ".AED.";
        break;
    case IfcCurrencyEnum_AES:
        m_out << ".AES.";
        break;
    case IfcCurrencyEnum_ATS:
        m_out << ".ATS.";
        break;
    case IfcCurrencyEnum_AUD:
        m_out << ".AUD.";
        break;
    case IfcCurrencyEnum_BBD:
        m_out << ".BBD.";
        break;
    case IfcCurrencyEnum_BEG:
        m_out << ".BEG.";
        break;
    case IfcCurrencyEnum_BGL:
        m_out << ".BGL.";
        break;
    case IfcCurrencyEnum_BHD:
        m_out << ".BHD.";
        break;
    case IfcCurrencyEnum_BMD:
        m_out << ".BMD.";
        break;
    case IfcCurrencyEnum_BND:
        m_out << ".BND.";
        break;
    case IfcCurrencyEnum_BRL:
        m_out << ".BRL.";
        break;
    case IfcCurrencyEnum_BSD:
        m_out << ".BSD.";
        break;
    case IfcCurrencyEnum_BWP:
        m_out << ".BWP.";
        break;
    case IfcCurrencyEnum_BZD:
        m_out << ".BZD.";
        break;
    case IfcCurrencyEnum_CAD:
        m_out << ".CAD.";
        break;
    case IfcCurrencyEnum_CBD:
        m_out << ".CBD.";
        break;
    case IfcCurrencyEnum_CHF:
        m_out << ".CHF.";
        break;
    case IfcCurrencyEnum_CLP:
        m_out << ".CLP.";
        break;
    case IfcCurrencyEnum_CNY:
        m_out << ".CNY.";
        break;
    case IfcCurrencyEnum_CYS:
        m_out << ".CYS.";
        break;
    case IfcCurrencyEnum_CZK:
        m_out << ".CZK.";
        break;
    case IfcCurrencyEnum_DDP:
        m_out << ".DDP.";
        break;
    case IfcCurrencyEnum_DEM:
        m_out << ".DEM.";
        break;
    case IfcCurrencyEnum_DKK:
        m_out << ".DKK.";
        break;
    case IfcCurrencyEnum_EGL:
        m_out << ".EGL.";
        break;
    case IfcCurrencyEnum_EST:
        m_out << ".EST.";
        break;
    case IfcCurrencyEnum_EUR:
        m_out << ".EUR.";
        break;
    case IfcCurrencyEnum_FAK:
        m_out << ".FAK.";
        break;
    case IfcCurrencyEnum_FIM:
        m_out << ".FIM.";
        break;
    case IfcCurrencyEnum_FJD:
        m_out << ".FJD.";
        break;
    case IfcCurrencyEnum_FKP:
        m_out << ".FKP.";
        break;
    case IfcCurrencyEnum_FRF:
        m_out << ".FRF.";
        break;
    case IfcCurrencyEnum_GBP:
        m_out << ".GBP.";
        break;
    case IfcCurrencyEnum_GIP:
        m_out << ".GIP.";
        break;
    case IfcCurrencyEnum_GMD:
        m_out << ".GMD.";
        break;
    case IfcCurrencyEnum_GRX:
        m_out << ".GRX.";
        break;
    case IfcCurrencyEnum_HKD:
        m_out << ".HKD.";
        break;
    case IfcCurrencyEnum_HUF:
        m_out << ".HUF.";
        break;
    case IfcCurrencyEnum_ICK:
        m_out << ".ICK.";
        break;
    case IfcCurrencyEnum_IDR:
        m_out << ".IDR.";
        break;
    case IfcCurrencyEnum_ILS:
        m_out << ".ILS.";
        break;
    case IfcCurrencyEnum_INR:
        m_out << ".INR.";
        break;
    case IfcCurrencyEnum_IRP:
        m_out << ".IRP.";
        break;
    case IfcCurrencyEnum_ITL:
        m_out << ".ITL.";
        break;
    case IfcCurrencyEnum_JMD:
        m_out << ".JMD.";
        break;
    case IfcCurrencyEnum_JOD:
        m_out << ".JOD.";
        break;
    case IfcCurrencyEnum_JPY:
        m_out << ".JPY.";
        break;
    case IfcCurrencyEnum_KES:
        m_out << ".KES.";
        break;
    case IfcCurrencyEnum_KRW:
        m_out << ".KRW.";
        break;
    case IfcCurrencyEnum_KWD:
        m_out << ".KWD.";
        break;
    case IfcCurrencyEnum_KYD:
        m_out << ".KYD.";
        break;
    case IfcCurrencyEnum_LKR:
        m_out << ".LKR.";
        break;
    case IfcCurrencyEnum_LUF:
        m_out << ".LUF.";
        break;
    case IfcCurrencyEnum_MTL:
        m_out << ".MTL.";
        break;
    case IfcCurrencyEnum_MUR:
        m_out << ".MUR.";
        break;
    case IfcCurrencyEnum_MXN:
        m_out << ".MXN.";
        break;
    case IfcCurrencyEnum_MYR:
        m_out << ".MYR.";
        break;
    case IfcCurrencyEnum_NLG:
        m_out << ".NLG.";
        break;
    case IfcCurrencyEnum_NZD:
        m_out << ".NZD.";
        break;
    case IfcCurrencyEnum_OMR:
        m_out << ".OMR.";
        break;
    case IfcCurrencyEnum_PGK:
        m_out << ".PGK.";
        break;
    case IfcCurrencyEnum_PHP:
        m_out << ".PHP.";
        break;
    case IfcCurrencyEnum_PKR:
        m_out << ".PKR.";
        break;
    case IfcCurrencyEnum_PLN:
        m_out << ".PLN.";
        break;
    case IfcCurrencyEnum_PTN:
        m_out << ".PTN.";
        break;
    case IfcCurrencyEnum_QAR:
        m_out << ".QAR.";
        break;
    case IfcCurrencyEnum_RUR:
        m_out << ".RUR.";
        break;
    case IfcCurrencyEnum_SAR:
        m_out << ".SAR.";
        break;
    case IfcCurrencyEnum_SCR:
        m_out << ".SCR.";
        break;
    case IfcCurrencyEnum_SEK:
        m_out << ".SEK.";
        break;
    case IfcCurrencyEnum_SGD:
        m_out << ".SGD.";
        break;
    case IfcCurrencyEnum_SKP:
        m_out << ".SKP.";
        break;
    case IfcCurrencyEnum_THB:
        m_out << ".THB.";
        break;
    case IfcCurrencyEnum_TRL:
        m_out << ".TRL.";
        break;
    case IfcCurrencyEnum_TTD:
        m_out << ".TTD.";
        break;
    case IfcCurrencyEnum_TWD:
        m_out << ".TWD.";
        break;
    case IfcCurrencyEnum_USD:
        m_out << ".USD.";
        break;
    case IfcCurrencyEnum_VEB:
        m_out << ".VEB.";
        break;
    case IfcCurrencyEnum_VND:
        m_out << ".VND.";
        break;
    case IfcCurrencyEnum_XEU:
        m_out << ".XEU.";
        break;
    case IfcCurrencyEnum_ZAR:
        m_out << ".ZAR.";
        break;
    case IfcCurrencyEnum_ZWD:
        m_out << ".ZWD.";
        break;
    case IfcCurrencyEnum_NOK:
        m_out << ".NOK.";
        break;
        }
}

void SPFWriter::writeIfcMotorConnectionType(IfcMotorConnectionType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcMotorConnectionTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcMotorConnectionTypeEnum(IfcMotorConnectionTypeEnum enumData) {
    switch(enumData) {
    case IfcMotorConnectionTypeEnum_BELTDRIVE:
        m_out << ".BELTDRIVE.";
        break;
    case IfcMotorConnectionTypeEnum_COUPLING:
        m_out << ".COUPLING.";
        break;
    case IfcMotorConnectionTypeEnum_DIRECTDRIVE:
        m_out << ".DIRECTDRIVE.";
        break;
    case IfcMotorConnectionTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcMotorConnectionTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcMove(IfcMove *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTaskId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTaskId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStatus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStatus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWorkMethod())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWorkMethod());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsMilestone())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsMilestone());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPriority())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPriority());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMoveFrom())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMoveFrom());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMoveTo())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMoveTo());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPunchList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcText >::iterator step_it0 = (ptr->getPunchList()).begin();
            if ((ptr->getPunchList()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getPunchList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcNamedUnit(IfcNamedUnit *ptr) {
    if (Step::isUnset(ptr->getDimensions())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDimensions());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getUnitType())) {
        m_out << "$";
    }
    else {
        writeIfcUnitEnum(ptr->getUnitType());
    }
}

void SPFWriter::writeIfcObject(IfcObject *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcObjectDefinition(IfcObjectDefinition *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcObjectPlacement(IfcObjectPlacement *ptr) {
}

void SPFWriter::writeIfcObjective(IfcObjective *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConstraintGrade())) {
        m_out << "$";
    }
    else {
        writeIfcConstraintEnum(ptr->getConstraintGrade());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConstraintSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConstraintSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreatingActor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getCreatingActor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCreationTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedGrade());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBenchmarkValues())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBenchmarkValues());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResultValues())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResultValues());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getObjectiveQualifier())) {
        m_out << "$";
    }
    else {
        writeIfcObjectiveEnum(ptr->getObjectiveQualifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedQualifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedQualifier());
    }
}

void SPFWriter::writeIfcObjectiveEnum(IfcObjectiveEnum enumData) {
    switch(enumData) {
    case IfcObjectiveEnum_CODECOMPLIANCE:
        m_out << ".CODECOMPLIANCE.";
        break;
    case IfcObjectiveEnum_DESIGNINTENT:
        m_out << ".DESIGNINTENT.";
        break;
    case IfcObjectiveEnum_HEALTHANDSAFETY:
        m_out << ".HEALTHANDSAFETY.";
        break;
    case IfcObjectiveEnum_REQUIREMENT:
        m_out << ".REQUIREMENT.";
        break;
    case IfcObjectiveEnum_SPECIFICATION:
        m_out << ".SPECIFICATION.";
        break;
    case IfcObjectiveEnum_TRIGGERCONDITION:
        m_out << ".TRIGGERCONDITION.";
        break;
    case IfcObjectiveEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcObjectiveEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcOccupant(IfcOccupant *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTheActor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getTheActor());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcOccupantTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcOccupantTypeEnum(IfcOccupantTypeEnum enumData) {
    switch(enumData) {
    case IfcOccupantTypeEnum_ASSIGNEE:
        m_out << ".ASSIGNEE.";
        break;
    case IfcOccupantTypeEnum_ASSIGNOR:
        m_out << ".ASSIGNOR.";
        break;
    case IfcOccupantTypeEnum_LESSEE:
        m_out << ".LESSEE.";
        break;
    case IfcOccupantTypeEnum_LESSOR:
        m_out << ".LESSOR.";
        break;
    case IfcOccupantTypeEnum_LETTINGAGENT:
        m_out << ".LETTINGAGENT.";
        break;
    case IfcOccupantTypeEnum_OWNER:
        m_out << ".OWNER.";
        break;
    case IfcOccupantTypeEnum_TENANT:
        m_out << ".TENANT.";
        break;
    case IfcOccupantTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcOccupantTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcOffsetCurve2D(IfcOffsetCurve2D *ptr) {
    if (Step::isUnset(ptr->getBasisCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDistance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDistance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
}

void SPFWriter::writeIfcOffsetCurve3D(IfcOffsetCurve3D *ptr) {
    if (Step::isUnset(ptr->getBasisCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDistance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDistance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRefDirection());
    }
}

void SPFWriter::writeIfcOneDirectionRepeatFactor(IfcOneDirectionRepeatFactor *ptr) {
    if (Step::isUnset(ptr->getRepeatFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatFactor());
    }
}

void SPFWriter::writeIfcOpenShell(IfcOpenShell *ptr) {
    if (Step::isUnset(ptr->getCfsFaces())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcFace > >::iterator step_it0 = (ptr->getCfsFaces()).begin();
            if ((ptr->getCfsFaces()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCfsFaces()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcOpeningElement(IfcOpeningElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcOpticalMaterialProperties(IfcOpticalMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVisibleTransmittance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVisibleTransmittance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSolarTransmittance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSolarTransmittance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalIrTransmittance())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalIrTransmittance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalIrEmissivityBack())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalIrEmissivityBack());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalIrEmissivityFront())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalIrEmissivityFront());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVisibleReflectanceBack())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVisibleReflectanceBack());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVisibleReflectanceFront())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVisibleReflectanceFront());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSolarReflectanceFront())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSolarReflectanceFront());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSolarReflectanceBack())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSolarReflectanceBack());
    }
}

void SPFWriter::writeIfcOrderAction(IfcOrderAction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTaskId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTaskId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStatus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStatus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWorkMethod())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWorkMethod());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsMilestone())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsMilestone());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPriority())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPriority());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getActionID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getActionID());
    }
}

void SPFWriter::writeIfcOrganization(IfcOrganization *ptr) {
    if (Step::isUnset(ptr->getId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRoles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcActorRole > >::iterator step_it0 = (ptr->getRoles()).begin();
            if ((ptr->getRoles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRoles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAddresses())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcAddress > >::iterator step_it0 = (ptr->getAddresses()).begin();
            if ((ptr->getAddresses()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getAddresses()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcOrganizationRelationship(IfcOrganizationRelationship *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingOrganization())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingOrganization());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedOrganizations())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcOrganization > >::iterator step_it0 = (ptr->getRelatedOrganizations()).begin();
            if ((ptr->getRelatedOrganizations()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedOrganizations()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcOrientedEdge(IfcOrientedEdge *ptr) {
    m_out << "*";
    m_out << ",";
    m_out << "*";
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOrientation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientation());
    }
}

void SPFWriter::writeIfcOutletType(IfcOutletType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcOutletTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcOutletTypeEnum(IfcOutletTypeEnum enumData) {
    switch(enumData) {
    case IfcOutletTypeEnum_AUDIOVISUALOUTLET:
        m_out << ".AUDIOVISUALOUTLET.";
        break;
    case IfcOutletTypeEnum_COMMUNICATIONSOUTLET:
        m_out << ".COMMUNICATIONSOUTLET.";
        break;
    case IfcOutletTypeEnum_POWEROUTLET:
        m_out << ".POWEROUTLET.";
        break;
    case IfcOutletTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcOutletTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcOwnerHistory(IfcOwnerHistory *ptr) {
    if (Step::isUnset(ptr->getOwningUser())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwningUser());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwningApplication())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwningApplication());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getState())) {
        m_out << "$";
    }
    else {
        writeIfcStateEnum(ptr->getState());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getChangeAction())) {
        m_out << "$";
    }
    else {
        writeIfcChangeActionEnum(ptr->getChangeAction());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLastModifiedDate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLastModifiedDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLastModifyingUser())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLastModifyingUser());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLastModifyingApplication())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLastModifyingApplication());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationDate())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCreationDate());
    }
}

void SPFWriter::writeIfcStateEnum(IfcStateEnum enumData) {
    switch(enumData) {
    case IfcStateEnum_READWRITE:
        m_out << ".READWRITE.";
        break;
    case IfcStateEnum_READONLY:
        m_out << ".READONLY.";
        break;
    case IfcStateEnum_LOCKED:
        m_out << ".LOCKED.";
        break;
    case IfcStateEnum_READWRITELOCKED:
        m_out << ".READWRITELOCKED.";
        break;
    case IfcStateEnum_READONLYLOCKED:
        m_out << ".READONLYLOCKED.";
        break;
        }
}

void SPFWriter::writeIfcChangeActionEnum(IfcChangeActionEnum enumData) {
    switch(enumData) {
    case IfcChangeActionEnum_NOCHANGE:
        m_out << ".NOCHANGE.";
        break;
    case IfcChangeActionEnum_MODIFIED:
        m_out << ".MODIFIED.";
        break;
    case IfcChangeActionEnum_ADDED:
        m_out << ".ADDED.";
        break;
    case IfcChangeActionEnum_DELETED:
        m_out << ".DELETED.";
        break;
    case IfcChangeActionEnum_MODIFIEDADDED:
        m_out << ".MODIFIEDADDED.";
        break;
    case IfcChangeActionEnum_MODIFIEDDELETED:
        m_out << ".MODIFIEDDELETED.";
        break;
        }
}

void SPFWriter::writeIfcParameterizedProfileDef(IfcParameterizedProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
}

void SPFWriter::writeIfcPath(IfcPath *ptr) {
    if (Step::isUnset(ptr->getEdgeList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcOrientedEdge > >::iterator step_it0 = (ptr->getEdgeList()).begin();
            if ((ptr->getEdgeList()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getEdgeList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPerformanceHistory(IfcPerformanceHistory *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLifeCyclePhase())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLifeCyclePhase());
    }
}

void SPFWriter::writeIfcPermeableCoveringProperties(IfcPermeableCoveringProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getOperationType())) {
        m_out << "$";
    }
    else {
        writeIfcPermeableCoveringOperationEnum(ptr->getOperationType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPanelPosition())) {
        m_out << "$";
    }
    else {
        writeIfcWindowPanelPositionEnum(ptr->getPanelPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFrameDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFrameDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFrameThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFrameThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShapeAspectStyle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShapeAspectStyle());
    }
}

void SPFWriter::writeIfcPermeableCoveringOperationEnum(IfcPermeableCoveringOperationEnum enumData) {
    switch(enumData) {
    case IfcPermeableCoveringOperationEnum_GRILL:
        m_out << ".GRILL.";
        break;
    case IfcPermeableCoveringOperationEnum_LOUVER:
        m_out << ".LOUVER.";
        break;
    case IfcPermeableCoveringOperationEnum_SCREEN:
        m_out << ".SCREEN.";
        break;
    case IfcPermeableCoveringOperationEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPermeableCoveringOperationEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWindowPanelPositionEnum(IfcWindowPanelPositionEnum enumData) {
    switch(enumData) {
    case IfcWindowPanelPositionEnum_LEFT:
        m_out << ".LEFT.";
        break;
    case IfcWindowPanelPositionEnum_MIDDLE:
        m_out << ".MIDDLE.";
        break;
    case IfcWindowPanelPositionEnum_RIGHT:
        m_out << ".RIGHT.";
        break;
    case IfcWindowPanelPositionEnum_BOTTOM:
        m_out << ".BOTTOM.";
        break;
    case IfcWindowPanelPositionEnum_TOP:
        m_out << ".TOP.";
        break;
    case IfcWindowPanelPositionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPermit(IfcPermit *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPermitID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPermitID());
    }
}

void SPFWriter::writeIfcPerson(IfcPerson *ptr) {
    if (Step::isUnset(ptr->getId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFamilyName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFamilyName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getGivenName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGivenName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMiddleNames())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getMiddleNames()).begin();
            if ((ptr->getMiddleNames()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getMiddleNames()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPrefixTitles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getPrefixTitles()).begin();
            if ((ptr->getPrefixTitles()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getPrefixTitles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSuffixTitles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getSuffixTitles()).begin();
            if ((ptr->getSuffixTitles()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getSuffixTitles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRoles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcActorRole > >::iterator step_it0 = (ptr->getRoles()).begin();
            if ((ptr->getRoles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRoles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAddresses())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcAddress > >::iterator step_it0 = (ptr->getAddresses()).begin();
            if ((ptr->getAddresses()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getAddresses()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPersonAndOrganization(IfcPersonAndOrganization *ptr) {
    if (Step::isUnset(ptr->getThePerson())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThePerson());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTheOrganization())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTheOrganization());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRoles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcActorRole > >::iterator step_it0 = (ptr->getRoles()).begin();
            if ((ptr->getRoles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRoles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPhysicalComplexQuantity(IfcPhysicalComplexQuantity *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasQuantities())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPhysicalQuantity > >::iterator step_it0 = (ptr->getHasQuantities()).begin();
            if ((ptr->getHasQuantities()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasQuantities()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDiscrimination())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDiscrimination());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getQuality())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getQuality());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUsage())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUsage());
    }
}

void SPFWriter::writeIfcPhysicalQuantity(IfcPhysicalQuantity *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcPhysicalSimpleQuantity(IfcPhysicalSimpleQuantity *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
}

void SPFWriter::writeIfcPile(IfcPile *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcPileTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConstructionType())) {
        m_out << "$";
    }
    else {
        writeIfcPileConstructionEnum(ptr->getConstructionType());
    }
}

void SPFWriter::writeIfcPileTypeEnum(IfcPileTypeEnum enumData) {
    switch(enumData) {
    case IfcPileTypeEnum_COHESION:
        m_out << ".COHESION.";
        break;
    case IfcPileTypeEnum_FRICTION:
        m_out << ".FRICTION.";
        break;
    case IfcPileTypeEnum_SUPPORT:
        m_out << ".SUPPORT.";
        break;
    case IfcPileTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPileTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPileConstructionEnum(IfcPileConstructionEnum enumData) {
    switch(enumData) {
    case IfcPileConstructionEnum_CAST_IN_PLACE:
        m_out << ".CAST_IN_PLACE.";
        break;
    case IfcPileConstructionEnum_COMPOSITE:
        m_out << ".COMPOSITE.";
        break;
    case IfcPileConstructionEnum_PRECAST_CONCRETE:
        m_out << ".PRECAST_CONCRETE.";
        break;
    case IfcPileConstructionEnum_PREFAB_STEEL:
        m_out << ".PREFAB_STEEL.";
        break;
    case IfcPileConstructionEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPileConstructionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPipeFittingType(IfcPipeFittingType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcPipeFittingTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcPipeFittingTypeEnum(IfcPipeFittingTypeEnum enumData) {
    switch(enumData) {
    case IfcPipeFittingTypeEnum_BEND:
        m_out << ".BEND.";
        break;
    case IfcPipeFittingTypeEnum_CONNECTOR:
        m_out << ".CONNECTOR.";
        break;
    case IfcPipeFittingTypeEnum_ENTRY:
        m_out << ".ENTRY.";
        break;
    case IfcPipeFittingTypeEnum_EXIT:
        m_out << ".EXIT.";
        break;
    case IfcPipeFittingTypeEnum_JUNCTION:
        m_out << ".JUNCTION.";
        break;
    case IfcPipeFittingTypeEnum_OBSTRUCTION:
        m_out << ".OBSTRUCTION.";
        break;
    case IfcPipeFittingTypeEnum_TRANSITION:
        m_out << ".TRANSITION.";
        break;
    case IfcPipeFittingTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPipeFittingTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPipeSegmentType(IfcPipeSegmentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcPipeSegmentTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcPipeSegmentTypeEnum(IfcPipeSegmentTypeEnum enumData) {
    switch(enumData) {
    case IfcPipeSegmentTypeEnum_FLEXIBLESEGMENT:
        m_out << ".FLEXIBLESEGMENT.";
        break;
    case IfcPipeSegmentTypeEnum_RIGIDSEGMENT:
        m_out << ".RIGIDSEGMENT.";
        break;
    case IfcPipeSegmentTypeEnum_GUTTER:
        m_out << ".GUTTER.";
        break;
    case IfcPipeSegmentTypeEnum_SPOOL:
        m_out << ".SPOOL.";
        break;
    case IfcPipeSegmentTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPipeSegmentTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPixelTexture(IfcPixelTexture *ptr) {
    if (Step::isUnset(ptr->getRepeatS())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatS());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepeatT())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatT());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTextureType())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceTextureEnum(ptr->getTextureType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextureTransform())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextureTransform());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getColourComponents())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getColourComponents());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPixel())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::Binary< 32 > >::iterator step_it0 = (ptr->getPixel()).begin();
            if ((ptr->getPixel()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getPixel()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPlacement(IfcPlacement *ptr) {
    if (Step::isUnset(ptr->getLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocation());
    }
}

void SPFWriter::writeIfcPlanarBox(IfcPlanarBox *ptr) {
    if (Step::isUnset(ptr->getSizeInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSizeInX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSizeInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSizeInY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlacement())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPlacement());
    }
}

void SPFWriter::writeIfcPlanarExtent(IfcPlanarExtent *ptr) {
    if (Step::isUnset(ptr->getSizeInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSizeInX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSizeInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSizeInY());
    }
}

void SPFWriter::writeIfcPlane(IfcPlane *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
}

void SPFWriter::writeIfcPlate(IfcPlate *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcPlateType(IfcPlateType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcPlateTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcPlateTypeEnum(IfcPlateTypeEnum enumData) {
    switch(enumData) {
    case IfcPlateTypeEnum_CURTAIN_PANEL:
        m_out << ".CURTAIN_PANEL.";
        break;
    case IfcPlateTypeEnum_SHEET:
        m_out << ".SHEET.";
        break;
    case IfcPlateTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPlateTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPoint(IfcPoint *ptr) {
}

void SPFWriter::writeIfcPointOnCurve(IfcPointOnCurve *ptr) {
    if (Step::isUnset(ptr->getBasisCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPointParameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPointParameter());
    }
}

void SPFWriter::writeIfcPointOnSurface(IfcPointOnSurface *ptr) {
    if (Step::isUnset(ptr->getBasisSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPointParameterU())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPointParameterU());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPointParameterV())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPointParameterV());
    }
}

void SPFWriter::writeIfcPolyLoop(IfcPolyLoop *ptr) {
    if (Step::isUnset(ptr->getPolygon())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCartesianPoint > >::iterator step_it0 = (ptr->getPolygon()).begin();
            if ((ptr->getPolygon()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getPolygon()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPolygonalBoundedHalfSpace(IfcPolygonalBoundedHalfSpace *ptr) {
    if (Step::isUnset(ptr->getBaseSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAgreementFlag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAgreementFlag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPolygonalBoundary())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPolygonalBoundary());
    }
}

void SPFWriter::writeIfcPolyline(IfcPolyline *ptr) {
    if (Step::isUnset(ptr->getPoints())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCartesianPoint > >::iterator step_it0 = (ptr->getPoints()).begin();
            if ((ptr->getPoints()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getPoints()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPort(IfcPort *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcPostalAddress(IfcPostalAddress *ptr) {
    if (Step::isUnsetEnum(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeIfcAddressTypeEnum(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInternalLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInternalLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAddressLines())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getAddressLines()).begin();
            if ((ptr->getAddressLines()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getAddressLines()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPostalBox())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPostalBox());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTown())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTown());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRegion())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRegion());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPostalCode())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPostalCode());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCountry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCountry());
    }
}

void SPFWriter::writeIfcPreDefinedColour(IfcPreDefinedColour *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedCurveFont(IfcPreDefinedCurveFont *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedDimensionSymbol(IfcPreDefinedDimensionSymbol *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedItem(IfcPreDefinedItem *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedPointMarkerSymbol(IfcPreDefinedPointMarkerSymbol *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedSymbol(IfcPreDefinedSymbol *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedTerminatorSymbol(IfcPreDefinedTerminatorSymbol *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPreDefinedTextFont(IfcPreDefinedTextFont *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPresentationLayerAssignment(IfcPresentationLayerAssignment *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAssignedItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcLayeredItem > >::iterator step_it0 = (ptr->getAssignedItems()).begin();
            if ((ptr->getAssignedItems()).size()) {
                writeIfcLayeredItem((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getAssignedItems()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcLayeredItem((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIdentifier());
    }
}

void SPFWriter::writeIfcLayeredItem(IfcLayeredItem *selectData) {
    switch(selectData->currentType()) {
    case IfcLayeredItem::IFCREPRESENTATIONITEM:
        writeAttribute(selectData->getIfcRepresentationItem());
        break;
    case IfcLayeredItem::IFCREPRESENTATION:
        writeAttribute(selectData->getIfcRepresentation());
        break;
        }
}

void SPFWriter::writeIfcPresentationLayerWithStyle(IfcPresentationLayerWithStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAssignedItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcLayeredItem > >::iterator step_it0 = (ptr->getAssignedItems()).begin();
            if ((ptr->getAssignedItems()).size()) {
                writeIfcLayeredItem((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getAssignedItems()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcLayeredItem((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLayerOn())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLayerOn());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLayerFrozen())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLayerFrozen());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLayerBlocked())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLayerBlocked());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLayerStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleSelect > >::iterator step_it0 = (ptr->getLayerStyles()).begin();
            if ((ptr->getLayerStyles()).size()) {
                writeIfcPresentationStyleSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getLayerStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcPresentationStyleSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPresentationStyleSelect(IfcPresentationStyleSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcPresentationStyleSelect::IFCNULLSTYLE:
        m_out << "IFCNULLSTYLE(";
        writeIfcNullStyle(selectData->getIfcNullStyle());
        m_out << ")";
        break;
    case IfcPresentationStyleSelect::IFCCURVESTYLE:
        writeAttribute(selectData->getIfcCurveStyle());
        break;
    case IfcPresentationStyleSelect::IFCSYMBOLSTYLE:
        writeAttribute(selectData->getIfcSymbolStyle());
        break;
    case IfcPresentationStyleSelect::IFCFILLAREASTYLE:
        writeAttribute(selectData->getIfcFillAreaStyle());
        break;
    case IfcPresentationStyleSelect::IFCTEXTSTYLE:
        writeAttribute(selectData->getIfcTextStyle());
        break;
    case IfcPresentationStyleSelect::IFCSURFACESTYLE:
        writeAttribute(selectData->getIfcSurfaceStyle());
        break;
        }
}

void SPFWriter::writeIfcNullStyle(IfcNullStyle enumData) {
    switch(enumData) {
    case IfcNullStyle_NULL:
        m_out << ".NULL.";
        break;
        }
}

void SPFWriter::writeIfcPresentationStyle(IfcPresentationStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcPresentationStyleAssignment(IfcPresentationStyleAssignment *ptr) {
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleSelect > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeIfcPresentationStyleSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcPresentationStyleSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcProcedure(IfcProcedure *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProcedureID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProcedureID());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getProcedureType())) {
        m_out << "$";
    }
    else {
        writeIfcProcedureTypeEnum(ptr->getProcedureType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedProcedureType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedProcedureType());
    }
}

void SPFWriter::writeIfcProcedureTypeEnum(IfcProcedureTypeEnum enumData) {
    switch(enumData) {
    case IfcProcedureTypeEnum_ADVICE_CAUTION:
        m_out << ".ADVICE_CAUTION.";
        break;
    case IfcProcedureTypeEnum_ADVICE_NOTE:
        m_out << ".ADVICE_NOTE.";
        break;
    case IfcProcedureTypeEnum_ADVICE_WARNING:
        m_out << ".ADVICE_WARNING.";
        break;
    case IfcProcedureTypeEnum_CALIBRATION:
        m_out << ".CALIBRATION.";
        break;
    case IfcProcedureTypeEnum_DIAGNOSTIC:
        m_out << ".DIAGNOSTIC.";
        break;
    case IfcProcedureTypeEnum_SHUTDOWN:
        m_out << ".SHUTDOWN.";
        break;
    case IfcProcedureTypeEnum_STARTUP:
        m_out << ".STARTUP.";
        break;
    case IfcProcedureTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcProcedureTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcProcess(IfcProcess *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcProduct(IfcProduct *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcProductDefinitionShape(IfcProductDefinitionShape *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentations())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentation > >::iterator step_it0 = (ptr->getRepresentations()).begin();
            if ((ptr->getRepresentations()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentations()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcProductRepresentation(IfcProductRepresentation *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentations())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentation > >::iterator step_it0 = (ptr->getRepresentations()).begin();
            if ((ptr->getRepresentations()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentations()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcProductsOfCombustionProperties(IfcProductsOfCombustionProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSpecificHeatCapacity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSpecificHeatCapacity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getN20Content())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getN20Content());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCOContent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCOContent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCO2Content())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCO2Content());
    }
}

void SPFWriter::writeIfcProfileDef(IfcProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
}

void SPFWriter::writeIfcProfileProperties(IfcProfileProperties *ptr) {
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileDefinition());
    }
}

void SPFWriter::writeIfcProject(IfcProject *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPhase())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPhase());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationContexts())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationContext > >::iterator step_it0 = (ptr->getRepresentationContexts()).begin();
            if ((ptr->getRepresentationContexts()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationContexts()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnitsInContext())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnitsInContext());
    }
}

void SPFWriter::writeIfcProjectOrder(IfcProjectOrder *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getID())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getID());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcProjectOrderTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStatus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStatus());
    }
}

void SPFWriter::writeIfcProjectOrderTypeEnum(IfcProjectOrderTypeEnum enumData) {
    switch(enumData) {
    case IfcProjectOrderTypeEnum_CHANGEORDER:
        m_out << ".CHANGEORDER.";
        break;
    case IfcProjectOrderTypeEnum_MAINTENANCEWORKORDER:
        m_out << ".MAINTENANCEWORKORDER.";
        break;
    case IfcProjectOrderTypeEnum_MOVEORDER:
        m_out << ".MOVEORDER.";
        break;
    case IfcProjectOrderTypeEnum_PURCHASEORDER:
        m_out << ".PURCHASEORDER.";
        break;
    case IfcProjectOrderTypeEnum_WORKORDER:
        m_out << ".WORKORDER.";
        break;
    case IfcProjectOrderTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcProjectOrderTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcProjectOrderRecord(IfcProjectOrderRecord *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRecords())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRelAssignsToProjectOrder > >::iterator step_it0 = (ptr->getRecords()).begin();
            if ((ptr->getRecords()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRecords()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcProjectOrderRecordTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcProjectOrderRecordTypeEnum(IfcProjectOrderRecordTypeEnum enumData) {
    switch(enumData) {
    case IfcProjectOrderRecordTypeEnum_CHANGE:
        m_out << ".CHANGE.";
        break;
    case IfcProjectOrderRecordTypeEnum_MAINTENANCE:
        m_out << ".MAINTENANCE.";
        break;
    case IfcProjectOrderRecordTypeEnum_MOVE:
        m_out << ".MOVE.";
        break;
    case IfcProjectOrderRecordTypeEnum_PURCHASE:
        m_out << ".PURCHASE.";
        break;
    case IfcProjectOrderRecordTypeEnum_WORK:
        m_out << ".WORK.";
        break;
    case IfcProjectOrderRecordTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcProjectOrderRecordTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcProjectionCurve(IfcProjectionCurve *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcProjectionElement(IfcProjectionElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcProperty(IfcProperty *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcPropertyBoundedValue(IfcPropertyBoundedValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUpperBoundValue())) {
        m_out << "$";
    }
    else {
        writeIfcValue(ptr->getUpperBoundValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLowerBoundValue())) {
        m_out << "$";
    }
    else {
        writeIfcValue(ptr->getLowerBoundValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
}

void SPFWriter::writeIfcPropertyConstraintRelationship(IfcPropertyConstraintRelationship *ptr) {
    if (Step::isUnset(ptr->getRelatingConstraint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingConstraint());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedProperties())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProperty > >::iterator step_it0 = (ptr->getRelatedProperties()).begin();
            if ((ptr->getRelatedProperties()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedProperties()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcPropertyDefinition(IfcPropertyDefinition *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcPropertyDependencyRelationship(IfcPropertyDependencyRelationship *ptr) {
    if (Step::isUnset(ptr->getDependingProperty())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDependingProperty());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDependantProperty())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDependantProperty());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExpression())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExpression());
    }
}

void SPFWriter::writeIfcPropertyEnumeratedValue(IfcPropertyEnumeratedValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEnumerationValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getEnumerationValues()).begin();
            if ((ptr->getEnumerationValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getEnumerationValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEnumerationReference())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEnumerationReference());
    }
}

void SPFWriter::writeIfcPropertyEnumeration(IfcPropertyEnumeration *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEnumerationValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getEnumerationValues()).begin();
            if ((ptr->getEnumerationValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getEnumerationValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
}

void SPFWriter::writeIfcPropertyListValue(IfcPropertyListValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getListValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getListValues()).begin();
            if ((ptr->getListValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getListValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
}

void SPFWriter::writeIfcPropertyReferenceValue(IfcPropertyReferenceValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUsageName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUsageName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPropertyReference())) {
        m_out << "$";
    }
    else {
        writeIfcObjectReferenceSelect(ptr->getPropertyReference());
    }
}

void SPFWriter::writeIfcObjectReferenceSelect(IfcObjectReferenceSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcObjectReferenceSelect::IFCMATERIAL:
        writeAttribute(selectData->getIfcMaterial());
        break;
    case IfcObjectReferenceSelect::IFCPERSON:
        writeAttribute(selectData->getIfcPerson());
        break;
    case IfcObjectReferenceSelect::IFCDATEANDTIME:
        writeAttribute(selectData->getIfcDateAndTime());
        break;
    case IfcObjectReferenceSelect::IFCMATERIALLIST:
        writeAttribute(selectData->getIfcMaterialList());
        break;
    case IfcObjectReferenceSelect::IFCORGANIZATION:
        writeAttribute(selectData->getIfcOrganization());
        break;
    case IfcObjectReferenceSelect::IFCCALENDARDATE:
        writeAttribute(selectData->getIfcCalendarDate());
        break;
    case IfcObjectReferenceSelect::IFCLOCALTIME:
        writeAttribute(selectData->getIfcLocalTime());
        break;
    case IfcObjectReferenceSelect::IFCPERSONANDORGANIZATION:
        writeAttribute(selectData->getIfcPersonAndOrganization());
        break;
    case IfcObjectReferenceSelect::IFCMATERIALLAYER:
        writeAttribute(selectData->getIfcMaterialLayer());
        break;
    case IfcObjectReferenceSelect::IFCEXTERNALREFERENCE:
        writeAttribute(selectData->getIfcExternalReference());
        break;
    case IfcObjectReferenceSelect::IFCTIMESERIES:
        writeAttribute(selectData->getIfcTimeSeries());
        break;
    case IfcObjectReferenceSelect::IFCADDRESS:
        writeAttribute(selectData->getIfcAddress());
        break;
    case IfcObjectReferenceSelect::IFCAPPLIEDVALUE:
        writeAttribute(selectData->getIfcAppliedValue());
        break;
        }
}

void SPFWriter::writeIfcPropertySet(IfcPropertySet *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasProperties())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProperty > >::iterator step_it0 = (ptr->getHasProperties()).begin();
            if ((ptr->getHasProperties()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasProperties()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcPropertySetDefinition(IfcPropertySetDefinition *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcPropertySingleValue(IfcPropertySingleValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNominalValue())) {
        m_out << "$";
    }
    else {
        writeIfcValue(ptr->getNominalValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
}

void SPFWriter::writeIfcPropertyTableValue(IfcPropertyTableValue *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDefiningValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getDefiningValues()).begin();
            if ((ptr->getDefiningValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getDefiningValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDefinedValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getDefinedValues()).begin();
            if ((ptr->getDefinedValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getDefinedValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExpression())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExpression());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDefiningUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getDefiningUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDefinedUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getDefinedUnit());
    }
}

void SPFWriter::writeIfcProtectiveDeviceType(IfcProtectiveDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcProtectiveDeviceTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcProtectiveDeviceTypeEnum(IfcProtectiveDeviceTypeEnum enumData) {
    switch(enumData) {
    case IfcProtectiveDeviceTypeEnum_FUSEDISCONNECTOR:
        m_out << ".FUSEDISCONNECTOR.";
        break;
    case IfcProtectiveDeviceTypeEnum_CIRCUITBREAKER:
        m_out << ".CIRCUITBREAKER.";
        break;
    case IfcProtectiveDeviceTypeEnum_EARTHFAILUREDEVICE:
        m_out << ".EARTHFAILUREDEVICE.";
        break;
    case IfcProtectiveDeviceTypeEnum_RESIDUALCURRENTCIRCUITBREAKER:
        m_out << ".RESIDUALCURRENTCIRCUITBREAKER.";
        break;
    case IfcProtectiveDeviceTypeEnum_RESIDUALCURRENTSWITCH:
        m_out << ".RESIDUALCURRENTSWITCH.";
        break;
    case IfcProtectiveDeviceTypeEnum_VARISTOR:
        m_out << ".VARISTOR.";
        break;
    case IfcProtectiveDeviceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcProtectiveDeviceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcProxy(IfcProxy *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getProxyType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getProxyType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcObjectTypeEnum(IfcObjectTypeEnum enumData) {
    switch(enumData) {
    case IfcObjectTypeEnum_PRODUCT:
        m_out << ".PRODUCT.";
        break;
    case IfcObjectTypeEnum_PROCESS:
        m_out << ".PROCESS.";
        break;
    case IfcObjectTypeEnum_CONTROL:
        m_out << ".CONTROL.";
        break;
    case IfcObjectTypeEnum_RESOURCE:
        m_out << ".RESOURCE.";
        break;
    case IfcObjectTypeEnum_ACTOR:
        m_out << ".ACTOR.";
        break;
    case IfcObjectTypeEnum_GROUP:
        m_out << ".GROUP.";
        break;
    case IfcObjectTypeEnum_PROJECT:
        m_out << ".PROJECT.";
        break;
    case IfcObjectTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcPumpType(IfcPumpType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcPumpTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcPumpTypeEnum(IfcPumpTypeEnum enumData) {
    switch(enumData) {
    case IfcPumpTypeEnum_CIRCULATOR:
        m_out << ".CIRCULATOR.";
        break;
    case IfcPumpTypeEnum_ENDSUCTION:
        m_out << ".ENDSUCTION.";
        break;
    case IfcPumpTypeEnum_SPLITCASE:
        m_out << ".SPLITCASE.";
        break;
    case IfcPumpTypeEnum_VERTICALINLINE:
        m_out << ".VERTICALINLINE.";
        break;
    case IfcPumpTypeEnum_VERTICALTURBINE:
        m_out << ".VERTICALTURBINE.";
        break;
    case IfcPumpTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcPumpTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcQuantityArea(IfcQuantityArea *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAreaValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAreaValue());
    }
}

void SPFWriter::writeIfcQuantityCount(IfcQuantityCount *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCountValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCountValue());
    }
}

void SPFWriter::writeIfcQuantityLength(IfcQuantityLength *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLengthValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLengthValue());
    }
}

void SPFWriter::writeIfcQuantityTime(IfcQuantityTime *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeValue());
    }
}

void SPFWriter::writeIfcQuantityVolume(IfcQuantityVolume *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVolumeValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVolumeValue());
    }
}

void SPFWriter::writeIfcQuantityWeight(IfcQuantityWeight *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWeightValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWeightValue());
    }
}

void SPFWriter::writeIfcRadiusDimension(IfcRadiusDimension *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRailing(IfcRailing *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcRailingTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcRailingTypeEnum(IfcRailingTypeEnum enumData) {
    switch(enumData) {
    case IfcRailingTypeEnum_HANDRAIL:
        m_out << ".HANDRAIL.";
        break;
    case IfcRailingTypeEnum_GUARDRAIL:
        m_out << ".GUARDRAIL.";
        break;
    case IfcRailingTypeEnum_BALUSTRADE:
        m_out << ".BALUSTRADE.";
        break;
    case IfcRailingTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcRailingTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRailingType(IfcRailingType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcRailingTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcRamp(IfcRamp *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getShapeType())) {
        m_out << "$";
    }
    else {
        writeIfcRampTypeEnum(ptr->getShapeType());
    }
}

void SPFWriter::writeIfcRampTypeEnum(IfcRampTypeEnum enumData) {
    switch(enumData) {
    case IfcRampTypeEnum_STRAIGHT_RUN_RAMP:
        m_out << ".STRAIGHT_RUN_RAMP.";
        break;
    case IfcRampTypeEnum_TWO_STRAIGHT_RUN_RAMP:
        m_out << ".TWO_STRAIGHT_RUN_RAMP.";
        break;
    case IfcRampTypeEnum_QUARTER_TURN_RAMP:
        m_out << ".QUARTER_TURN_RAMP.";
        break;
    case IfcRampTypeEnum_TWO_QUARTER_TURN_RAMP:
        m_out << ".TWO_QUARTER_TURN_RAMP.";
        break;
    case IfcRampTypeEnum_HALF_TURN_RAMP:
        m_out << ".HALF_TURN_RAMP.";
        break;
    case IfcRampTypeEnum_SPIRAL_RAMP:
        m_out << ".SPIRAL_RAMP.";
        break;
    case IfcRampTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcRampTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRampFlight(IfcRampFlight *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcRampFlightType(IfcRampFlightType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcRampFlightTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcRampFlightTypeEnum(IfcRampFlightTypeEnum enumData) {
    switch(enumData) {
    case IfcRampFlightTypeEnum_STRAIGHT:
        m_out << ".STRAIGHT.";
        break;
    case IfcRampFlightTypeEnum_SPIRAL:
        m_out << ".SPIRAL.";
        break;
    case IfcRampFlightTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcRampFlightTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRationalBezierCurve(IfcRationalBezierCurve *ptr) {
    if (Step::isUnset(ptr->getDegree())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDegree());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getControlPointsList())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCartesianPoint > >::iterator step_it0 = (ptr->getControlPointsList()).begin();
            if ((ptr->getControlPointsList()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getControlPointsList()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCurveForm())) {
        m_out << "$";
    }
    else {
        writeIfcBSplineCurveForm(ptr->getCurveForm());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getClosedCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getClosedCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSelfIntersect())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSelfIntersect());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWeightsData())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::Real >::iterator step_it0 = (ptr->getWeightsData()).begin();
            if ((ptr->getWeightsData()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getWeightsData()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRectangleHollowProfileDef(IfcRectangleHollowProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getXDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getXDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWallThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWallThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInnerFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInnerFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOuterFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOuterFilletRadius());
    }
}

void SPFWriter::writeIfcRectangleProfileDef(IfcRectangleProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getXDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getXDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYDim());
    }
}

void SPFWriter::writeIfcRectangularPyramid(IfcRectangularPyramid *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getXLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getXLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeight());
    }
}

void SPFWriter::writeIfcRectangularTrimmedSurface(IfcRectangularTrimmedSurface *ptr) {
    if (Step::isUnset(ptr->getBasisSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getU1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getU1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getV1())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getV1());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getU2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getU2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getV2())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getV2());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUsense())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUsense());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVsense())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVsense());
    }
}

void SPFWriter::writeIfcReferencesValueDocument(IfcReferencesValueDocument *ptr) {
    if (Step::isUnset(ptr->getReferencedDocument())) {
        m_out << "$";
    }
    else {
        writeIfcDocumentSelect(ptr->getReferencedDocument());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getReferencingValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcAppliedValue > >::iterator step_it0 = (ptr->getReferencingValues()).begin();
            if ((ptr->getReferencingValues()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getReferencingValues()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcDocumentSelect(IfcDocumentSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcDocumentSelect::IFCDOCUMENTREFERENCE:
        writeAttribute(selectData->getIfcDocumentReference());
        break;
    case IfcDocumentSelect::IFCDOCUMENTINFORMATION:
        writeAttribute(selectData->getIfcDocumentInformation());
        break;
        }
}

void SPFWriter::writeIfcRegularTimeSeries(IfcRegularTimeSeries *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStartTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEndTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getEndTime());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTimeSeriesDataType())) {
        m_out << "$";
    }
    else {
        writeIfcTimeSeriesDataTypeEnum(ptr->getTimeSeriesDataType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getDataOrigin())) {
        m_out << "$";
    }
    else {
        writeIfcDataOriginEnum(ptr->getDataOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedDataOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedDataOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeStep())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeStep());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcTimeSeriesValue > >::iterator step_it0 = (ptr->getValues()).begin();
            if ((ptr->getValues()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getValues()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcReinforcementBarProperties(IfcReinforcementBarProperties *ptr) {
    if (Step::isUnset(ptr->getTotalCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTotalCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSteelGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSteelGrade());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getBarSurface())) {
        m_out << "$";
    }
    else {
        writeIfcReinforcingBarSurfaceEnum(ptr->getBarSurface());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEffectiveDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEffectiveDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNominalBarDiameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNominalBarDiameter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBarCount())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBarCount());
    }
}

void SPFWriter::writeIfcReinforcingBarSurfaceEnum(IfcReinforcingBarSurfaceEnum enumData) {
    switch(enumData) {
    case IfcReinforcingBarSurfaceEnum_PLAIN:
        m_out << ".PLAIN.";
        break;
    case IfcReinforcingBarSurfaceEnum_TEXTURED:
        m_out << ".TEXTURED.";
        break;
        }
}

void SPFWriter::writeIfcReinforcementDefinitionProperties(IfcReinforcementDefinitionProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDefinitionType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDefinitionType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getReinforcementSectionDefinitions())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcSectionReinforcementProperties > >::iterator step_it0 = (ptr->getReinforcementSectionDefinitions()).begin();
            if ((ptr->getReinforcementSectionDefinitions()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getReinforcementSectionDefinitions()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcReinforcingBar(IfcReinforcingBar *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSteelGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSteelGrade());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNominalDiameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNominalDiameter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBarLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBarLength());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getBarRole())) {
        m_out << "$";
    }
    else {
        writeIfcReinforcingBarRoleEnum(ptr->getBarRole());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getBarSurface())) {
        m_out << "$";
    }
    else {
        writeIfcReinforcingBarSurfaceEnum(ptr->getBarSurface());
    }
}

void SPFWriter::writeIfcReinforcingBarRoleEnum(IfcReinforcingBarRoleEnum enumData) {
    switch(enumData) {
    case IfcReinforcingBarRoleEnum_MAIN:
        m_out << ".MAIN.";
        break;
    case IfcReinforcingBarRoleEnum_SHEAR:
        m_out << ".SHEAR.";
        break;
    case IfcReinforcingBarRoleEnum_LIGATURE:
        m_out << ".LIGATURE.";
        break;
    case IfcReinforcingBarRoleEnum_STUD:
        m_out << ".STUD.";
        break;
    case IfcReinforcingBarRoleEnum_PUNCHING:
        m_out << ".PUNCHING.";
        break;
    case IfcReinforcingBarRoleEnum_EDGE:
        m_out << ".EDGE.";
        break;
    case IfcReinforcingBarRoleEnum_RING:
        m_out << ".RING.";
        break;
    case IfcReinforcingBarRoleEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcReinforcingBarRoleEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcReinforcingElement(IfcReinforcingElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSteelGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSteelGrade());
    }
}

void SPFWriter::writeIfcReinforcingMesh(IfcReinforcingMesh *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSteelGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSteelGrade());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMeshLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMeshLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMeshWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMeshWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongitudinalBarNominalDiameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongitudinalBarNominalDiameter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransverseBarNominalDiameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransverseBarNominalDiameter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongitudinalBarCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongitudinalBarCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransverseBarCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransverseBarCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongitudinalBarSpacing())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongitudinalBarSpacing());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransverseBarSpacing())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransverseBarSpacing());
    }
}

void SPFWriter::writeIfcRelAggregates(IfcRelAggregates *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingObject())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingObject());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelAssigns(IfcRelAssigns *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
}

void SPFWriter::writeIfcRelAssignsTasks(IfcRelAssignsTasks *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingControl())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingControl());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeForTask())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeForTask());
    }
}

void SPFWriter::writeIfcRelAssignsToActor(IfcRelAssignsToActor *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingActor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingActor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getActingRole())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getActingRole());
    }
}

void SPFWriter::writeIfcRelAssignsToControl(IfcRelAssignsToControl *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingControl())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingControl());
    }
}

void SPFWriter::writeIfcRelAssignsToGroup(IfcRelAssignsToGroup *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingGroup());
    }
}

void SPFWriter::writeIfcRelAssignsToProcess(IfcRelAssignsToProcess *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingProcess())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingProcess());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getQuantityInProcess())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getQuantityInProcess());
    }
}

void SPFWriter::writeIfcRelAssignsToProduct(IfcRelAssignsToProduct *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingProduct())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingProduct());
    }
}

void SPFWriter::writeIfcRelAssignsToProjectOrder(IfcRelAssignsToProjectOrder *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingControl())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingControl());
    }
}

void SPFWriter::writeIfcRelAssignsToResource(IfcRelAssignsToResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingResource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingResource());
    }
}

void SPFWriter::writeIfcRelAssociates(IfcRelAssociates *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelAssociatesAppliedValue(IfcRelAssociatesAppliedValue *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingAppliedValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingAppliedValue());
    }
}

void SPFWriter::writeIfcRelAssociatesApproval(IfcRelAssociatesApproval *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingApproval())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingApproval());
    }
}

void SPFWriter::writeIfcRelAssociatesClassification(IfcRelAssociatesClassification *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingClassification())) {
        m_out << "$";
    }
    else {
        writeIfcClassificationNotationSelect(ptr->getRelatingClassification());
    }
}

void SPFWriter::writeIfcRelAssociatesConstraint(IfcRelAssociatesConstraint *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIntent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIntent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingConstraint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingConstraint());
    }
}

void SPFWriter::writeIfcRelAssociatesDocument(IfcRelAssociatesDocument *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingDocument())) {
        m_out << "$";
    }
    else {
        writeIfcDocumentSelect(ptr->getRelatingDocument());
    }
}

void SPFWriter::writeIfcRelAssociatesLibrary(IfcRelAssociatesLibrary *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingLibrary())) {
        m_out << "$";
    }
    else {
        writeIfcLibrarySelect(ptr->getRelatingLibrary());
    }
}

void SPFWriter::writeIfcLibrarySelect(IfcLibrarySelect *selectData) {
    switch(selectData->currentType()) {
    case IfcLibrarySelect::IFCLIBRARYREFERENCE:
        writeAttribute(selectData->getIfcLibraryReference());
        break;
    case IfcLibrarySelect::IFCLIBRARYINFORMATION:
        writeAttribute(selectData->getIfcLibraryInformation());
        break;
        }
}

void SPFWriter::writeIfcRelAssociatesMaterial(IfcRelAssociatesMaterial *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingMaterial())) {
        m_out << "$";
    }
    else {
        writeIfcMaterialSelect(ptr->getRelatingMaterial());
    }
}

void SPFWriter::writeIfcMaterialSelect(IfcMaterialSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcMaterialSelect::IFCMATERIAL:
        writeAttribute(selectData->getIfcMaterial());
        break;
    case IfcMaterialSelect::IFCMATERIALLIST:
        writeAttribute(selectData->getIfcMaterialList());
        break;
    case IfcMaterialSelect::IFCMATERIALLAYERSETUSAGE:
        writeAttribute(selectData->getIfcMaterialLayerSetUsage());
        break;
    case IfcMaterialSelect::IFCMATERIALLAYERSET:
        writeAttribute(selectData->getIfcMaterialLayerSet());
        break;
    case IfcMaterialSelect::IFCMATERIALLAYER:
        writeAttribute(selectData->getIfcMaterialLayer());
        break;
        }
}

void SPFWriter::writeIfcRelAssociatesProfileProperties(IfcRelAssociatesProfileProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRoot > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingProfileProperties())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingProfileProperties());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileSectionLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileSectionLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileOrientation())) {
        m_out << "$";
    }
    else {
        writeIfcOrientationSelect(ptr->getProfileOrientation());
    }
}

void SPFWriter::writeIfcOrientationSelect(IfcOrientationSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcOrientationSelect::IFCPLANEANGLEMEASURE:
        m_out << "IFCPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPlaneAngleMeasure());
        m_out << ")";
        break;
    case IfcOrientationSelect::IFCDIRECTION:
        writeAttribute(selectData->getIfcDirection());
        break;
        }
}

void SPFWriter::writeIfcRelConnects(IfcRelConnects *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcRelConnectsElements(IfcRelConnectsElements *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConnectionGeometry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConnectionGeometry());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedElement());
    }
}

void SPFWriter::writeIfcRelConnectsPathElements(IfcRelConnectsPathElements *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConnectionGeometry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConnectionGeometry());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingPriorities())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::Integer >::iterator step_it0 = (ptr->getRelatingPriorities()).begin();
            if ((ptr->getRelatingPriorities()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getRelatingPriorities()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedPriorities())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::Integer >::iterator step_it0 = (ptr->getRelatedPriorities()).begin();
            if ((ptr->getRelatedPriorities()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getRelatedPriorities()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedConnectionType())) {
        m_out << "$";
    }
    else {
        writeIfcConnectionTypeEnum(ptr->getRelatedConnectionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatingConnectionType())) {
        m_out << "$";
    }
    else {
        writeIfcConnectionTypeEnum(ptr->getRelatingConnectionType());
    }
}

void SPFWriter::writeIfcConnectionTypeEnum(IfcConnectionTypeEnum enumData) {
    switch(enumData) {
    case IfcConnectionTypeEnum_ATPATH:
        m_out << ".ATPATH.";
        break;
    case IfcConnectionTypeEnum_ATSTART:
        m_out << ".ATSTART.";
        break;
    case IfcConnectionTypeEnum_ATEND:
        m_out << ".ATEND.";
        break;
    case IfcConnectionTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRelConnectsPortToElement(IfcRelConnectsPortToElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingPort())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingPort());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedElement());
    }
}

void SPFWriter::writeIfcRelConnectsPorts(IfcRelConnectsPorts *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingPort())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingPort());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedPort())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedPort());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRealizingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRealizingElement());
    }
}

void SPFWriter::writeIfcRelConnectsStructuralActivity(IfcRelConnectsStructuralActivity *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingElement())) {
        m_out << "$";
    }
    else {
        writeIfcStructuralActivityAssignmentSelect(ptr->getRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedStructuralActivity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedStructuralActivity());
    }
}

void SPFWriter::writeIfcStructuralActivityAssignmentSelect(IfcStructuralActivityAssignmentSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcStructuralActivityAssignmentSelect::IFCSTRUCTURALITEM:
        writeAttribute(selectData->getIfcStructuralItem());
        break;
    case IfcStructuralActivityAssignmentSelect::IFCELEMENT:
        writeAttribute(selectData->getIfcElement());
        break;
        }
}

void SPFWriter::writeIfcRelConnectsStructuralElement(IfcRelConnectsStructuralElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedStructuralMember())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedStructuralMember());
    }
}

void SPFWriter::writeIfcRelConnectsStructuralMember(IfcRelConnectsStructuralMember *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingStructuralMember())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingStructuralMember());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedStructuralConnection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedStructuralConnection());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedCondition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAdditionalConditions())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAdditionalConditions());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSupportedLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSupportedLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConditionCoordinateSystem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConditionCoordinateSystem());
    }
}

void SPFWriter::writeIfcRelConnectsWithEccentricity(IfcRelConnectsWithEccentricity *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingStructuralMember())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingStructuralMember());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedStructuralConnection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedStructuralConnection());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedCondition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAdditionalConditions())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAdditionalConditions());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSupportedLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSupportedLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConditionCoordinateSystem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConditionCoordinateSystem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConnectionConstraint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConnectionConstraint());
    }
}

void SPFWriter::writeIfcRelConnectsWithRealizingElements(IfcRelConnectsWithRealizingElements *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConnectionGeometry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConnectionGeometry());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRealizingElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcElement > >::iterator step_it0 = (ptr->getRealizingElements()).begin();
            if ((ptr->getRealizingElements()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRealizingElements()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConnectionType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConnectionType());
    }
}

void SPFWriter::writeIfcRelContainedInSpatialStructure(IfcRelContainedInSpatialStructure *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProduct > >::iterator step_it0 = (ptr->getRelatedElements()).begin();
            if ((ptr->getRelatedElements()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedElements()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingStructure())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingStructure());
    }
}

void SPFWriter::writeIfcRelCoversBldgElements(IfcRelCoversBldgElements *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingBuildingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingBuildingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedCoverings())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcCovering > >::iterator step_it0 = (ptr->getRelatedCoverings()).begin();
            if ((ptr->getRelatedCoverings()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedCoverings()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelCoversSpaces(IfcRelCoversSpaces *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedSpace())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedSpace());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedCoverings())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcCovering > >::iterator step_it0 = (ptr->getRelatedCoverings()).begin();
            if ((ptr->getRelatedCoverings()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedCoverings()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelDecomposes(IfcRelDecomposes *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingObject())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingObject());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelDefines(IfcRelDefines *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObject > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelDefinesByProperties(IfcRelDefinesByProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObject > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingPropertyDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingPropertyDefinition());
    }
}

void SPFWriter::writeIfcRelDefinesByType(IfcRelDefinesByType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObject > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingType());
    }
}

void SPFWriter::writeIfcRelFillsElement(IfcRelFillsElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingOpeningElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingOpeningElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedBuildingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedBuildingElement());
    }
}

void SPFWriter::writeIfcRelFlowControlElements(IfcRelFlowControlElements *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedControlElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDistributionControlElement > >::iterator step_it0 = (ptr->getRelatedControlElements()).begin();
            if ((ptr->getRelatedControlElements()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedControlElements()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingFlowElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingFlowElement());
    }
}

void SPFWriter::writeIfcRelInteractionRequirements(IfcRelInteractionRequirements *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDailyInteraction())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDailyInteraction());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getImportanceRating())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getImportanceRating());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLocationOfInteraction())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLocationOfInteraction());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedSpaceProgram())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedSpaceProgram());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingSpaceProgram())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingSpaceProgram());
    }
}

void SPFWriter::writeIfcRelNests(IfcRelNests *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingObject())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingObject());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelOccupiesSpaces(IfcRelOccupiesSpaces *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingActor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingActor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getActingRole())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getActingRole());
    }
}

void SPFWriter::writeIfcRelOverridesProperties(IfcRelOverridesProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObject > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingPropertyDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingPropertyDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverridingProperties())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProperty > >::iterator step_it0 = (ptr->getOverridingProperties()).begin();
            if ((ptr->getOverridingProperties()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getOverridingProperties()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelProjectsElement(IfcRelProjectsElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedFeatureElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedFeatureElement());
    }
}

void SPFWriter::writeIfcRelReferencedInSpatialStructure(IfcRelReferencedInSpatialStructure *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedElements())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcProduct > >::iterator step_it0 = (ptr->getRelatedElements()).begin();
            if ((ptr->getRelatedElements()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedElements()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingStructure())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingStructure());
    }
}

void SPFWriter::writeIfcRelSchedulesCostItems(IfcRelSchedulesCostItems *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedObjects())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcObjectDefinition > >::iterator step_it0 = (ptr->getRelatedObjects()).begin();
            if ((ptr->getRelatedObjects()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedObjects()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getRelatedObjectsType())) {
        m_out << "$";
    }
    else {
        writeIfcObjectTypeEnum(ptr->getRelatedObjectsType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingControl())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingControl());
    }
}

void SPFWriter::writeIfcRelSequence(IfcRelSequence *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingProcess())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingProcess());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedProcess())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedProcess());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeLag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeLag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getSequenceType())) {
        m_out << "$";
    }
    else {
        writeIfcSequenceEnum(ptr->getSequenceType());
    }
}

void SPFWriter::writeIfcSequenceEnum(IfcSequenceEnum enumData) {
    switch(enumData) {
    case IfcSequenceEnum_START_START:
        m_out << ".START_START.";
        break;
    case IfcSequenceEnum_START_FINISH:
        m_out << ".START_FINISH.";
        break;
    case IfcSequenceEnum_FINISH_START:
        m_out << ".FINISH_START.";
        break;
    case IfcSequenceEnum_FINISH_FINISH:
        m_out << ".FINISH_FINISH.";
        break;
    case IfcSequenceEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRelServicesBuildings(IfcRelServicesBuildings *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingSystem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingSystem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedBuildings())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcSpatialStructureElement > >::iterator step_it0 = (ptr->getRelatedBuildings()).begin();
            if ((ptr->getRelatedBuildings()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRelatedBuildings()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRelSpaceBoundary(IfcRelSpaceBoundary *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingSpace())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingSpace());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedBuildingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedBuildingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getConnectionGeometry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getConnectionGeometry());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPhysicalOrVirtualBoundary())) {
        m_out << "$";
    }
    else {
        writeIfcPhysicalOrVirtualEnum(ptr->getPhysicalOrVirtualBoundary());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getInternalOrExternalBoundary())) {
        m_out << "$";
    }
    else {
        writeIfcInternalOrExternalEnum(ptr->getInternalOrExternalBoundary());
    }
}

void SPFWriter::writeIfcPhysicalOrVirtualEnum(IfcPhysicalOrVirtualEnum enumData) {
    switch(enumData) {
    case IfcPhysicalOrVirtualEnum_PHYSICAL:
        m_out << ".PHYSICAL.";
        break;
    case IfcPhysicalOrVirtualEnum_VIRTUAL:
        m_out << ".VIRTUAL.";
        break;
    case IfcPhysicalOrVirtualEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcInternalOrExternalEnum(IfcInternalOrExternalEnum enumData) {
    switch(enumData) {
    case IfcInternalOrExternalEnum_INTERNAL:
        m_out << ".INTERNAL.";
        break;
    case IfcInternalOrExternalEnum_EXTERNAL:
        m_out << ".EXTERNAL.";
        break;
    case IfcInternalOrExternalEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRelVoidsElement(IfcRelVoidsElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatingBuildingElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatingBuildingElement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelatedOpeningElement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelatedOpeningElement());
    }
}

void SPFWriter::writeIfcRelationship(IfcRelationship *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcRelaxation(IfcRelaxation *ptr) {
    if (Step::isUnset(ptr->getRelaxationValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelaxationValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInitialStress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInitialStress());
    }
}

void SPFWriter::writeIfcRepresentation(IfcRepresentation *ptr) {
    if (Step::isUnset(ptr->getContextOfItems())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextOfItems());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationItem > >::iterator step_it0 = (ptr->getItems()).begin();
            if ((ptr->getItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcRepresentationContext(IfcRepresentationContext *ptr) {
    if (Step::isUnset(ptr->getContextIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getContextType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextType());
    }
}

void SPFWriter::writeIfcRepresentationItem(IfcRepresentationItem *ptr) {
}

void SPFWriter::writeIfcRepresentationMap(IfcRepresentationMap *ptr) {
    if (Step::isUnset(ptr->getMappingOrigin())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getMappingOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMappedRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMappedRepresentation());
    }
}

void SPFWriter::writeIfcResource(IfcResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcRevolvedAreaSolid(IfcRevolvedAreaSolid *ptr) {
    if (Step::isUnset(ptr->getSweptArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAngle());
    }
}

void SPFWriter::writeIfcRibPlateProfileProperties(IfcRibPlateProfileProperties *ptr) {
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRibHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRibHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRibWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRibWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRibSpacing())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRibSpacing());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getDirection())) {
        m_out << "$";
    }
    else {
        writeIfcRibPlateDirectionEnum(ptr->getDirection());
    }
}

void SPFWriter::writeIfcRibPlateDirectionEnum(IfcRibPlateDirectionEnum enumData) {
    switch(enumData) {
    case IfcRibPlateDirectionEnum_DIRECTION_X:
        m_out << ".DIRECTION_X.";
        break;
    case IfcRibPlateDirectionEnum_DIRECTION_Y:
        m_out << ".DIRECTION_Y.";
        break;
        }
}

void SPFWriter::writeIfcRightCircularCone(IfcRightCircularCone *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBottomRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBottomRadius());
    }
}

void SPFWriter::writeIfcRightCircularCylinder(IfcRightCircularCylinder *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
}

void SPFWriter::writeIfcRoof(IfcRoof *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getShapeType())) {
        m_out << "$";
    }
    else {
        writeIfcRoofTypeEnum(ptr->getShapeType());
    }
}

void SPFWriter::writeIfcRoofTypeEnum(IfcRoofTypeEnum enumData) {
    switch(enumData) {
    case IfcRoofTypeEnum_FLAT_ROOF:
        m_out << ".FLAT_ROOF.";
        break;
    case IfcRoofTypeEnum_SHED_ROOF:
        m_out << ".SHED_ROOF.";
        break;
    case IfcRoofTypeEnum_GABLE_ROOF:
        m_out << ".GABLE_ROOF.";
        break;
    case IfcRoofTypeEnum_HIP_ROOF:
        m_out << ".HIP_ROOF.";
        break;
    case IfcRoofTypeEnum_HIPPED_GABLE_ROOF:
        m_out << ".HIPPED_GABLE_ROOF.";
        break;
    case IfcRoofTypeEnum_GAMBREL_ROOF:
        m_out << ".GAMBREL_ROOF.";
        break;
    case IfcRoofTypeEnum_MANSARD_ROOF:
        m_out << ".MANSARD_ROOF.";
        break;
    case IfcRoofTypeEnum_BARREL_ROOF:
        m_out << ".BARREL_ROOF.";
        break;
    case IfcRoofTypeEnum_RAINBOW_ROOF:
        m_out << ".RAINBOW_ROOF.";
        break;
    case IfcRoofTypeEnum_BUTTERFLY_ROOF:
        m_out << ".BUTTERFLY_ROOF.";
        break;
    case IfcRoofTypeEnum_PAVILION_ROOF:
        m_out << ".PAVILION_ROOF.";
        break;
    case IfcRoofTypeEnum_DOME_ROOF:
        m_out << ".DOME_ROOF.";
        break;
    case IfcRoofTypeEnum_FREEFORM:
        m_out << ".FREEFORM.";
        break;
    case IfcRoofTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcRoot(IfcRoot *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcRoundedEdgeFeature(IfcRoundedEdgeFeature *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFeatureLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFeatureLength());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
}

void SPFWriter::writeIfcRoundedRectangleProfileDef(IfcRoundedRectangleProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getXDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getXDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRoundingRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRoundingRadius());
    }
}

void SPFWriter::writeIfcSIUnit(IfcSIUnit *ptr) {
    m_out << "*";
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getUnitType())) {
        m_out << "$";
    }
    else {
        writeIfcUnitEnum(ptr->getUnitType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPrefix())) {
        m_out << "$";
    }
    else {
        writeIfcSIPrefix(ptr->getPrefix());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeIfcSIUnitName(ptr->getName());
    }
}

void SPFWriter::writeIfcSIPrefix(IfcSIPrefix enumData) {
    switch(enumData) {
    case IfcSIPrefix_EXA:
        m_out << ".EXA.";
        break;
    case IfcSIPrefix_PETA:
        m_out << ".PETA.";
        break;
    case IfcSIPrefix_TERA:
        m_out << ".TERA.";
        break;
    case IfcSIPrefix_GIGA:
        m_out << ".GIGA.";
        break;
    case IfcSIPrefix_MEGA:
        m_out << ".MEGA.";
        break;
    case IfcSIPrefix_KILO:
        m_out << ".KILO.";
        break;
    case IfcSIPrefix_HECTO:
        m_out << ".HECTO.";
        break;
    case IfcSIPrefix_DECA:
        m_out << ".DECA.";
        break;
    case IfcSIPrefix_DECI:
        m_out << ".DECI.";
        break;
    case IfcSIPrefix_CENTI:
        m_out << ".CENTI.";
        break;
    case IfcSIPrefix_MILLI:
        m_out << ".MILLI.";
        break;
    case IfcSIPrefix_MICRO:
        m_out << ".MICRO.";
        break;
    case IfcSIPrefix_NANO:
        m_out << ".NANO.";
        break;
    case IfcSIPrefix_PICO:
        m_out << ".PICO.";
        break;
    case IfcSIPrefix_FEMTO:
        m_out << ".FEMTO.";
        break;
    case IfcSIPrefix_ATTO:
        m_out << ".ATTO.";
        break;
        }
}

void SPFWriter::writeIfcSIUnitName(IfcSIUnitName enumData) {
    switch(enumData) {
    case IfcSIUnitName_AMPERE:
        m_out << ".AMPERE.";
        break;
    case IfcSIUnitName_BECQUEREL:
        m_out << ".BECQUEREL.";
        break;
    case IfcSIUnitName_CANDELA:
        m_out << ".CANDELA.";
        break;
    case IfcSIUnitName_COULOMB:
        m_out << ".COULOMB.";
        break;
    case IfcSIUnitName_CUBIC_METRE:
        m_out << ".CUBIC_METRE.";
        break;
    case IfcSIUnitName_DEGREE_CELSIUS:
        m_out << ".DEGREE_CELSIUS.";
        break;
    case IfcSIUnitName_FARAD:
        m_out << ".FARAD.";
        break;
    case IfcSIUnitName_GRAM:
        m_out << ".GRAM.";
        break;
    case IfcSIUnitName_GRAY:
        m_out << ".GRAY.";
        break;
    case IfcSIUnitName_HENRY:
        m_out << ".HENRY.";
        break;
    case IfcSIUnitName_HERTZ:
        m_out << ".HERTZ.";
        break;
    case IfcSIUnitName_JOULE:
        m_out << ".JOULE.";
        break;
    case IfcSIUnitName_KELVIN:
        m_out << ".KELVIN.";
        break;
    case IfcSIUnitName_LUMEN:
        m_out << ".LUMEN.";
        break;
    case IfcSIUnitName_LUX:
        m_out << ".LUX.";
        break;
    case IfcSIUnitName_METRE:
        m_out << ".METRE.";
        break;
    case IfcSIUnitName_MOLE:
        m_out << ".MOLE.";
        break;
    case IfcSIUnitName_NEWTON:
        m_out << ".NEWTON.";
        break;
    case IfcSIUnitName_OHM:
        m_out << ".OHM.";
        break;
    case IfcSIUnitName_PASCAL:
        m_out << ".PASCAL.";
        break;
    case IfcSIUnitName_RADIAN:
        m_out << ".RADIAN.";
        break;
    case IfcSIUnitName_SECOND:
        m_out << ".SECOND.";
        break;
    case IfcSIUnitName_SIEMENS:
        m_out << ".SIEMENS.";
        break;
    case IfcSIUnitName_SIEVERT:
        m_out << ".SIEVERT.";
        break;
    case IfcSIUnitName_SQUARE_METRE:
        m_out << ".SQUARE_METRE.";
        break;
    case IfcSIUnitName_STERADIAN:
        m_out << ".STERADIAN.";
        break;
    case IfcSIUnitName_TESLA:
        m_out << ".TESLA.";
        break;
    case IfcSIUnitName_VOLT:
        m_out << ".VOLT.";
        break;
    case IfcSIUnitName_WATT:
        m_out << ".WATT.";
        break;
    case IfcSIUnitName_WEBER:
        m_out << ".WEBER.";
        break;
        }
}

void SPFWriter::writeIfcSanitaryTerminalType(IfcSanitaryTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSanitaryTerminalTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSanitaryTerminalTypeEnum(IfcSanitaryTerminalTypeEnum enumData) {
    switch(enumData) {
    case IfcSanitaryTerminalTypeEnum_BATH:
        m_out << ".BATH.";
        break;
    case IfcSanitaryTerminalTypeEnum_BIDET:
        m_out << ".BIDET.";
        break;
    case IfcSanitaryTerminalTypeEnum_CISTERN:
        m_out << ".CISTERN.";
        break;
    case IfcSanitaryTerminalTypeEnum_SHOWER:
        m_out << ".SHOWER.";
        break;
    case IfcSanitaryTerminalTypeEnum_SINK:
        m_out << ".SINK.";
        break;
    case IfcSanitaryTerminalTypeEnum_SANITARYFOUNTAIN:
        m_out << ".SANITARYFOUNTAIN.";
        break;
    case IfcSanitaryTerminalTypeEnum_TOILETPAN:
        m_out << ".TOILETPAN.";
        break;
    case IfcSanitaryTerminalTypeEnum_URINAL:
        m_out << ".URINAL.";
        break;
    case IfcSanitaryTerminalTypeEnum_WASHHANDBASIN:
        m_out << ".WASHHANDBASIN.";
        break;
    case IfcSanitaryTerminalTypeEnum_WCSEAT:
        m_out << ".WCSEAT.";
        break;
    case IfcSanitaryTerminalTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSanitaryTerminalTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcScheduleTimeControl(IfcScheduleTimeControl *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getActualStart())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getActualStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEarlyStart())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getEarlyStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLateStart())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getLateStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScheduleStart())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getScheduleStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getActualFinish())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getActualFinish());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEarlyFinish())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getEarlyFinish());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLateFinish())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getLateFinish());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScheduleFinish())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getScheduleFinish());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getScheduleDuration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getScheduleDuration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getActualDuration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getActualDuration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRemainingTime())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRemainingTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFreeFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFreeFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTotalFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTotalFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsCritical())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsCritical());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStatusTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStatusTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStartFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFinishFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFinishFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCompletion())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCompletion());
    }
}

void SPFWriter::writeIfcSectionProperties(IfcSectionProperties *ptr) {
    if (Step::isUnsetEnum(ptr->getSectionType())) {
        m_out << "$";
    }
    else {
        writeIfcSectionTypeEnum(ptr->getSectionType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartProfile())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStartProfile());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEndProfile())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEndProfile());
    }
}

void SPFWriter::writeIfcSectionTypeEnum(IfcSectionTypeEnum enumData) {
    switch(enumData) {
    case IfcSectionTypeEnum_UNIFORM:
        m_out << ".UNIFORM.";
        break;
    case IfcSectionTypeEnum_TAPERED:
        m_out << ".TAPERED.";
        break;
        }
}

void SPFWriter::writeIfcSectionReinforcementProperties(IfcSectionReinforcementProperties *ptr) {
    if (Step::isUnset(ptr->getLongitudinalStartPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongitudinalStartPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongitudinalEndPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongitudinalEndPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransversePosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransversePosition());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getReinforcementRole())) {
        m_out << "$";
    }
    else {
        writeIfcReinforcingBarRoleEnum(ptr->getReinforcementRole());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSectionDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSectionDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionReinforcementDefinitions())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcReinforcementBarProperties > >::iterator step_it0 = (ptr->getCrossSectionReinforcementDefinitions()).begin();
            if ((ptr->getCrossSectionReinforcementDefinitions()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCrossSectionReinforcementDefinitions()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSectionedSpine(IfcSectionedSpine *ptr) {
    if (Step::isUnset(ptr->getSpineCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSpineCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSections())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcProfileDef > >::iterator step_it0 = (ptr->getCrossSections()).begin();
            if ((ptr->getCrossSections()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCrossSections()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionPositions())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcAxis2Placement3D > >::iterator step_it0 = (ptr->getCrossSectionPositions()).begin();
            if ((ptr->getCrossSectionPositions()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCrossSectionPositions()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSensorType(IfcSensorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSensorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSensorTypeEnum(IfcSensorTypeEnum enumData) {
    switch(enumData) {
    case IfcSensorTypeEnum_CO2SENSOR:
        m_out << ".CO2SENSOR.";
        break;
    case IfcSensorTypeEnum_FIRESENSOR:
        m_out << ".FIRESENSOR.";
        break;
    case IfcSensorTypeEnum_FLOWSENSOR:
        m_out << ".FLOWSENSOR.";
        break;
    case IfcSensorTypeEnum_GASSENSOR:
        m_out << ".GASSENSOR.";
        break;
    case IfcSensorTypeEnum_HEATSENSOR:
        m_out << ".HEATSENSOR.";
        break;
    case IfcSensorTypeEnum_HUMIDITYSENSOR:
        m_out << ".HUMIDITYSENSOR.";
        break;
    case IfcSensorTypeEnum_LIGHTSENSOR:
        m_out << ".LIGHTSENSOR.";
        break;
    case IfcSensorTypeEnum_MOISTURESENSOR:
        m_out << ".MOISTURESENSOR.";
        break;
    case IfcSensorTypeEnum_MOVEMENTSENSOR:
        m_out << ".MOVEMENTSENSOR.";
        break;
    case IfcSensorTypeEnum_PRESSURESENSOR:
        m_out << ".PRESSURESENSOR.";
        break;
    case IfcSensorTypeEnum_SMOKESENSOR:
        m_out << ".SMOKESENSOR.";
        break;
    case IfcSensorTypeEnum_SOUNDSENSOR:
        m_out << ".SOUNDSENSOR.";
        break;
    case IfcSensorTypeEnum_TEMPERATURESENSOR:
        m_out << ".TEMPERATURESENSOR.";
        break;
    case IfcSensorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSensorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcServiceLife(IfcServiceLife *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getServiceLifeType())) {
        m_out << "$";
    }
    else {
        writeIfcServiceLifeTypeEnum(ptr->getServiceLifeType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getServiceLifeDuration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getServiceLifeDuration());
    }
}

void SPFWriter::writeIfcServiceLifeTypeEnum(IfcServiceLifeTypeEnum enumData) {
    switch(enumData) {
    case IfcServiceLifeTypeEnum_ACTUALSERVICELIFE:
        m_out << ".ACTUALSERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_EXPECTEDSERVICELIFE:
        m_out << ".EXPECTEDSERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_OPTIMISTICREFERENCESERVICELIFE:
        m_out << ".OPTIMISTICREFERENCESERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_PESSIMISTICREFERENCESERVICELIFE:
        m_out << ".PESSIMISTICREFERENCESERVICELIFE.";
        break;
    case IfcServiceLifeTypeEnum_REFERENCESERVICELIFE:
        m_out << ".REFERENCESERVICELIFE.";
        break;
        }
}

void SPFWriter::writeIfcServiceLifeFactor(IfcServiceLifeFactor *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcServiceLifeFactorTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUpperValue())) {
        m_out << "$";
    }
    else {
        writeIfcMeasureValue(ptr->getUpperValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMostUsedValue())) {
        m_out << "$";
    }
    else {
        writeIfcMeasureValue(ptr->getMostUsedValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLowerValue())) {
        m_out << "$";
    }
    else {
        writeIfcMeasureValue(ptr->getLowerValue());
    }
}

void SPFWriter::writeIfcServiceLifeFactorTypeEnum(IfcServiceLifeFactorTypeEnum enumData) {
    switch(enumData) {
    case IfcServiceLifeFactorTypeEnum_A_QUALITYOFCOMPONENTS:
        m_out << ".A_QUALITYOFCOMPONENTS.";
        break;
    case IfcServiceLifeFactorTypeEnum_B_DESIGNLEVEL:
        m_out << ".B_DESIGNLEVEL.";
        break;
    case IfcServiceLifeFactorTypeEnum_C_WORKEXECUTIONLEVEL:
        m_out << ".C_WORKEXECUTIONLEVEL.";
        break;
    case IfcServiceLifeFactorTypeEnum_D_INDOORENVIRONMENT:
        m_out << ".D_INDOORENVIRONMENT.";
        break;
    case IfcServiceLifeFactorTypeEnum_E_OUTDOORENVIRONMENT:
        m_out << ".E_OUTDOORENVIRONMENT.";
        break;
    case IfcServiceLifeFactorTypeEnum_F_INUSECONDITIONS:
        m_out << ".F_INUSECONDITIONS.";
        break;
    case IfcServiceLifeFactorTypeEnum_G_MAINTENANCELEVEL:
        m_out << ".G_MAINTENANCELEVEL.";
        break;
    case IfcServiceLifeFactorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcServiceLifeFactorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcMeasureValue(IfcMeasureValue *selectData) {
    switch(selectData->currentType()) {
    case IfcMeasureValue::IFCVOLUMEMEASURE:
        m_out << "IFCVOLUMEMEASURE(";
        writeAttribute(selectData->getIfcVolumeMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCTIMEMEASURE:
        m_out << "IFCTIMEMEASURE(";
        writeAttribute(selectData->getIfcTimeMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCTHERMODYNAMICTEMPERATUREMEASURE:
        m_out << "IFCTHERMODYNAMICTEMPERATUREMEASURE(";
        writeAttribute(selectData->getIfcThermodynamicTemperatureMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCSOLIDANGLEMEASURE:
        m_out << "IFCSOLIDANGLEMEASURE(";
        writeAttribute(selectData->getIfcSolidAngleMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCPOSITIVERATIOMEASURE:
        m_out << "IFCPOSITIVERATIOMEASURE(";
        writeAttribute(selectData->getIfcPositiveRatioMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCRATIOMEASURE:
        m_out << "IFCRATIOMEASURE(";
        writeAttribute(selectData->getIfcRatioMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCPOSITIVEPLANEANGLEMEASURE:
        m_out << "IFCPOSITIVEPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPositivePlaneAngleMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCPLANEANGLEMEASURE:
        m_out << "IFCPLANEANGLEMEASURE(";
        writeAttribute(selectData->getIfcPlaneAngleMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCPARAMETERVALUE:
        m_out << "IFCPARAMETERVALUE(";
        writeAttribute(selectData->getIfcParameterValue());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCNUMERICMEASURE:
        m_out << "IFCNUMERICMEASURE(";
        writeAttribute(selectData->getIfcNumericMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCMASSMEASURE:
        m_out << "IFCMASSMEASURE(";
        writeAttribute(selectData->getIfcMassMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCPOSITIVELENGTHMEASURE:
        m_out << "IFCPOSITIVELENGTHMEASURE(";
        writeAttribute(selectData->getIfcPositiveLengthMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCLENGTHMEASURE:
        m_out << "IFCLENGTHMEASURE(";
        writeAttribute(selectData->getIfcLengthMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCELECTRICCURRENTMEASURE:
        m_out << "IFCELECTRICCURRENTMEASURE(";
        writeAttribute(selectData->getIfcElectricCurrentMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCDESCRIPTIVEMEASURE:
        m_out << "IFCDESCRIPTIVEMEASURE(";
        writeAttribute(selectData->getIfcDescriptiveMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCCOUNTMEASURE:
        m_out << "IFCCOUNTMEASURE(";
        writeAttribute(selectData->getIfcCountMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCCONTEXTDEPENDENTMEASURE:
        m_out << "IFCCONTEXTDEPENDENTMEASURE(";
        writeAttribute(selectData->getIfcContextDependentMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCAREAMEASURE:
        m_out << "IFCAREAMEASURE(";
        writeAttribute(selectData->getIfcAreaMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCAMOUNTOFSUBSTANCEMEASURE:
        m_out << "IFCAMOUNTOFSUBSTANCEMEASURE(";
        writeAttribute(selectData->getIfcAmountOfSubstanceMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCLUMINOUSINTENSITYMEASURE:
        m_out << "IFCLUMINOUSINTENSITYMEASURE(";
        writeAttribute(selectData->getIfcLuminousIntensityMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCNORMALISEDRATIOMEASURE:
        m_out << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        m_out << ")";
        break;
    case IfcMeasureValue::IFCCOMPLEXNUMBER:
        m_out << "IFCCOMPLEXNUMBER(";
        m_out << "(";
        {
            IfcComplexNumber::iterator step_it0 = (selectData->getIfcComplexNumber()).begin();
            if ((selectData->getIfcComplexNumber()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (selectData->getIfcComplexNumber()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcShapeAspect(IfcShapeAspect *ptr) {
    if (Step::isUnset(ptr->getShapeRepresentations())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcShapeModel > >::iterator step_it0 = (ptr->getShapeRepresentations()).begin();
            if ((ptr->getShapeRepresentations()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getShapeRepresentations()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProductDefinitional())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProductDefinitional());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPartOfProductDefinitionShape())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPartOfProductDefinitionShape());
    }
}

void SPFWriter::writeIfcShapeModel(IfcShapeModel *ptr) {
    if (Step::isUnset(ptr->getContextOfItems())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextOfItems());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationItem > >::iterator step_it0 = (ptr->getItems()).begin();
            if ((ptr->getItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcShapeRepresentation(IfcShapeRepresentation *ptr) {
    if (Step::isUnset(ptr->getContextOfItems())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextOfItems());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationItem > >::iterator step_it0 = (ptr->getItems()).begin();
            if ((ptr->getItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcShellBasedSurfaceModel(IfcShellBasedSurfaceModel *ptr) {
    if (Step::isUnset(ptr->getSbsmBoundary())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcShell > >::iterator step_it0 = (ptr->getSbsmBoundary()).begin();
            if ((ptr->getSbsmBoundary()).size()) {
                writeIfcShell((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSbsmBoundary()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcShell((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcShell(IfcShell *selectData) {
    switch(selectData->currentType()) {
    case IfcShell::IFCCLOSEDSHELL:
        writeAttribute(selectData->getIfcClosedShell());
        break;
    case IfcShell::IFCOPENSHELL:
        writeAttribute(selectData->getIfcOpenShell());
        break;
        }
}

void SPFWriter::writeIfcSimpleProperty(IfcSimpleProperty *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
}

void SPFWriter::writeIfcSite(IfcSite *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefLatitude())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            IfcCompoundPlaneAngleMeasure::iterator step_it0 = (ptr->getRefLatitude()).begin();
            if ((ptr->getRefLatitude()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getRefLatitude()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefLongitude())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            IfcCompoundPlaneAngleMeasure::iterator step_it0 = (ptr->getRefLongitude()).begin();
            if ((ptr->getRefLongitude()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getRefLongitude()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefElevation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRefElevation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLandTitleNumber())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLandTitleNumber());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSiteAddress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSiteAddress());
    }
}

void SPFWriter::writeIfcSlab(IfcSlab *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSlabTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSlabTypeEnum(IfcSlabTypeEnum enumData) {
    switch(enumData) {
    case IfcSlabTypeEnum_FLOOR:
        m_out << ".FLOOR.";
        break;
    case IfcSlabTypeEnum_ROOF:
        m_out << ".ROOF.";
        break;
    case IfcSlabTypeEnum_LANDING:
        m_out << ".LANDING.";
        break;
    case IfcSlabTypeEnum_BASESLAB:
        m_out << ".BASESLAB.";
        break;
    case IfcSlabTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSlabTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSlabType(IfcSlabType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSlabTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSlippageConnectionCondition(IfcSlippageConnectionCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSlippageX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSlippageX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSlippageY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSlippageY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSlippageZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSlippageZ());
    }
}

void SPFWriter::writeIfcSolidModel(IfcSolidModel *ptr) {
}

void SPFWriter::writeIfcSoundProperties(IfcSoundProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsAttenuating())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsAttenuating());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getSoundScale())) {
        m_out << "$";
    }
    else {
        writeIfcSoundScaleEnum(ptr->getSoundScale());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSoundValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcSoundValue > >::iterator step_it0 = (ptr->getSoundValues()).begin();
            if ((ptr->getSoundValues()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSoundValues()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSoundScaleEnum(IfcSoundScaleEnum enumData) {
    switch(enumData) {
    case IfcSoundScaleEnum_DBA:
        m_out << ".DBA.";
        break;
    case IfcSoundScaleEnum_DBB:
        m_out << ".DBB.";
        break;
    case IfcSoundScaleEnum_DBC:
        m_out << ".DBC.";
        break;
    case IfcSoundScaleEnum_NC:
        m_out << ".NC.";
        break;
    case IfcSoundScaleEnum_NR:
        m_out << ".NR.";
        break;
    case IfcSoundScaleEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSoundScaleEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSoundValue(IfcSoundValue *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSoundLevelTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSoundLevelTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFrequency())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFrequency());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSoundLevelSingleValue())) {
        m_out << "$";
    }
    else {
        writeIfcDerivedMeasureValue(ptr->getSoundLevelSingleValue());
    }
}

void SPFWriter::writeIfcSpace(IfcSpace *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getInteriorOrExteriorSpace())) {
        m_out << "$";
    }
    else {
        writeIfcInternalOrExternalEnum(ptr->getInteriorOrExteriorSpace());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElevationWithFlooring())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElevationWithFlooring());
    }
}

void SPFWriter::writeIfcSpaceHeaterType(IfcSpaceHeaterType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSpaceHeaterTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSpaceHeaterTypeEnum(IfcSpaceHeaterTypeEnum enumData) {
    switch(enumData) {
    case IfcSpaceHeaterTypeEnum_SECTIONALRADIATOR:
        m_out << ".SECTIONALRADIATOR.";
        break;
    case IfcSpaceHeaterTypeEnum_PANELRADIATOR:
        m_out << ".PANELRADIATOR.";
        break;
    case IfcSpaceHeaterTypeEnum_TUBULARRADIATOR:
        m_out << ".TUBULARRADIATOR.";
        break;
    case IfcSpaceHeaterTypeEnum_CONVECTOR:
        m_out << ".CONVECTOR.";
        break;
    case IfcSpaceHeaterTypeEnum_BASEBOARDHEATER:
        m_out << ".BASEBOARDHEATER.";
        break;
    case IfcSpaceHeaterTypeEnum_FINNEDTUBEUNIT:
        m_out << ".FINNEDTUBEUNIT.";
        break;
    case IfcSpaceHeaterTypeEnum_UNITHEATER:
        m_out << ".UNITHEATER.";
        break;
    case IfcSpaceHeaterTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSpaceHeaterTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSpaceProgram(IfcSpaceProgram *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSpaceProgramIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSpaceProgramIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaxRequiredArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaxRequiredArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinRequiredArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinRequiredArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRequestedLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRequestedLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStandardRequiredArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStandardRequiredArea());
    }
}

void SPFWriter::writeIfcSpaceThermalLoadProperties(IfcSpaceThermalLoadProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableValueRatio())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableValueRatio());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getThermalLoadSource())) {
        m_out << "$";
    }
    else {
        writeIfcThermalLoadSourceEnum(ptr->getThermalLoadSource());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPropertySource())) {
        m_out << "$";
    }
    else {
        writeIfcPropertySourceEnum(ptr->getPropertySource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSourceDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSourceDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumValue())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumValue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalLoadTimeSeriesValues())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalLoadTimeSeriesValues());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedThermalLoadSource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedThermalLoadSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedPropertySource())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedPropertySource());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getThermalLoadType())) {
        m_out << "$";
    }
    else {
        writeIfcThermalLoadTypeEnum(ptr->getThermalLoadType());
    }
}

void SPFWriter::writeIfcThermalLoadSourceEnum(IfcThermalLoadSourceEnum enumData) {
    switch(enumData) {
    case IfcThermalLoadSourceEnum_PEOPLE:
        m_out << ".PEOPLE.";
        break;
    case IfcThermalLoadSourceEnum_LIGHTING:
        m_out << ".LIGHTING.";
        break;
    case IfcThermalLoadSourceEnum_EQUIPMENT:
        m_out << ".EQUIPMENT.";
        break;
    case IfcThermalLoadSourceEnum_VENTILATIONINDOORAIR:
        m_out << ".VENTILATIONINDOORAIR.";
        break;
    case IfcThermalLoadSourceEnum_VENTILATIONOUTSIDEAIR:
        m_out << ".VENTILATIONOUTSIDEAIR.";
        break;
    case IfcThermalLoadSourceEnum_RECIRCULATEDAIR:
        m_out << ".RECIRCULATEDAIR.";
        break;
    case IfcThermalLoadSourceEnum_EXHAUSTAIR:
        m_out << ".EXHAUSTAIR.";
        break;
    case IfcThermalLoadSourceEnum_AIREXCHANGERATE:
        m_out << ".AIREXCHANGERATE.";
        break;
    case IfcThermalLoadSourceEnum_DRYBULBTEMPERATURE:
        m_out << ".DRYBULBTEMPERATURE.";
        break;
    case IfcThermalLoadSourceEnum_RELATIVEHUMIDITY:
        m_out << ".RELATIVEHUMIDITY.";
        break;
    case IfcThermalLoadSourceEnum_INFILTRATION:
        m_out << ".INFILTRATION.";
        break;
    case IfcThermalLoadSourceEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcThermalLoadSourceEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcThermalLoadTypeEnum(IfcThermalLoadTypeEnum enumData) {
    switch(enumData) {
    case IfcThermalLoadTypeEnum_SENSIBLE:
        m_out << ".SENSIBLE.";
        break;
    case IfcThermalLoadTypeEnum_LATENT:
        m_out << ".LATENT.";
        break;
    case IfcThermalLoadTypeEnum_RADIANT:
        m_out << ".RADIANT.";
        break;
    case IfcThermalLoadTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSpaceType(IfcSpaceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSpaceTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSpaceTypeEnum(IfcSpaceTypeEnum enumData) {
    switch(enumData) {
    case IfcSpaceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSpaceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSpatialStructureElement(IfcSpatialStructureElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
}

void SPFWriter::writeIfcSpatialStructureElementType(IfcSpatialStructureElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcSphere(IfcSphere *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
}

void SPFWriter::writeIfcStackTerminalType(IfcStackTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcStackTerminalTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcStackTerminalTypeEnum(IfcStackTerminalTypeEnum enumData) {
    switch(enumData) {
    case IfcStackTerminalTypeEnum_BIRDCAGE:
        m_out << ".BIRDCAGE.";
        break;
    case IfcStackTerminalTypeEnum_COWL:
        m_out << ".COWL.";
        break;
    case IfcStackTerminalTypeEnum_RAINWATERHOPPER:
        m_out << ".RAINWATERHOPPER.";
        break;
    case IfcStackTerminalTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcStackTerminalTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStair(IfcStair *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getShapeType())) {
        m_out << "$";
    }
    else {
        writeIfcStairTypeEnum(ptr->getShapeType());
    }
}

void SPFWriter::writeIfcStairTypeEnum(IfcStairTypeEnum enumData) {
    switch(enumData) {
    case IfcStairTypeEnum_STRAIGHT_RUN_STAIR:
        m_out << ".STRAIGHT_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_STRAIGHT_RUN_STAIR:
        m_out << ".TWO_STRAIGHT_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_QUARTER_WINDING_STAIR:
        m_out << ".QUARTER_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_QUARTER_TURN_STAIR:
        m_out << ".QUARTER_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_HALF_WINDING_STAIR:
        m_out << ".HALF_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_HALF_TURN_STAIR:
        m_out << ".HALF_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_QUARTER_WINDING_STAIR:
        m_out << ".TWO_QUARTER_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_QUARTER_TURN_STAIR:
        m_out << ".TWO_QUARTER_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_THREE_QUARTER_WINDING_STAIR:
        m_out << ".THREE_QUARTER_WINDING_STAIR.";
        break;
    case IfcStairTypeEnum_THREE_QUARTER_TURN_STAIR:
        m_out << ".THREE_QUARTER_TURN_STAIR.";
        break;
    case IfcStairTypeEnum_SPIRAL_STAIR:
        m_out << ".SPIRAL_STAIR.";
        break;
    case IfcStairTypeEnum_DOUBLE_RETURN_STAIR:
        m_out << ".DOUBLE_RETURN_STAIR.";
        break;
    case IfcStairTypeEnum_CURVED_RUN_STAIR:
        m_out << ".CURVED_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_TWO_CURVED_RUN_STAIR:
        m_out << ".TWO_CURVED_RUN_STAIR.";
        break;
    case IfcStairTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcStairTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStairFlight(IfcStairFlight *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNumberOfRiser())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNumberOfRiser());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNumberOfTreads())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNumberOfTreads());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRiserHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRiserHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTreadLength())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTreadLength());
    }
}

void SPFWriter::writeIfcStairFlightType(IfcStairFlightType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcStairFlightTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcStairFlightTypeEnum(IfcStairFlightTypeEnum enumData) {
    switch(enumData) {
    case IfcStairFlightTypeEnum_STRAIGHT:
        m_out << ".STRAIGHT.";
        break;
    case IfcStairFlightTypeEnum_WINDER:
        m_out << ".WINDER.";
        break;
    case IfcStairFlightTypeEnum_SPIRAL:
        m_out << ".SPIRAL.";
        break;
    case IfcStairFlightTypeEnum_CURVED:
        m_out << ".CURVED.";
        break;
    case IfcStairFlightTypeEnum_FREEFORM:
        m_out << ".FREEFORM.";
        break;
    case IfcStairFlightTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcStairFlightTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStructuralAction(IfcStructuralAction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDestabilizingLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDestabilizingLoad());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCausedBy())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCausedBy());
    }
}

void SPFWriter::writeIfcStructuralActivity(IfcStructuralActivity *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
}

void SPFWriter::writeIfcStructuralAnalysisModel(IfcStructuralAnalysisModel *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcAnalysisModelTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOrientationOf2DPlane())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientationOf2DPlane());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLoadedBy())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcStructuralLoadGroup > >::iterator step_it0 = (ptr->getLoadedBy()).begin();
            if ((ptr->getLoadedBy()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getLoadedBy()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasResults())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcStructuralResultGroup > >::iterator step_it0 = (ptr->getHasResults()).begin();
            if ((ptr->getHasResults()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasResults()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcAnalysisModelTypeEnum(IfcAnalysisModelTypeEnum enumData) {
    switch(enumData) {
    case IfcAnalysisModelTypeEnum_IN_PLANE_LOADING_2D:
        m_out << ".IN_PLANE_LOADING_2D.";
        break;
    case IfcAnalysisModelTypeEnum_OUT_PLANE_LOADING_2D:
        m_out << ".OUT_PLANE_LOADING_2D.";
        break;
    case IfcAnalysisModelTypeEnum_LOADING_3D:
        m_out << ".LOADING_3D.";
        break;
    case IfcAnalysisModelTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcAnalysisModelTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStructuralConnection(IfcStructuralConnection *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedCondition());
    }
}

void SPFWriter::writeIfcStructuralConnectionCondition(IfcStructuralConnectionCondition *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcStructuralCurveConnection(IfcStructuralCurveConnection *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedCondition());
    }
}

void SPFWriter::writeIfcStructuralCurveMember(IfcStructuralCurveMember *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcStructuralCurveTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcStructuralCurveTypeEnum(IfcStructuralCurveTypeEnum enumData) {
    switch(enumData) {
    case IfcStructuralCurveTypeEnum_RIGID_JOINED_MEMBER:
        m_out << ".RIGID_JOINED_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_PIN_JOINED_MEMBER:
        m_out << ".PIN_JOINED_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_CABLE:
        m_out << ".CABLE.";
        break;
    case IfcStructuralCurveTypeEnum_TENSION_MEMBER:
        m_out << ".TENSION_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_COMPRESSION_MEMBER:
        m_out << ".COMPRESSION_MEMBER.";
        break;
    case IfcStructuralCurveTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcStructuralCurveTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStructuralCurveMemberVarying(IfcStructuralCurveMemberVarying *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcStructuralCurveTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcStructuralItem(IfcStructuralItem *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcStructuralLinearAction(IfcStructuralLinearAction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDestabilizingLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDestabilizingLoad());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCausedBy())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCausedBy());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getProjectedOrTrue())) {
        m_out << "$";
    }
    else {
        writeIfcProjectedOrTrueLengthEnum(ptr->getProjectedOrTrue());
    }
}

void SPFWriter::writeIfcProjectedOrTrueLengthEnum(IfcProjectedOrTrueLengthEnum enumData) {
    switch(enumData) {
    case IfcProjectedOrTrueLengthEnum_PROJECTED_LENGTH:
        m_out << ".PROJECTED_LENGTH.";
        break;
    case IfcProjectedOrTrueLengthEnum_TRUE_LENGTH:
        m_out << ".TRUE_LENGTH.";
        break;
        }
}

void SPFWriter::writeIfcStructuralLinearActionVarying(IfcStructuralLinearActionVarying *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDestabilizingLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDestabilizingLoad());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCausedBy())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCausedBy());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getProjectedOrTrue())) {
        m_out << "$";
    }
    else {
        writeIfcProjectedOrTrueLengthEnum(ptr->getProjectedOrTrue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVaryingAppliedLoadLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVaryingAppliedLoadLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSubsequentAppliedLoads())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcStructuralLoad > >::iterator step_it0 = (ptr->getSubsequentAppliedLoads()).begin();
            if ((ptr->getSubsequentAppliedLoads()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSubsequentAppliedLoads()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcStructuralLoad(IfcStructuralLoad *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcStructuralLoadGroup(IfcStructuralLoadGroup *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcLoadGroupTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getActionType())) {
        m_out << "$";
    }
    else {
        writeIfcActionTypeEnum(ptr->getActionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getActionSource())) {
        m_out << "$";
    }
    else {
        writeIfcActionSourceTypeEnum(ptr->getActionSource());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCoefficient())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCoefficient());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPurpose());
    }
}

void SPFWriter::writeIfcLoadGroupTypeEnum(IfcLoadGroupTypeEnum enumData) {
    switch(enumData) {
    case IfcLoadGroupTypeEnum_LOAD_GROUP:
        m_out << ".LOAD_GROUP.";
        break;
    case IfcLoadGroupTypeEnum_LOAD_CASE:
        m_out << ".LOAD_CASE.";
        break;
    case IfcLoadGroupTypeEnum_LOAD_COMBINATION_GROUP:
        m_out << ".LOAD_COMBINATION_GROUP.";
        break;
    case IfcLoadGroupTypeEnum_LOAD_COMBINATION:
        m_out << ".LOAD_COMBINATION.";
        break;
    case IfcLoadGroupTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcLoadGroupTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcActionTypeEnum(IfcActionTypeEnum enumData) {
    switch(enumData) {
    case IfcActionTypeEnum_PERMANENT_G:
        m_out << ".PERMANENT_G.";
        break;
    case IfcActionTypeEnum_VARIABLE_Q:
        m_out << ".VARIABLE_Q.";
        break;
    case IfcActionTypeEnum_EXTRAORDINARY_A:
        m_out << ".EXTRAORDINARY_A.";
        break;
    case IfcActionTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcActionTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcActionSourceTypeEnum(IfcActionSourceTypeEnum enumData) {
    switch(enumData) {
    case IfcActionSourceTypeEnum_DEAD_LOAD_G:
        m_out << ".DEAD_LOAD_G.";
        break;
    case IfcActionSourceTypeEnum_COMPLETION_G1:
        m_out << ".COMPLETION_G1.";
        break;
    case IfcActionSourceTypeEnum_LIVE_LOAD_Q:
        m_out << ".LIVE_LOAD_Q.";
        break;
    case IfcActionSourceTypeEnum_SNOW_S:
        m_out << ".SNOW_S.";
        break;
    case IfcActionSourceTypeEnum_WIND_W:
        m_out << ".WIND_W.";
        break;
    case IfcActionSourceTypeEnum_PRESTRESSING_P:
        m_out << ".PRESTRESSING_P.";
        break;
    case IfcActionSourceTypeEnum_SETTLEMENT_U:
        m_out << ".SETTLEMENT_U.";
        break;
    case IfcActionSourceTypeEnum_TEMPERATURE_T:
        m_out << ".TEMPERATURE_T.";
        break;
    case IfcActionSourceTypeEnum_EARTHQUAKE_E:
        m_out << ".EARTHQUAKE_E.";
        break;
    case IfcActionSourceTypeEnum_FIRE:
        m_out << ".FIRE.";
        break;
    case IfcActionSourceTypeEnum_IMPULSE:
        m_out << ".IMPULSE.";
        break;
    case IfcActionSourceTypeEnum_IMPACT:
        m_out << ".IMPACT.";
        break;
    case IfcActionSourceTypeEnum_TRANSPORT:
        m_out << ".TRANSPORT.";
        break;
    case IfcActionSourceTypeEnum_ERECTION:
        m_out << ".ERECTION.";
        break;
    case IfcActionSourceTypeEnum_PROPPING:
        m_out << ".PROPPING.";
        break;
    case IfcActionSourceTypeEnum_SYSTEM_IMPERFECTION:
        m_out << ".SYSTEM_IMPERFECTION.";
        break;
    case IfcActionSourceTypeEnum_SHRINKAGE:
        m_out << ".SHRINKAGE.";
        break;
    case IfcActionSourceTypeEnum_CREEP:
        m_out << ".CREEP.";
        break;
    case IfcActionSourceTypeEnum_LACK_OF_FIT:
        m_out << ".LACK_OF_FIT.";
        break;
    case IfcActionSourceTypeEnum_BUOYANCY:
        m_out << ".BUOYANCY.";
        break;
    case IfcActionSourceTypeEnum_ICE:
        m_out << ".ICE.";
        break;
    case IfcActionSourceTypeEnum_CURRENT:
        m_out << ".CURRENT.";
        break;
    case IfcActionSourceTypeEnum_WAVE:
        m_out << ".WAVE.";
        break;
    case IfcActionSourceTypeEnum_RAIN:
        m_out << ".RAIN.";
        break;
    case IfcActionSourceTypeEnum_BRAKES:
        m_out << ".BRAKES.";
        break;
    case IfcActionSourceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcActionSourceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStructuralLoadLinearForce(IfcStructuralLoadLinearForce *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearForceX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearForceX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearForceY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearForceY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearForceZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearForceZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearMomentX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearMomentX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearMomentY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearMomentY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLinearMomentZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLinearMomentZ());
    }
}

void SPFWriter::writeIfcStructuralLoadPlanarForce(IfcStructuralLoadPlanarForce *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlanarForceX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlanarForceX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlanarForceY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlanarForceY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlanarForceZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlanarForceZ());
    }
}

void SPFWriter::writeIfcStructuralLoadSingleDisplacement(IfcStructuralLoadSingleDisplacement *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDisplacementX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDisplacementX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDisplacementY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDisplacementY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDisplacementZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDisplacementZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalDisplacementRX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalDisplacementRX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalDisplacementRY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalDisplacementRY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalDisplacementRZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalDisplacementRZ());
    }
}

void SPFWriter::writeIfcStructuralLoadSingleDisplacementDistortion(IfcStructuralLoadSingleDisplacementDistortion *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDisplacementX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDisplacementX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDisplacementY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDisplacementY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDisplacementZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDisplacementZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalDisplacementRX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalDisplacementRX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalDisplacementRY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalDisplacementRY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRotationalDisplacementRZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRotationalDisplacementRZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDistortion())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDistortion());
    }
}

void SPFWriter::writeIfcStructuralLoadSingleForce(IfcStructuralLoadSingleForce *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getForceX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForceX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getForceY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForceY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getForceZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForceZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentZ());
    }
}

void SPFWriter::writeIfcStructuralLoadSingleForceWarping(IfcStructuralLoadSingleForceWarping *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getForceX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForceX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getForceY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForceY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getForceZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getForceZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWarpingMoment())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWarpingMoment());
    }
}

void SPFWriter::writeIfcStructuralLoadStatic(IfcStructuralLoadStatic *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcStructuralLoadTemperature(IfcStructuralLoadTemperature *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDeltaT_Constant())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDeltaT_Constant());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDeltaT_Y())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDeltaT_Y());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDeltaT_Z())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDeltaT_Z());
    }
}

void SPFWriter::writeIfcStructuralMember(IfcStructuralMember *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcStructuralPlanarAction(IfcStructuralPlanarAction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDestabilizingLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDestabilizingLoad());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCausedBy())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCausedBy());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getProjectedOrTrue())) {
        m_out << "$";
    }
    else {
        writeIfcProjectedOrTrueLengthEnum(ptr->getProjectedOrTrue());
    }
}

void SPFWriter::writeIfcStructuralPlanarActionVarying(IfcStructuralPlanarActionVarying *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDestabilizingLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDestabilizingLoad());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCausedBy())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCausedBy());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getProjectedOrTrue())) {
        m_out << "$";
    }
    else {
        writeIfcProjectedOrTrueLengthEnum(ptr->getProjectedOrTrue());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVaryingAppliedLoadLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVaryingAppliedLoadLocation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSubsequentAppliedLoads())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcStructuralLoad > >::iterator step_it0 = (ptr->getSubsequentAppliedLoads()).begin();
            if ((ptr->getSubsequentAppliedLoads()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSubsequentAppliedLoads()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcStructuralPointAction(IfcStructuralPointAction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDestabilizingLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDestabilizingLoad());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCausedBy())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCausedBy());
    }
}

void SPFWriter::writeIfcStructuralPointConnection(IfcStructuralPointConnection *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedCondition());
    }
}

void SPFWriter::writeIfcStructuralPointReaction(IfcStructuralPointReaction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
}

void SPFWriter::writeIfcStructuralProfileProperties(IfcStructuralProfileProperties *ptr) {
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPhysicalWeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPhysicalWeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPerimeter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPerimeter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumPlateThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumPlateThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumPlateThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumPlateThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTorsionalConstantX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTorsionalConstantX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentOfInertiaYZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentOfInertiaYZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentOfInertiaY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentOfInertiaY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentOfInertiaZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentOfInertiaZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWarpingConstant())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWarpingConstant());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearCentreZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearCentreZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearCentreY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearCentreY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearDeformationAreaZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearDeformationAreaZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearDeformationAreaY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearDeformationAreaY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumSectionModulusY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumSectionModulusY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumSectionModulusY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumSectionModulusY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumSectionModulusZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumSectionModulusZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumSectionModulusZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumSectionModulusZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTorsionalSectionModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTorsionalSectionModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
}

void SPFWriter::writeIfcStructuralReaction(IfcStructuralReaction *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedLoad())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedLoad());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getGlobalOrLocal())) {
        m_out << "$";
    }
    else {
        writeIfcGlobalOrLocalEnum(ptr->getGlobalOrLocal());
    }
}

void SPFWriter::writeIfcStructuralResultGroup(IfcStructuralResultGroup *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTheoryType())) {
        m_out << "$";
    }
    else {
        writeIfcAnalysisTheoryTypeEnum(ptr->getTheoryType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResultForLoadGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResultForLoadGroup());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsLinear())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsLinear());
    }
}

void SPFWriter::writeIfcAnalysisTheoryTypeEnum(IfcAnalysisTheoryTypeEnum enumData) {
    switch(enumData) {
    case IfcAnalysisTheoryTypeEnum_FIRST_ORDER_THEORY:
        m_out << ".FIRST_ORDER_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_SECOND_ORDER_THEORY:
        m_out << ".SECOND_ORDER_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_THIRD_ORDER_THEORY:
        m_out << ".THIRD_ORDER_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_FULL_NONLINEAR_THEORY:
        m_out << ".FULL_NONLINEAR_THEORY.";
        break;
    case IfcAnalysisTheoryTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcAnalysisTheoryTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStructuralSteelProfileProperties(IfcStructuralSteelProfileProperties *ptr) {
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileDefinition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileDefinition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPhysicalWeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPhysicalWeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPerimeter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPerimeter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumPlateThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumPlateThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumPlateThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumPlateThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTorsionalConstantX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTorsionalConstantX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentOfInertiaYZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentOfInertiaYZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentOfInertiaY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentOfInertiaY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMomentOfInertiaZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMomentOfInertiaZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWarpingConstant())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWarpingConstant());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearCentreZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearCentreZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearCentreY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearCentreY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearDeformationAreaZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearDeformationAreaZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearDeformationAreaY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearDeformationAreaY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumSectionModulusY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumSectionModulusY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumSectionModulusY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumSectionModulusY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMaximumSectionModulusZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaximumSectionModulusZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinimumSectionModulusZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinimumSectionModulusZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTorsionalSectionModulus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTorsionalSectionModulus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInX());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearAreaZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearAreaZ());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShearAreaY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShearAreaY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlasticShapeFactorY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlasticShapeFactorY());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlasticShapeFactorZ())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPlasticShapeFactorZ());
    }
}

void SPFWriter::writeIfcStructuralSurfaceConnection(IfcStructuralSurfaceConnection *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAppliedCondition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAppliedCondition());
    }
}

void SPFWriter::writeIfcStructuralSurfaceMember(IfcStructuralSurfaceMember *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcStructuralSurfaceTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThickness());
    }
}

void SPFWriter::writeIfcStructuralSurfaceTypeEnum(IfcStructuralSurfaceTypeEnum enumData) {
    switch(enumData) {
    case IfcStructuralSurfaceTypeEnum_BENDING_ELEMENT:
        m_out << ".BENDING_ELEMENT.";
        break;
    case IfcStructuralSurfaceTypeEnum_MEMBRANE_ELEMENT:
        m_out << ".MEMBRANE_ELEMENT.";
        break;
    case IfcStructuralSurfaceTypeEnum_SHELL:
        m_out << ".SHELL.";
        break;
    case IfcStructuralSurfaceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcStructuralSurfaceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcStructuralSurfaceMemberVarying(IfcStructuralSurfaceMemberVarying *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcStructuralSurfaceTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSubsequentThickness())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcPositiveLengthMeasure >::iterator step_it0 = (ptr->getSubsequentThickness()).begin();
            if ((ptr->getSubsequentThickness()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getSubsequentThickness()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVaryingThicknessLocation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVaryingThicknessLocation());
    }
}

void SPFWriter::writeIfcStructuredDimensionCallout(IfcStructuredDimensionCallout *ptr) {
    if (Step::isUnset(ptr->getContents())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDraughtingCalloutElement > >::iterator step_it0 = (ptr->getContents()).begin();
            if ((ptr->getContents()).size()) {
                writeIfcDraughtingCalloutElement((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getContents()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDraughtingCalloutElement((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcStyleModel(IfcStyleModel *ptr) {
    if (Step::isUnset(ptr->getContextOfItems())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextOfItems());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationItem > >::iterator step_it0 = (ptr->getItems()).begin();
            if ((ptr->getItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcStyledItem(IfcStyledItem *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
}

void SPFWriter::writeIfcStyledRepresentation(IfcStyledRepresentation *ptr) {
    if (Step::isUnset(ptr->getContextOfItems())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextOfItems());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationItem > >::iterator step_it0 = (ptr->getItems()).begin();
            if ((ptr->getItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSubContractResource(IfcSubContractResource *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getResourceGroup())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getResourceGroup());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getResourceConsumption())) {
        m_out << "$";
    }
    else {
        writeIfcResourceConsumptionEnum(ptr->getResourceConsumption());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBaseQuantity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBaseQuantity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSubContractor())) {
        m_out << "$";
    }
    else {
        writeIfcActorSelect(ptr->getSubContractor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getJobDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getJobDescription());
    }
}

void SPFWriter::writeIfcSubedge(IfcSubedge *ptr) {
    if (Step::isUnset(ptr->getEdgeStart())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeStart());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeEnd())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeEnd());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getParentEdge())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getParentEdge());
    }
}

void SPFWriter::writeIfcSurface(IfcSurface *ptr) {
}

void SPFWriter::writeIfcSurfaceCurveSweptAreaSolid(IfcSurfaceCurveSweptAreaSolid *ptr) {
    if (Step::isUnset(ptr->getSweptArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDirectrix())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDirectrix());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartParam())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStartParam());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEndParam())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEndParam());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getReferenceSurface())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getReferenceSurface());
    }
}

void SPFWriter::writeIfcSurfaceOfLinearExtrusion(IfcSurfaceOfLinearExtrusion *ptr) {
    if (Step::isUnset(ptr->getSweptCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExtrudedDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExtrudedDirection());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
}

void SPFWriter::writeIfcSurfaceOfRevolution(IfcSurfaceOfRevolution *ptr) {
    if (Step::isUnset(ptr->getSweptCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxisPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxisPosition());
    }
}

void SPFWriter::writeIfcSurfaceStyle(IfcSurfaceStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getSide())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceSide(ptr->getSide());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcSurfaceStyleElementSelect > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeIfcSurfaceStyleElementSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcSurfaceStyleElementSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSurfaceSide(IfcSurfaceSide enumData) {
    switch(enumData) {
    case IfcSurfaceSide_POSITIVE:
        m_out << ".POSITIVE.";
        break;
    case IfcSurfaceSide_NEGATIVE:
        m_out << ".NEGATIVE.";
        break;
    case IfcSurfaceSide_BOTH:
        m_out << ".BOTH.";
        break;
        }
}

void SPFWriter::writeIfcSurfaceStyleElementSelect(IfcSurfaceStyleElementSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLESHADING:
        writeAttribute(selectData->getIfcSurfaceStyleShading());
        break;
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLELIGHTING:
        writeAttribute(selectData->getIfcSurfaceStyleLighting());
        break;
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLEWITHTEXTURES:
        writeAttribute(selectData->getIfcSurfaceStyleWithTextures());
        break;
    case IfcSurfaceStyleElementSelect::IFCEXTERNALLYDEFINEDSURFACESTYLE:
        writeAttribute(selectData->getIfcExternallyDefinedSurfaceStyle());
        break;
    case IfcSurfaceStyleElementSelect::IFCSURFACESTYLEREFRACTION:
        writeAttribute(selectData->getIfcSurfaceStyleRefraction());
        break;
        }
}

void SPFWriter::writeIfcSurfaceStyleLighting(IfcSurfaceStyleLighting *ptr) {
    if (Step::isUnset(ptr->getDiffuseTransmissionColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDiffuseTransmissionColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDiffuseReflectionColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDiffuseReflectionColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransmissionColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransmissionColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getReflectanceColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getReflectanceColour());
    }
}

void SPFWriter::writeIfcSurfaceStyleRefraction(IfcSurfaceStyleRefraction *ptr) {
    if (Step::isUnset(ptr->getRefractionIndex())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRefractionIndex());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDispersionFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDispersionFactor());
    }
}

void SPFWriter::writeIfcSurfaceStyleRendering(IfcSurfaceStyleRendering *ptr) {
    if (Step::isUnset(ptr->getSurfaceColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSurfaceColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransparency())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransparency());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDiffuseColour())) {
        m_out << "$";
    }
    else {
        writeIfcColourOrFactor(ptr->getDiffuseColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransmissionColour())) {
        m_out << "$";
    }
    else {
        writeIfcColourOrFactor(ptr->getTransmissionColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDiffuseTransmissionColour())) {
        m_out << "$";
    }
    else {
        writeIfcColourOrFactor(ptr->getDiffuseTransmissionColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getReflectionColour())) {
        m_out << "$";
    }
    else {
        writeIfcColourOrFactor(ptr->getReflectionColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSpecularColour())) {
        m_out << "$";
    }
    else {
        writeIfcColourOrFactor(ptr->getSpecularColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSpecularHighlight())) {
        m_out << "$";
    }
    else {
        writeIfcSpecularHighlightSelect(ptr->getSpecularHighlight());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getReflectanceMethod())) {
        m_out << "$";
    }
    else {
        writeIfcReflectanceMethodEnum(ptr->getReflectanceMethod());
    }
}

void SPFWriter::writeIfcColourOrFactor(IfcColourOrFactor *selectData) {
    switch(selectData->currentType()) {
    case IfcColourOrFactor::IFCCOLOURRGB:
        writeAttribute(selectData->getIfcColourRgb());
        break;
    case IfcColourOrFactor::IFCNORMALISEDRATIOMEASURE:
        m_out << "IFCNORMALISEDRATIOMEASURE(";
        writeAttribute(selectData->getIfcNormalisedRatioMeasure());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcSpecularHighlightSelect(IfcSpecularHighlightSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcSpecularHighlightSelect::IFCSPECULAREXPONENT:
        m_out << "IFCSPECULAREXPONENT(";
        writeAttribute(selectData->getIfcSpecularExponent());
        m_out << ")";
        break;
    case IfcSpecularHighlightSelect::IFCSPECULARROUGHNESS:
        m_out << "IFCSPECULARROUGHNESS(";
        writeAttribute(selectData->getIfcSpecularRoughness());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcReflectanceMethodEnum(IfcReflectanceMethodEnum enumData) {
    switch(enumData) {
    case IfcReflectanceMethodEnum_BLINN:
        m_out << ".BLINN.";
        break;
    case IfcReflectanceMethodEnum_FLAT:
        m_out << ".FLAT.";
        break;
    case IfcReflectanceMethodEnum_GLASS:
        m_out << ".GLASS.";
        break;
    case IfcReflectanceMethodEnum_MATT:
        m_out << ".MATT.";
        break;
    case IfcReflectanceMethodEnum_METAL:
        m_out << ".METAL.";
        break;
    case IfcReflectanceMethodEnum_MIRROR:
        m_out << ".MIRROR.";
        break;
    case IfcReflectanceMethodEnum_PHONG:
        m_out << ".PHONG.";
        break;
    case IfcReflectanceMethodEnum_PLASTIC:
        m_out << ".PLASTIC.";
        break;
    case IfcReflectanceMethodEnum_STRAUSS:
        m_out << ".STRAUSS.";
        break;
    case IfcReflectanceMethodEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSurfaceStyleShading(IfcSurfaceStyleShading *ptr) {
    if (Step::isUnset(ptr->getSurfaceColour())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSurfaceColour());
    }
}

void SPFWriter::writeIfcSurfaceStyleWithTextures(IfcSurfaceStyleWithTextures *ptr) {
    if (Step::isUnset(ptr->getTextures())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcSurfaceTexture > >::iterator step_it0 = (ptr->getTextures()).begin();
            if ((ptr->getTextures()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTextures()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSurfaceTexture(IfcSurfaceTexture *ptr) {
    if (Step::isUnset(ptr->getRepeatS())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatS());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepeatT())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatT());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTextureType())) {
        m_out << "$";
    }
    else {
        writeIfcSurfaceTextureEnum(ptr->getTextureType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextureTransform())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextureTransform());
    }
}

void SPFWriter::writeIfcSweptAreaSolid(IfcSweptAreaSolid *ptr) {
    if (Step::isUnset(ptr->getSweptArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
}

void SPFWriter::writeIfcSweptDiskSolid(IfcSweptDiskSolid *ptr) {
    if (Step::isUnset(ptr->getDirectrix())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDirectrix());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getInnerRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getInnerRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartParam())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStartParam());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEndParam())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEndParam());
    }
}

void SPFWriter::writeIfcSweptSurface(IfcSweptSurface *ptr) {
    if (Step::isUnset(ptr->getSweptCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSweptCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
}

void SPFWriter::writeIfcSwitchingDeviceType(IfcSwitchingDeviceType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcSwitchingDeviceTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcSwitchingDeviceTypeEnum(IfcSwitchingDeviceTypeEnum enumData) {
    switch(enumData) {
    case IfcSwitchingDeviceTypeEnum_CONTACTOR:
        m_out << ".CONTACTOR.";
        break;
    case IfcSwitchingDeviceTypeEnum_EMERGENCYSTOP:
        m_out << ".EMERGENCYSTOP.";
        break;
    case IfcSwitchingDeviceTypeEnum_STARTER:
        m_out << ".STARTER.";
        break;
    case IfcSwitchingDeviceTypeEnum_SWITCHDISCONNECTOR:
        m_out << ".SWITCHDISCONNECTOR.";
        break;
    case IfcSwitchingDeviceTypeEnum_TOGGLESWITCH:
        m_out << ".TOGGLESWITCH.";
        break;
    case IfcSwitchingDeviceTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcSwitchingDeviceTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcSymbolStyle(IfcSymbolStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyleOfSymbol())) {
        m_out << "$";
    }
    else {
        writeIfcSymbolStyleSelect(ptr->getStyleOfSymbol());
    }
}

void SPFWriter::writeIfcSymbolStyleSelect(IfcSymbolStyleSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcSymbolStyleSelect::IFCCOLOURSPECIFICATION:
        writeAttribute(selectData->getIfcColourSpecification());
        break;
    case IfcSymbolStyleSelect::IFCPREDEFINEDCOLOUR:
        writeAttribute(selectData->getIfcPreDefinedColour());
        break;
        }
}

void SPFWriter::writeIfcSystem(IfcSystem *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcSystemFurnitureElementType(IfcSystemFurnitureElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
}

void SPFWriter::writeIfcTShapeProfileDef(IfcTShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeEdgeRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeEdgeRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebEdgeRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebEdgeRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebSlope())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebSlope());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeSlope())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeSlope());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInY())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInY());
    }
}

void SPFWriter::writeIfcTable(IfcTable *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRows())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcTableRow > >::iterator step_it0 = (ptr->getRows()).begin();
            if ((ptr->getRows()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRows()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTableRow(IfcTableRow *ptr) {
    if (Step::isUnset(ptr->getRowCells())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getRowCells()).begin();
            if ((ptr->getRowCells()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRowCells()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsHeading())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsHeading());
    }
}

void SPFWriter::writeIfcTankType(IfcTankType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcTankTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcTankTypeEnum(IfcTankTypeEnum enumData) {
    switch(enumData) {
    case IfcTankTypeEnum_PREFORMED:
        m_out << ".PREFORMED.";
        break;
    case IfcTankTypeEnum_SECTIONAL:
        m_out << ".SECTIONAL.";
        break;
    case IfcTankTypeEnum_EXPANSION:
        m_out << ".EXPANSION.";
        break;
    case IfcTankTypeEnum_PRESSUREVESSEL:
        m_out << ".PRESSUREVESSEL.";
        break;
    case IfcTankTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcTankTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcTask(IfcTask *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTaskId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTaskId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStatus())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getStatus());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWorkMethod())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWorkMethod());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsMilestone())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsMilestone());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPriority())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPriority());
    }
}

void SPFWriter::writeIfcTelecomAddress(IfcTelecomAddress *ptr) {
    if (Step::isUnsetEnum(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeIfcAddressTypeEnum(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTelephoneNumbers())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getTelephoneNumbers()).begin();
            if ((ptr->getTelephoneNumbers()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getTelephoneNumbers()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFacsimileNumbers())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getFacsimileNumbers()).begin();
            if ((ptr->getFacsimileNumbers()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getFacsimileNumbers()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPagerNumber())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPagerNumber());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElectronicMailAddresses())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLabel >::iterator step_it0 = (ptr->getElectronicMailAddresses()).begin();
            if ((ptr->getElectronicMailAddresses()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getElectronicMailAddresses()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWWWHomePageURL())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWWWHomePageURL());
    }
}

void SPFWriter::writeIfcTendon(IfcTendon *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSteelGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSteelGrade());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcTendonTypeEnum(ptr->getPredefinedType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getNominalDiameter())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getNominalDiameter());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionArea())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCrossSectionArea());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTensionForce())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTensionForce());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPreStress())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPreStress());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFrictionCoefficient())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFrictionCoefficient());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAnchorageSlip())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAnchorageSlip());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMinCurvatureRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMinCurvatureRadius());
    }
}

void SPFWriter::writeIfcTendonTypeEnum(IfcTendonTypeEnum enumData) {
    switch(enumData) {
    case IfcTendonTypeEnum_STRAND:
        m_out << ".STRAND.";
        break;
    case IfcTendonTypeEnum_WIRE:
        m_out << ".WIRE.";
        break;
    case IfcTendonTypeEnum_BAR:
        m_out << ".BAR.";
        break;
    case IfcTendonTypeEnum_COATED:
        m_out << ".COATED.";
        break;
    case IfcTendonTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcTendonTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcTendonAnchor(IfcTendonAnchor *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSteelGrade())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSteelGrade());
    }
}

void SPFWriter::writeIfcTerminatorSymbol(IfcTerminatorSymbol *ptr) {
    if (Step::isUnset(ptr->getItem())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getItem());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStyles())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPresentationStyleAssignment > >::iterator step_it0 = (ptr->getStyles()).begin();
            if ((ptr->getStyles()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getStyles()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAnnotatedCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAnnotatedCurve());
    }
}

void SPFWriter::writeIfcTextLiteral(IfcTextLiteral *ptr) {
    if (Step::isUnset(ptr->getLiteral())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiteral());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlacement())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPlacement());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPath())) {
        m_out << "$";
    }
    else {
        writeIfcTextPath(ptr->getPath());
    }
}

void SPFWriter::writeIfcTextPath(IfcTextPath enumData) {
    switch(enumData) {
    case IfcTextPath_LEFT:
        m_out << ".LEFT.";
        break;
    case IfcTextPath_RIGHT:
        m_out << ".RIGHT.";
        break;
    case IfcTextPath_UP:
        m_out << ".UP.";
        break;
    case IfcTextPath_DOWN:
        m_out << ".DOWN.";
        break;
        }
}

void SPFWriter::writeIfcTextLiteralWithExtent(IfcTextLiteralWithExtent *ptr) {
    if (Step::isUnset(ptr->getLiteral())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiteral());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPlacement())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPlacement());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPath())) {
        m_out << "$";
    }
    else {
        writeIfcTextPath(ptr->getPath());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getExtent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getExtent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBoxAlignment())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBoxAlignment());
    }
}

void SPFWriter::writeIfcTextStyle(IfcTextStyle *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextCharacterAppearance())) {
        m_out << "$";
    }
    else {
        writeIfcCharacterStyleSelect(ptr->getTextCharacterAppearance());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextStyle())) {
        m_out << "$";
    }
    else {
        writeIfcTextStyleSelect(ptr->getTextStyle());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextFontStyle())) {
        m_out << "$";
    }
    else {
        writeIfcTextFontSelect(ptr->getTextFontStyle());
    }
}

void SPFWriter::writeIfcCharacterStyleSelect(IfcCharacterStyleSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcCharacterStyleSelect::IFCTEXTSTYLEFORDEFINEDFONT:
        writeAttribute(selectData->getIfcTextStyleForDefinedFont());
        break;
        }
}

void SPFWriter::writeIfcTextStyleSelect(IfcTextStyleSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcTextStyleSelect::IFCTEXTSTYLEWITHBOXCHARACTERISTICS:
        writeAttribute(selectData->getIfcTextStyleWithBoxCharacteristics());
        break;
    case IfcTextStyleSelect::IFCTEXTSTYLETEXTMODEL:
        writeAttribute(selectData->getIfcTextStyleTextModel());
        break;
        }
}

void SPFWriter::writeIfcTextFontSelect(IfcTextFontSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcTextFontSelect::IFCPREDEFINEDTEXTFONT:
        writeAttribute(selectData->getIfcPreDefinedTextFont());
        break;
    case IfcTextFontSelect::IFCEXTERNALLYDEFINEDTEXTFONT:
        writeAttribute(selectData->getIfcExternallyDefinedTextFont());
        break;
        }
}

void SPFWriter::writeIfcTextStyleFontModel(IfcTextStyleFontModel *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFontFamily())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcTextFontName >::iterator step_it0 = (ptr->getFontFamily()).begin();
            if ((ptr->getFontFamily()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getFontFamily()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFontStyle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFontStyle());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFontVariant())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFontVariant());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFontWeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFontWeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFontSize())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getFontSize());
    }
}

void SPFWriter::writeIfcTextStyleForDefinedFont(IfcTextStyleForDefinedFont *ptr) {
    if (Step::isUnset(ptr->getColour())) {
        m_out << "$";
    }
    else {
        writeIfcColour(ptr->getColour());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBackgroundColour())) {
        m_out << "$";
    }
    else {
        writeIfcColour(ptr->getBackgroundColour());
    }
}

void SPFWriter::writeIfcTextStyleTextModel(IfcTextStyleTextModel *ptr) {
    if (Step::isUnset(ptr->getTextIndent())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getTextIndent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextAlign())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextAlign());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextDecoration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextDecoration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLetterSpacing())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getLetterSpacing());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWordSpacing())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getWordSpacing());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTextTransform())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTextTransform());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLineHeight())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getLineHeight());
    }
}

void SPFWriter::writeIfcTextStyleWithBoxCharacteristics(IfcTextStyleWithBoxCharacteristics *ptr) {
    if (Step::isUnset(ptr->getBoxHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBoxHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBoxWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBoxWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBoxSlantAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBoxSlantAngle());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBoxRotateAngle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBoxRotateAngle());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCharacterSpacing())) {
        m_out << "$";
    }
    else {
        writeIfcSizeSelect(ptr->getCharacterSpacing());
    }
}

void SPFWriter::writeIfcTextureCoordinate(IfcTextureCoordinate *ptr) {
}

void SPFWriter::writeIfcTextureCoordinateGenerator(IfcTextureCoordinateGenerator *ptr) {
    if (Step::isUnset(ptr->getMode())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMode());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getParameter())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcSimpleValue > >::iterator step_it0 = (ptr->getParameter()).begin();
            if ((ptr->getParameter()).size()) {
                writeIfcSimpleValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getParameter()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcSimpleValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcSimpleValue(IfcSimpleValue *selectData) {
    switch(selectData->currentType()) {
    case IfcSimpleValue::IFCINTEGER:
        m_out << "IFCINTEGER(";
        writeAttribute(selectData->getIfcInteger());
        m_out << ")";
        break;
    case IfcSimpleValue::IFCREAL:
        m_out << "IFCREAL(";
        writeAttribute(selectData->getIfcReal());
        m_out << ")";
        break;
    case IfcSimpleValue::IFCBOOLEAN:
        m_out << "IFCBOOLEAN(";
        writeAttribute(selectData->getIfcBoolean());
        m_out << ")";
        break;
    case IfcSimpleValue::IFCIDENTIFIER:
        m_out << "IFCIDENTIFIER(";
        writeAttribute(selectData->getIfcIdentifier());
        m_out << ")";
        break;
    case IfcSimpleValue::IFCTEXT:
        m_out << "IFCTEXT(";
        writeAttribute(selectData->getIfcText());
        m_out << ")";
        break;
    case IfcSimpleValue::IFCLABEL:
        m_out << "IFCLABEL(";
        writeAttribute(selectData->getIfcLabel());
        m_out << ")";
        break;
    case IfcSimpleValue::IFCLOGICAL:
        m_out << "IFCLOGICAL(";
        writeAttribute(selectData->getIfcLogical());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcTextureMap(IfcTextureMap *ptr) {
    if (Step::isUnset(ptr->getTextureMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcVertexBasedTextureMap > >::iterator step_it0 = (ptr->getTextureMaps()).begin();
            if ((ptr->getTextureMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTextureMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTextureVertex(IfcTextureVertex *ptr) {
    if (Step::isUnset(ptr->getCoordinates())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcParameterValue >::iterator step_it0 = (ptr->getCoordinates()).begin();
            if ((ptr->getCoordinates()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getCoordinates()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcThermalMaterialProperties(IfcThermalMaterialProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSpecificHeatCapacity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSpecificHeatCapacity());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBoilingPoint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBoilingPoint());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFreezingPoint())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFreezingPoint());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getThermalConductivity())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getThermalConductivity());
    }
}

void SPFWriter::writeIfcTimeSeries(IfcTimeSeries *ptr) {
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStartTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEndTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getEndTime());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTimeSeriesDataType())) {
        m_out << "$";
    }
    else {
        writeIfcTimeSeriesDataTypeEnum(ptr->getTimeSeriesDataType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getDataOrigin())) {
        m_out << "$";
    }
    else {
        writeIfcDataOriginEnum(ptr->getDataOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedDataOrigin())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedDataOrigin());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUnit())) {
        m_out << "$";
    }
    else {
        writeIfcUnit(ptr->getUnit());
    }
}

void SPFWriter::writeIfcTimeSeriesReferenceRelationship(IfcTimeSeriesReferenceRelationship *ptr) {
    if (Step::isUnset(ptr->getReferencedTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getReferencedTimeSeries());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeSeriesReferences())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcDocumentSelect > >::iterator step_it0 = (ptr->getTimeSeriesReferences()).begin();
            if ((ptr->getTimeSeriesReferences()).size()) {
                writeIfcDocumentSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTimeSeriesReferences()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDocumentSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTimeSeriesSchedule(IfcTimeSeriesSchedule *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableDates())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcDateTimeSelect > >::iterator step_it0 = (ptr->getApplicableDates()).begin();
            if ((ptr->getApplicableDates()).size()) {
                writeIfcDateTimeSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getApplicableDates()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcDateTimeSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTimeSeriesScheduleType())) {
        m_out << "$";
    }
    else {
        writeIfcTimeSeriesScheduleTypeEnum(ptr->getTimeSeriesScheduleType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTimeSeries())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTimeSeries());
    }
}

void SPFWriter::writeIfcTimeSeriesScheduleTypeEnum(IfcTimeSeriesScheduleTypeEnum enumData) {
    switch(enumData) {
    case IfcTimeSeriesScheduleTypeEnum_ANNUAL:
        m_out << ".ANNUAL.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_MONTHLY:
        m_out << ".MONTHLY.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_WEEKLY:
        m_out << ".WEEKLY.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_DAILY:
        m_out << ".DAILY.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcTimeSeriesScheduleTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcTimeSeriesValue(IfcTimeSeriesValue *ptr) {
    if (Step::isUnset(ptr->getListValues())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcValue > >::iterator step_it0 = (ptr->getListValues()).begin();
            if ((ptr->getListValues()).size()) {
                writeIfcValue((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getListValues()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcValue((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTopologicalRepresentationItem(IfcTopologicalRepresentationItem *ptr) {
}

void SPFWriter::writeIfcTopologyRepresentation(IfcTopologyRepresentation *ptr) {
    if (Step::isUnset(ptr->getContextOfItems())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getContextOfItems());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getItems())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcRepresentationItem > >::iterator step_it0 = (ptr->getItems()).begin();
            if ((ptr->getItems()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getItems()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTransformerType(IfcTransformerType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcTransformerTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcTransformerTypeEnum(IfcTransformerTypeEnum enumData) {
    switch(enumData) {
    case IfcTransformerTypeEnum_CURRENT:
        m_out << ".CURRENT.";
        break;
    case IfcTransformerTypeEnum_FREQUENCY:
        m_out << ".FREQUENCY.";
        break;
    case IfcTransformerTypeEnum_VOLTAGE:
        m_out << ".VOLTAGE.";
        break;
    case IfcTransformerTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcTransformerTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcTransportElement(IfcTransportElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getOperationType())) {
        m_out << "$";
    }
    else {
        writeIfcTransportElementTypeEnum(ptr->getOperationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCapacityByWeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCapacityByWeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCapacityByNumber())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCapacityByNumber());
    }
}

void SPFWriter::writeIfcTransportElementTypeEnum(IfcTransportElementTypeEnum enumData) {
    switch(enumData) {
    case IfcTransportElementTypeEnum_ELEVATOR:
        m_out << ".ELEVATOR.";
        break;
    case IfcTransportElementTypeEnum_ESCALATOR:
        m_out << ".ESCALATOR.";
        break;
    case IfcTransportElementTypeEnum_MOVINGWALKWAY:
        m_out << ".MOVINGWALKWAY.";
        break;
    case IfcTransportElementTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcTransportElementTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcTransportElementType(IfcTransportElementType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcTransportElementTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcTrapeziumProfileDef(IfcTrapeziumProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBottomXDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBottomXDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTopXDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTopXDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getYDim())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getYDim());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTopXOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTopXOffset());
    }
}

void SPFWriter::writeIfcTrimmedCurve(IfcTrimmedCurve *ptr) {
    if (Step::isUnset(ptr->getBasisCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasisCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTrim1())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcTrimmingSelect > >::iterator step_it0 = (ptr->getTrim1()).begin();
            if ((ptr->getTrim1()).size()) {
                writeIfcTrimmingSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTrim1()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcTrimmingSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTrim2())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcTrimmingSelect > >::iterator step_it0 = (ptr->getTrim2()).begin();
            if ((ptr->getTrim2()).size()) {
                writeIfcTrimmingSelect((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTrim2()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcTrimmingSelect((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSenseAgreement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSenseAgreement());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getMasterRepresentation())) {
        m_out << "$";
    }
    else {
        writeIfcTrimmingPreference(ptr->getMasterRepresentation());
    }
}

void SPFWriter::writeIfcTrimmingSelect(IfcTrimmingSelect *selectData) {
    switch(selectData->currentType()) {
    case IfcTrimmingSelect::IFCCARTESIANPOINT:
        writeAttribute(selectData->getIfcCartesianPoint());
        break;
    case IfcTrimmingSelect::IFCPARAMETERVALUE:
        m_out << "IFCPARAMETERVALUE(";
        writeAttribute(selectData->getIfcParameterValue());
        m_out << ")";
        break;
        }
}

void SPFWriter::writeIfcTrimmingPreference(IfcTrimmingPreference enumData) {
    switch(enumData) {
    case IfcTrimmingPreference_CARTESIAN:
        m_out << ".CARTESIAN.";
        break;
    case IfcTrimmingPreference_PARAMETER:
        m_out << ".PARAMETER.";
        break;
    case IfcTrimmingPreference_UNSPECIFIED:
        m_out << ".UNSPECIFIED.";
        break;
        }
}

void SPFWriter::writeIfcTubeBundleType(IfcTubeBundleType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcTubeBundleTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcTubeBundleTypeEnum(IfcTubeBundleTypeEnum enumData) {
    switch(enumData) {
    case IfcTubeBundleTypeEnum_FINNED:
        m_out << ".FINNED.";
        break;
    case IfcTubeBundleTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcTubeBundleTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcTwoDirectionRepeatFactor(IfcTwoDirectionRepeatFactor *ptr) {
    if (Step::isUnset(ptr->getRepeatFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepeatFactor());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondRepeatFactor())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSecondRepeatFactor());
    }
}

void SPFWriter::writeIfcTypeObject(IfcTypeObject *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcTypeProduct(IfcTypeProduct *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcUShapeProfileDef(IfcUShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeSlope())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeSlope());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCentreOfGravityInX())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCentreOfGravityInX());
    }
}

void SPFWriter::writeIfcUnitAssignment(IfcUnitAssignment *ptr) {
    if (Step::isUnset(ptr->getUnits())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcUnit > >::iterator step_it0 = (ptr->getUnits()).begin();
            if ((ptr->getUnits()).size()) {
                writeIfcUnit((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getUnits()).end(); step_it0++) {
                    m_out << ",";
                    writeIfcUnit((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcUnitaryEquipmentType(IfcUnitaryEquipmentType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcUnitaryEquipmentTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcUnitaryEquipmentTypeEnum(IfcUnitaryEquipmentTypeEnum enumData) {
    switch(enumData) {
    case IfcUnitaryEquipmentTypeEnum_AIRHANDLER:
        m_out << ".AIRHANDLER.";
        break;
    case IfcUnitaryEquipmentTypeEnum_AIRCONDITIONINGUNIT:
        m_out << ".AIRCONDITIONINGUNIT.";
        break;
    case IfcUnitaryEquipmentTypeEnum_SPLITSYSTEM:
        m_out << ".SPLITSYSTEM.";
        break;
    case IfcUnitaryEquipmentTypeEnum_ROOFTOPUNIT:
        m_out << ".ROOFTOPUNIT.";
        break;
    case IfcUnitaryEquipmentTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcUnitaryEquipmentTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcValveType(IfcValveType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcValveTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcValveTypeEnum(IfcValveTypeEnum enumData) {
    switch(enumData) {
    case IfcValveTypeEnum_AIRRELEASE:
        m_out << ".AIRRELEASE.";
        break;
    case IfcValveTypeEnum_ANTIVACUUM:
        m_out << ".ANTIVACUUM.";
        break;
    case IfcValveTypeEnum_CHANGEOVER:
        m_out << ".CHANGEOVER.";
        break;
    case IfcValveTypeEnum_CHECK:
        m_out << ".CHECK.";
        break;
    case IfcValveTypeEnum_COMMISSIONING:
        m_out << ".COMMISSIONING.";
        break;
    case IfcValveTypeEnum_DIVERTING:
        m_out << ".DIVERTING.";
        break;
    case IfcValveTypeEnum_DRAWOFFCOCK:
        m_out << ".DRAWOFFCOCK.";
        break;
    case IfcValveTypeEnum_DOUBLECHECK:
        m_out << ".DOUBLECHECK.";
        break;
    case IfcValveTypeEnum_DOUBLEREGULATING:
        m_out << ".DOUBLEREGULATING.";
        break;
    case IfcValveTypeEnum_FAUCET:
        m_out << ".FAUCET.";
        break;
    case IfcValveTypeEnum_FLUSHING:
        m_out << ".FLUSHING.";
        break;
    case IfcValveTypeEnum_GASCOCK:
        m_out << ".GASCOCK.";
        break;
    case IfcValveTypeEnum_GASTAP:
        m_out << ".GASTAP.";
        break;
    case IfcValveTypeEnum_ISOLATING:
        m_out << ".ISOLATING.";
        break;
    case IfcValveTypeEnum_MIXING:
        m_out << ".MIXING.";
        break;
    case IfcValveTypeEnum_PRESSUREREDUCING:
        m_out << ".PRESSUREREDUCING.";
        break;
    case IfcValveTypeEnum_PRESSURERELIEF:
        m_out << ".PRESSURERELIEF.";
        break;
    case IfcValveTypeEnum_REGULATING:
        m_out << ".REGULATING.";
        break;
    case IfcValveTypeEnum_SAFETYCUTOFF:
        m_out << ".SAFETYCUTOFF.";
        break;
    case IfcValveTypeEnum_STEAMTRAP:
        m_out << ".STEAMTRAP.";
        break;
    case IfcValveTypeEnum_STOPCOCK:
        m_out << ".STOPCOCK.";
        break;
    case IfcValveTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcValveTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcVector(IfcVector *ptr) {
    if (Step::isUnset(ptr->getOrientation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOrientation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMagnitude())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMagnitude());
    }
}

void SPFWriter::writeIfcVertex(IfcVertex *ptr) {
}

void SPFWriter::writeIfcVertexBasedTextureMap(IfcVertexBasedTextureMap *ptr) {
    if (Step::isUnset(ptr->getTextureVertices())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcTextureVertex > >::iterator step_it0 = (ptr->getTextureVertices()).begin();
            if ((ptr->getTextureVertices()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTextureVertices()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTexturePoints())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcCartesianPoint > >::iterator step_it0 = (ptr->getTexturePoints()).begin();
            if ((ptr->getTexturePoints()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getTexturePoints()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcVertexLoop(IfcVertexLoop *ptr) {
    if (Step::isUnset(ptr->getLoopVertex())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLoopVertex());
    }
}

void SPFWriter::writeIfcVertexPoint(IfcVertexPoint *ptr) {
    if (Step::isUnset(ptr->getVertexGeometry())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVertexGeometry());
    }
}

void SPFWriter::writeIfcVibrationIsolatorType(IfcVibrationIsolatorType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcVibrationIsolatorTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcVibrationIsolatorTypeEnum(IfcVibrationIsolatorTypeEnum enumData) {
    switch(enumData) {
    case IfcVibrationIsolatorTypeEnum_COMPRESSION:
        m_out << ".COMPRESSION.";
        break;
    case IfcVibrationIsolatorTypeEnum_SPRING:
        m_out << ".SPRING.";
        break;
    case IfcVibrationIsolatorTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcVibrationIsolatorTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcVirtualElement(IfcVirtualElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcVirtualGridIntersection(IfcVirtualGridIntersection *ptr) {
    if (Step::isUnset(ptr->getIntersectingAxes())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcGridAxis > >::iterator step_it0 = (ptr->getIntersectingAxes()).begin();
            if ((ptr->getIntersectingAxes()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getIntersectingAxes()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOffsetDistances())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< IfcLengthMeasure >::iterator step_it0 = (ptr->getOffsetDistances()).begin();
            if ((ptr->getOffsetDistances()).size()) {
                writeAttribute(*step_it0);
                for (step_it0++; step_it0 != (ptr->getOffsetDistances()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute(*step_it0);
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcWall(IfcWall *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcWallStandardCase(IfcWallStandardCase *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcWallType(IfcWallType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcWallTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcWallTypeEnum(IfcWallTypeEnum enumData) {
    switch(enumData) {
    case IfcWallTypeEnum_STANDARD:
        m_out << ".STANDARD.";
        break;
    case IfcWallTypeEnum_POLYGONAL:
        m_out << ".POLYGONAL.";
        break;
    case IfcWallTypeEnum_SHEAR:
        m_out << ".SHEAR.";
        break;
    case IfcWallTypeEnum_ELEMENTEDWALL:
        m_out << ".ELEMENTEDWALL.";
        break;
    case IfcWallTypeEnum_PLUMBINGWALL:
        m_out << ".PLUMBINGWALL.";
        break;
    case IfcWallTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcWallTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWasteTerminalType(IfcWasteTerminalType *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getElementType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcWasteTerminalTypeEnum(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcWasteTerminalTypeEnum(IfcWasteTerminalTypeEnum enumData) {
    switch(enumData) {
    case IfcWasteTerminalTypeEnum_FLOORTRAP:
        m_out << ".FLOORTRAP.";
        break;
    case IfcWasteTerminalTypeEnum_FLOORWASTE:
        m_out << ".FLOORWASTE.";
        break;
    case IfcWasteTerminalTypeEnum_GULLYSUMP:
        m_out << ".GULLYSUMP.";
        break;
    case IfcWasteTerminalTypeEnum_GULLYTRAP:
        m_out << ".GULLYTRAP.";
        break;
    case IfcWasteTerminalTypeEnum_GREASEINTERCEPTOR:
        m_out << ".GREASEINTERCEPTOR.";
        break;
    case IfcWasteTerminalTypeEnum_OILINTERCEPTOR:
        m_out << ".OILINTERCEPTOR.";
        break;
    case IfcWasteTerminalTypeEnum_PETROLINTERCEPTOR:
        m_out << ".PETROLINTERCEPTOR.";
        break;
    case IfcWasteTerminalTypeEnum_ROOFDRAIN:
        m_out << ".ROOFDRAIN.";
        break;
    case IfcWasteTerminalTypeEnum_WASTEDISPOSALUNIT:
        m_out << ".WASTEDISPOSALUNIT.";
        break;
    case IfcWasteTerminalTypeEnum_WASTETRAP:
        m_out << ".WASTETRAP.";
        break;
    case IfcWasteTerminalTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcWasteTerminalTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWaterProperties(IfcWaterProperties *ptr) {
    if (Step::isUnset(ptr->getMaterial())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMaterial());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIsPotable())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIsPotable());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHardness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHardness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAlkalinityConcentration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAlkalinityConcentration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAcidityConcentration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAcidityConcentration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getImpuritiesContent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getImpuritiesContent());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPHLevel())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPHLevel());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDissolvedSolidsContent())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDissolvedSolidsContent());
    }
}

void SPFWriter::writeIfcWindow(IfcWindow *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallHeight())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallHeight());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOverallWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOverallWidth());
    }
}

void SPFWriter::writeIfcWindowLiningProperties(IfcWindowLiningProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLiningDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiningDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLiningThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLiningThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTransomThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTransomThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getMullionThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getMullionThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFirstTransomOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFirstTransomOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondTransomOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSecondTransomOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFirstMullionOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFirstMullionOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSecondMullionOffset())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSecondMullionOffset());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShapeAspectStyle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShapeAspectStyle());
    }
}

void SPFWriter::writeIfcWindowPanelProperties(IfcWindowPanelProperties *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getOperationType())) {
        m_out << "$";
    }
    else {
        writeIfcWindowPanelOperationEnum(ptr->getOperationType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPanelPosition())) {
        m_out << "$";
    }
    else {
        writeIfcWindowPanelPositionEnum(ptr->getPanelPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFrameDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFrameDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFrameThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFrameThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getShapeAspectStyle())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getShapeAspectStyle());
    }
}

void SPFWriter::writeIfcWindowPanelOperationEnum(IfcWindowPanelOperationEnum enumData) {
    switch(enumData) {
    case IfcWindowPanelOperationEnum_SIDEHUNGRIGHTHAND:
        m_out << ".SIDEHUNGRIGHTHAND.";
        break;
    case IfcWindowPanelOperationEnum_SIDEHUNGLEFTHAND:
        m_out << ".SIDEHUNGLEFTHAND.";
        break;
    case IfcWindowPanelOperationEnum_TILTANDTURNRIGHTHAND:
        m_out << ".TILTANDTURNRIGHTHAND.";
        break;
    case IfcWindowPanelOperationEnum_TILTANDTURNLEFTHAND:
        m_out << ".TILTANDTURNLEFTHAND.";
        break;
    case IfcWindowPanelOperationEnum_TOPHUNG:
        m_out << ".TOPHUNG.";
        break;
    case IfcWindowPanelOperationEnum_BOTTOMHUNG:
        m_out << ".BOTTOMHUNG.";
        break;
    case IfcWindowPanelOperationEnum_PIVOTHORIZONTAL:
        m_out << ".PIVOTHORIZONTAL.";
        break;
    case IfcWindowPanelOperationEnum_PIVOTVERTICAL:
        m_out << ".PIVOTVERTICAL.";
        break;
    case IfcWindowPanelOperationEnum_SLIDINGHORIZONTAL:
        m_out << ".SLIDINGHORIZONTAL.";
        break;
    case IfcWindowPanelOperationEnum_SLIDINGVERTICAL:
        m_out << ".SLIDINGVERTICAL.";
        break;
    case IfcWindowPanelOperationEnum_REMOVABLECASEMENT:
        m_out << ".REMOVABLECASEMENT.";
        break;
    case IfcWindowPanelOperationEnum_FIXEDCASEMENT:
        m_out << ".FIXEDCASEMENT.";
        break;
    case IfcWindowPanelOperationEnum_OTHEROPERATION:
        m_out << ".OTHEROPERATION.";
        break;
    case IfcWindowPanelOperationEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWindowStyle(IfcWindowStyle *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getApplicableOccurrence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getApplicableOccurrence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHasPropertySets())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPropertySetDefinition > >::iterator step_it0 = (ptr->getHasPropertySets()).begin();
            if ((ptr->getHasPropertySets()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getHasPropertySets()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentationMaps())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcRepresentationMap > >::iterator step_it0 = (ptr->getRepresentationMaps()).begin();
            if ((ptr->getRepresentationMaps()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getRepresentationMaps()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getConstructionType())) {
        m_out << "$";
    }
    else {
        writeIfcWindowStyleConstructionEnum(ptr->getConstructionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getOperationType())) {
        m_out << "$";
    }
    else {
        writeIfcWindowStyleOperationEnum(ptr->getOperationType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getParameterTakesPrecedence())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getParameterTakesPrecedence());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSizeable())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSizeable());
    }
}

void SPFWriter::writeIfcWindowStyleConstructionEnum(IfcWindowStyleConstructionEnum enumData) {
    switch(enumData) {
    case IfcWindowStyleConstructionEnum_ALUMINIUM:
        m_out << ".ALUMINIUM.";
        break;
    case IfcWindowStyleConstructionEnum_HIGH_GRADE_STEEL:
        m_out << ".HIGH_GRADE_STEEL.";
        break;
    case IfcWindowStyleConstructionEnum_STEEL:
        m_out << ".STEEL.";
        break;
    case IfcWindowStyleConstructionEnum_WOOD:
        m_out << ".WOOD.";
        break;
    case IfcWindowStyleConstructionEnum_ALUMINIUM_WOOD:
        m_out << ".ALUMINIUM_WOOD.";
        break;
    case IfcWindowStyleConstructionEnum_PLASTIC:
        m_out << ".PLASTIC.";
        break;
    case IfcWindowStyleConstructionEnum_OTHER_CONSTRUCTION:
        m_out << ".OTHER_CONSTRUCTION.";
        break;
    case IfcWindowStyleConstructionEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWindowStyleOperationEnum(IfcWindowStyleOperationEnum enumData) {
    switch(enumData) {
    case IfcWindowStyleOperationEnum_SINGLE_PANEL:
        m_out << ".SINGLE_PANEL.";
        break;
    case IfcWindowStyleOperationEnum_DOUBLE_PANEL_VERTICAL:
        m_out << ".DOUBLE_PANEL_VERTICAL.";
        break;
    case IfcWindowStyleOperationEnum_DOUBLE_PANEL_HORIZONTAL:
        m_out << ".DOUBLE_PANEL_HORIZONTAL.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_VERTICAL:
        m_out << ".TRIPLE_PANEL_VERTICAL.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_BOTTOM:
        m_out << ".TRIPLE_PANEL_BOTTOM.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_TOP:
        m_out << ".TRIPLE_PANEL_TOP.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_LEFT:
        m_out << ".TRIPLE_PANEL_LEFT.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_RIGHT:
        m_out << ".TRIPLE_PANEL_RIGHT.";
        break;
    case IfcWindowStyleOperationEnum_TRIPLE_PANEL_HORIZONTAL:
        m_out << ".TRIPLE_PANEL_HORIZONTAL.";
        break;
    case IfcWindowStyleOperationEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcWindowStyleOperationEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWorkControl(IfcWorkControl *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCreationDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreators())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPerson > >::iterator step_it0 = (ptr->getCreators()).begin();
            if ((ptr->getCreators()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCreators()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDuration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDuration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTotalFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTotalFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStartTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFinishTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getFinishTime());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getWorkControlType())) {
        m_out << "$";
    }
    else {
        writeIfcWorkControlTypeEnum(ptr->getWorkControlType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedControlType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedControlType());
    }
}

void SPFWriter::writeIfcWorkControlTypeEnum(IfcWorkControlTypeEnum enumData) {
    switch(enumData) {
    case IfcWorkControlTypeEnum_ACTUAL:
        m_out << ".ACTUAL.";
        break;
    case IfcWorkControlTypeEnum_BASELINE:
        m_out << ".BASELINE.";
        break;
    case IfcWorkControlTypeEnum_PLANNED:
        m_out << ".PLANNED.";
        break;
    case IfcWorkControlTypeEnum_USERDEFINED:
        m_out << ".USERDEFINED.";
        break;
    case IfcWorkControlTypeEnum_NOTDEFINED:
        m_out << ".NOTDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcWorkPlan(IfcWorkPlan *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCreationDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreators())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPerson > >::iterator step_it0 = (ptr->getCreators()).begin();
            if ((ptr->getCreators()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCreators()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDuration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDuration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTotalFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTotalFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStartTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFinishTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getFinishTime());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getWorkControlType())) {
        m_out << "$";
    }
    else {
        writeIfcWorkControlTypeEnum(ptr->getWorkControlType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedControlType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedControlType());
    }
}

void SPFWriter::writeIfcWorkSchedule(IfcWorkSchedule *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getIdentifier())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getIdentifier());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreationDate())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getCreationDate());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCreators())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcPerson > >::iterator step_it0 = (ptr->getCreators()).begin();
            if ((ptr->getCreators()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCreators()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPurpose())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPurpose());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDuration())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDuration());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTotalFloat())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTotalFloat());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getStartTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getStartTime());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFinishTime())) {
        m_out << "$";
    }
    else {
        writeIfcDateTimeSelect(ptr->getFinishTime());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getWorkControlType())) {
        m_out << "$";
    }
    else {
        writeIfcWorkControlTypeEnum(ptr->getWorkControlType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getUserDefinedControlType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getUserDefinedControlType());
    }
}

void SPFWriter::writeIfcZShapeProfileDef(IfcZShapeProfileDef *ptr) {
    if (Step::isUnsetEnum(ptr->getProfileType())) {
        m_out << "$";
    }
    else {
        writeIfcProfileTypeEnum(ptr->getProfileType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getProfileName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getProfileName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDepth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDepth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeWidth())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeWidth());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getWebThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getWebThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFlangeThickness())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFlangeThickness());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getFilletRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getFilletRadius());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getEdgeRadius())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getEdgeRadius());
    }
}

void SPFWriter::writeIfcZone(IfcZone *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
}

void SPFWriter::writeIfcCivilStructureElement(IfcCivilStructureElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
}

void SPFWriter::writeIfcBridgeStructureElement(IfcBridgeStructureElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getStructureIndicator())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeStructureIndicator(ptr->getStructureIndicator());
    }
}

void SPFWriter::writeIfcBridgeStructureIndicator(IfcBridgeStructureIndicator enumData) {
    switch(enumData) {
    case IfcBridgeStructureIndicator_COMPOSITE:
        m_out << ".COMPOSITE.";
        break;
    case IfcBridgeStructureIndicator_COATED:
        m_out << ".COATED.";
        break;
    case IfcBridgeStructureIndicator_HOMOGENEOUS:
        m_out << ".HOMOGENEOUS.";
        break;
    case IfcBridgeStructureIndicator_OTHER:
        m_out << ".OTHER.";
        break;
        }
}

void SPFWriter::writeIfcBridge(IfcBridge *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getStructureIndicator())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeStructureIndicator(ptr->getStructureIndicator());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getStructureType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeStructureType(ptr->getStructureType());
    }
}

void SPFWriter::writeIfcBridgeStructureType(IfcBridgeStructureType enumData) {
    switch(enumData) {
    case IfcBridgeStructureType_BOX_GIRDER_BRIDGE:
        m_out << ".BOX_GIRDER_BRIDGE.";
        break;
    case IfcBridgeStructureType_ARCHED_BRIDGE:
        m_out << ".ARCHED_BRIDGE.";
        break;
    case IfcBridgeStructureType_SUSPENSION_BRIDGE:
        m_out << ".SUSPENSION_BRIDGE.";
        break;
    case IfcBridgeStructureType_CABLE_STAYED_BRIDGE:
        m_out << ".CABLE_STAYED_BRIDGE.";
        break;
    case IfcBridgeStructureType_GIRDER_BRIDGE:
        m_out << ".GIRDER_BRIDGE.";
        break;
    case IfcBridgeStructureType_SLAB_BRIDGE:
        m_out << ".SLAB_BRIDGE.";
        break;
    case IfcBridgeStructureType_SLAB_BRIDGE_WITH_BROAD_CANTILEVER:
        m_out << ".SLAB_BRIDGE_WITH_BROAD_CANTILEVER.";
        break;
    case IfcBridgeStructureType_BOW_STRING_BRIDGE:
        m_out << ".BOW_STRING_BRIDGE.";
        break;
    case IfcBridgeStructureType_LADDER_BRIDGE:
        m_out << ".LADDER_BRIDGE.";
        break;
    case IfcBridgeStructureType_FRAMEWORK_BRIDGE:
        m_out << ".FRAMEWORK_BRIDGE.";
        break;
    case IfcBridgeStructureType_GISCLARD_BRIDGE:
        m_out << ".GISCLARD_BRIDGE.";
        break;
    case IfcBridgeStructureType_PORTAL_BRIDGE:
        m_out << ".PORTAL_BRIDGE.";
        break;
        }
}

void SPFWriter::writeIfcBridgePart(IfcBridgePart *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getLongName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLongName());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getCompositionType())) {
        m_out << "$";
    }
    else {
        writeIfcElementCompositionEnum(ptr->getCompositionType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getStructureIndicator())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeStructureIndicator(ptr->getStructureIndicator());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getStrutureElementType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeStructureElementType(ptr->getStrutureElementType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getTechnoElementType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeTechnologicalElementType(ptr->getTechnoElementType());
    }
}

void SPFWriter::writeIfcBridgeStructureElementType(IfcBridgeStructureElementType enumData) {
    switch(enumData) {
    case IfcBridgeStructureElementType_DECK:
        m_out << ".DECK.";
        break;
    case IfcBridgeStructureElementType_PIER:
        m_out << ".PIER.";
        break;
    case IfcBridgeStructureElementType_SMALL_PIER:
        m_out << ".SMALL_PIER.";
        break;
    case IfcBridgeStructureElementType_PYLON:
        m_out << ".PYLON.";
        break;
    case IfcBridgeStructureElementType_ARCH:
        m_out << ".ARCH.";
        break;
    case IfcBridgeStructureElementType_LAUNCHING_NOSE:
        m_out << ".LAUNCHING_NOSE.";
        break;
    case IfcBridgeStructureElementType_TEMPORARY_BENT:
        m_out << ".TEMPORARY_BENT.";
        break;
    case IfcBridgeStructureElementType_TRANSVERSE_GIRDER:
        m_out << ".TRANSVERSE_GIRDER.";
        break;
    case IfcBridgeStructureElementType_STRUT:
        m_out << ".STRUT.";
        break;
    case IfcBridgeStructureElementType_COUNTER_STRUT:
        m_out << ".COUNTER_STRUT.";
        break;
    case IfcBridgeStructureElementType_CABLE:
        m_out << ".CABLE.";
        break;
    case IfcBridgeStructureElementType_SUSPENDED_TENDON:
        m_out << ".SUSPENDED_TENDON.";
        break;
    case IfcBridgeStructureElementType_SUSPENDER:
        m_out << ".SUSPENDER.";
        break;
    case IfcBridgeStructureElementType_MOBILE_FALSEWORK:
        m_out << ".MOBILE_FALSEWORK.";
        break;
    case IfcBridgeStructureElementType_STAYING_MAST:
        m_out << ".STAYING_MAST.";
        break;
    case IfcBridgeStructureElementType_LAUNCHING_BEAM:
        m_out << ".LAUNCHING_BEAM.";
        break;
        }
}

void SPFWriter::writeIfcBridgeTechnologicalElementType(IfcBridgeTechnologicalElementType enumData) {
    switch(enumData) {
    case IfcBridgeTechnologicalElementType_UNICELLULAR_MONO_BOX_GIRDER:
        m_out << ".UNICELLULAR_MONO_BOX_GIRDER.";
        break;
    case IfcBridgeTechnologicalElementType_MULTICELLULAR_MONO_BOX_GIRDER:
        m_out << ".MULTICELLULAR_MONO_BOX_GIRDER.";
        break;
    case IfcBridgeTechnologicalElementType_UNICELLULAR_MULTI_BOX_GIRDER:
        m_out << ".UNICELLULAR_MULTI_BOX_GIRDER.";
        break;
    case IfcBridgeTechnologicalElementType_MULTICELLULAR_MULTI_BOX_GIRDER:
        m_out << ".MULTICELLULAR_MULTI_BOX_GIRDER.";
        break;
    case IfcBridgeTechnologicalElementType_SOLID_SLAB:
        m_out << ".SOLID_SLAB.";
        break;
    case IfcBridgeTechnologicalElementType_HOLLOW_SLAB:
        m_out << ".HOLLOW_SLAB.";
        break;
    case IfcBridgeTechnologicalElementType_SLAB_WITH_BROAD_CANTILEVER:
        m_out << ".SLAB_WITH_BROAD_CANTILEVER.";
        break;
    case IfcBridgeTechnologicalElementType_DOUBLE_BEAM_RIBBED_SLAB:
        m_out << ".DOUBLE_BEAM_RIBBED_SLAB.";
        break;
    case IfcBridgeTechnologicalElementType_MULTI_BEAM_RIBBED_SLAB:
        m_out << ".MULTI_BEAM_RIBBED_SLAB.";
        break;
    case IfcBridgeTechnologicalElementType_MASSIVE_SECTION_ELEMENT:
        m_out << ".MASSIVE_SECTION_ELEMENT.";
        break;
    case IfcBridgeTechnologicalElementType_HOLLOW_SECTION_ELEMENT:
        m_out << ".HOLLOW_SECTION_ELEMENT.";
        break;
    case IfcBridgeTechnologicalElementType_MARKETED_SECTION_GIRDER:
        m_out << ".MARKETED_SECTION_GIRDER.";
        break;
    case IfcBridgeTechnologicalElementType_RE_ASSEMBLED_SECTION_GIRDER:
        m_out << ".RE_ASSEMBLED_SECTION_GIRDER.";
        break;
    case IfcBridgeTechnologicalElementType_TRUSS:
        m_out << ".TRUSS.";
        break;
    case IfcBridgeTechnologicalElementType_LADDER_OR_VIERENDEEL:
        m_out << ".LADDER_OR_VIERENDEEL.";
        break;
    case IfcBridgeTechnologicalElementType_BOW_STRING:
        m_out << ".BOW_STRING.";
        break;
        }
}

void SPFWriter::writeIfcCivilElement(IfcCivilElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcBridgeElement(IfcBridgeElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcBridgeSegment(IfcBridgeSegment *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getSegmentType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeSegmentType(ptr->getSegmentType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getSegmentParts())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::Set< Step::RefPtr< IfcCivilElementPart > >::iterator step_it0 = (ptr->getSegmentParts()).begin();
            if ((ptr->getSegmentParts()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getSegmentParts()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

void SPFWriter::writeIfcBridgeSegmentType(IfcBridgeSegmentType enumData) {
    switch(enumData) {
    case IfcBridgeSegmentType_TYPICAL_SEGMENT:
        m_out << ".TYPICAL_SEGMENT.";
        break;
    case IfcBridgeSegmentType_PIER_SEGMENT:
        m_out << ".PIER_SEGMENT.";
        break;
    case IfcBridgeSegmentType_PIECE:
        m_out << ".PIECE.";
        break;
    case IfcBridgeSegmentType_LIFT:
        m_out << ".LIFT.";
        break;
    case IfcBridgeSegmentType_ELEMENT:
        m_out << ".ELEMENT.";
        break;
    case IfcBridgeSegmentType_JAMB:
        m_out << ".JAMB.";
        break;
    case IfcBridgeSegmentType_PYLON_HEAD:
        m_out << ".PYLON_HEAD.";
        break;
    case IfcBridgeSegmentType_SPAN:
        m_out << ".SPAN.";
        break;
    case IfcBridgeSegmentType_CANTILEVER:
        m_out << ".CANTILEVER.";
        break;
    case IfcBridgeSegmentType_FINITE_ELEMENT_REFERENCE:
        m_out << ".FINITE_ELEMENT_REFERENCE.";
        break;
        }
}

void SPFWriter::writeIfcBridgeSegmentPart(IfcBridgeSegmentPart *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getSubPartType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeSubPartType(ptr->getSubPartType());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getMechanicalRole())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeMechanicalRoleType(ptr->getMechanicalRole());
    }
}

void SPFWriter::writeIfcBridgeSubPartType(IfcBridgeSubPartType enumData) {
    switch(enumData) {
    case IfcBridgeSubPartType_LEFT_WEB:
        m_out << ".LEFT_WEB.";
        break;
    case IfcBridgeSubPartType_RIGHT_WEB:
        m_out << ".RIGHT_WEB.";
        break;
    case IfcBridgeSubPartType_CENTRAL_WEB:
        m_out << ".CENTRAL_WEB.";
        break;
    case IfcBridgeSubPartType_TOP_SLAB:
        m_out << ".TOP_SLAB.";
        break;
    case IfcBridgeSubPartType_LOWER_SLAB:
        m_out << ".LOWER_SLAB.";
        break;
    case IfcBridgeSubPartType_RIGHT_OVERHANG:
        m_out << ".RIGHT_OVERHANG.";
        break;
    case IfcBridgeSubPartType_LEFT_OVERHANG:
        m_out << ".LEFT_OVERHANG.";
        break;
    case IfcBridgeSubPartType_UPPER_FLANGE_:
        m_out << ".UPPER_FLANGE_.";
        break;
    case IfcBridgeSubPartType_LOWER_FLANGE:
        m_out << ".LOWER_FLANGE.";
        break;
    case IfcBridgeSubPartType_LOWER_FLOORING:
        m_out << ".LOWER_FLOORING.";
        break;
    case IfcBridgeSubPartType_UPPER_FLOORING:
        m_out << ".UPPER_FLOORING.";
        break;
    case IfcBridgeSubPartType_MORPHOLOGY_NODE:
        m_out << ".MORPHOLOGY_NODE.";
        break;
    case IfcBridgeSubPartType_REFERENCE_FIBRE:
        m_out << ".REFERENCE_FIBRE.";
        break;
    case IfcBridgeSubPartType_BRANCH_WALL:
        m_out << ".BRANCH_WALL.";
        break;
        }
}

void SPFWriter::writeIfcBridgeMechanicalRoleType(IfcBridgeMechanicalRoleType enumData) {
    switch(enumData) {
    case IfcBridgeMechanicalRoleType_LONGITUDINAL:
        m_out << ".LONGITUDINAL.";
        break;
    case IfcBridgeMechanicalRoleType_TRANSVERSAL:
        m_out << ".TRANSVERSAL.";
        break;
    case IfcBridgeMechanicalRoleType_COMPLETE:
        m_out << ".COMPLETE.";
        break;
    case IfcBridgeMechanicalRoleType_NONE:
        m_out << ".NONE.";
        break;
    case IfcBridgeMechanicalRoleType_UNDEFINED:
        m_out << ".UNDEFINED.";
        break;
        }
}

void SPFWriter::writeIfcBridgeContactElement(IfcBridgeContactElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getContactType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgeContactType(ptr->getContactType());
    }
}

void SPFWriter::writeIfcBridgeContactType(IfcBridgeContactType enumData) {
    switch(enumData) {
    case IfcBridgeContactType_GLUE:
        m_out << ".GLUE.";
        break;
    case IfcBridgeContactType_RIVET:
        m_out << ".RIVET.";
        break;
    case IfcBridgeContactType_CONNECTOR:
        m_out << ".CONNECTOR.";
        break;
    case IfcBridgeContactType_WELD:
        m_out << ".WELD.";
        break;
    case IfcBridgeContactType_RESUMPTION_OF_CONCRETE:
        m_out << ".RESUMPTION_OF_CONCRETE.";
        break;
    case IfcBridgeContactType_SLIDING:
        m_out << ".SLIDING.";
        break;
        }
}

void SPFWriter::writeIfcBridgePrismaticElement(IfcBridgePrismaticElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
    m_out << ",";
    if (Step::isUnsetEnum(ptr->getPredefinedType())) {
        m_out << "$";
    }
    else {
        writeIfcBridgePrismaticElementType(ptr->getPredefinedType());
    }
}

void SPFWriter::writeIfcBridgePrismaticElementType(IfcBridgePrismaticElementType enumData) {
    switch(enumData) {
    case IfcBridgePrismaticElementType_UNICELLULAR_MONO_BOX_GIRDER:
        m_out << ".UNICELLULAR_MONO_BOX_GIRDER.";
        break;
    case IfcBridgePrismaticElementType_MULTICELLULAR_MONO_BOX_GIRDER:
        m_out << ".MULTICELLULAR_MONO_BOX_GIRDER.";
        break;
    case IfcBridgePrismaticElementType_UNICELLULAR_MULTI_BOX_GIRDER:
        m_out << ".UNICELLULAR_MULTI_BOX_GIRDER.";
        break;
    case IfcBridgePrismaticElementType_MULTICELLULAR_MULTI_BOX_GIRDER:
        m_out << ".MULTICELLULAR_MULTI_BOX_GIRDER.";
        break;
    case IfcBridgePrismaticElementType_DOUBLE_BEAM_RIBBED_SLAB:
        m_out << ".DOUBLE_BEAM_RIBBED_SLAB.";
        break;
    case IfcBridgePrismaticElementType_MULTI_BEAM_RIBBED_SLAB:
        m_out << ".MULTI_BEAM_RIBBED_SLAB.";
        break;
    case IfcBridgePrismaticElementType_MASSIVE_SECTION_ELEMENT:
        m_out << ".MASSIVE_SECTION_ELEMENT.";
        break;
    case IfcBridgePrismaticElementType_HOLLOW_SECTION_ELEMENT:
        m_out << ".HOLLOW_SECTION_ELEMENT.";
        break;
    case IfcBridgePrismaticElementType_SOLID_SLAB:
        m_out << ".SOLID_SLAB.";
        break;
    case IfcBridgePrismaticElementType_HOLLOW_SLAB:
        m_out << ".HOLLOW_SLAB.";
        break;
    case IfcBridgePrismaticElementType_SLAB_WITH_BROAD_CANTILEVER:
        m_out << ".SLAB_WITH_BROAD_CANTILEVER.";
        break;
    case IfcBridgePrismaticElementType_MASTER_BEAM:
        m_out << ".MASTER_BEAM.";
        break;
    case IfcBridgePrismaticElementType_LONGITUDINAL_GIRDER:
        m_out << ".LONGITUDINAL_GIRDER.";
        break;
    case IfcBridgePrismaticElementType_RIGIDITY_BEAM:
        m_out << ".RIGIDITY_BEAM.";
        break;
    case IfcBridgePrismaticElementType_BRACING:
        m_out << ".BRACING.";
        break;
    case IfcBridgePrismaticElementType_UPPER_FLANGE:
        m_out << ".UPPER_FLANGE.";
        break;
    case IfcBridgePrismaticElementType_LOWER_FLANGE:
        m_out << ".LOWER_FLANGE.";
        break;
    case IfcBridgePrismaticElementType_UPPER_FOOTING:
        m_out << ".UPPER_FOOTING.";
        break;
    case IfcBridgePrismaticElementType_LOWER_FOOTING:
        m_out << ".LOWER_FOOTING.";
        break;
    case IfcBridgePrismaticElementType_WEB:
        m_out << ".WEB.";
        break;
    case IfcBridgePrismaticElementType_FLOORING_SHEET:
        m_out << ".FLOORING_SHEET.";
        break;
    case IfcBridgePrismaticElementType_BOTTOM_SHEET:
        m_out << ".BOTTOM_SHEET.";
        break;
    case IfcBridgePrismaticElementType_KERB_SHEET:
        m_out << ".KERB_SHEET.";
        break;
    case IfcBridgePrismaticElementType_CANTILEVER_SHEET:
        m_out << ".CANTILEVER_SHEET.";
        break;
    case IfcBridgePrismaticElementType_PAVEMENT_SHEET:
        m_out << ".PAVEMENT_SHEET.";
        break;
    case IfcBridgePrismaticElementType_AUGET:
        m_out << ".AUGET.";
        break;
    case IfcBridgePrismaticElementType_LONGITUDINAL_WEB_STIFFENER:
        m_out << ".LONGITUDINAL_WEB_STIFFENER.";
        break;
    case IfcBridgePrismaticElementType_RAKER:
        m_out << ".RAKER.";
        break;
    case IfcBridgePrismaticElementType_TRANSVERSE_GIRDER:
        m_out << ".TRANSVERSE_GIRDER.";
        break;
    case IfcBridgePrismaticElementType_DEFLECTER:
        m_out << ".DEFLECTER.";
        break;
    case IfcBridgePrismaticElementType_TRANSVERSE_MEMBER:
        m_out << ".TRANSVERSE_MEMBER.";
        break;
    case IfcBridgePrismaticElementType_TRANSVERSE:
        m_out << ".TRANSVERSE.";
        break;
    case IfcBridgePrismaticElementType_DIAGONALE:
        m_out << ".DIAGONALE.";
        break;
    case IfcBridgePrismaticElementType_JAMB:
        m_out << ".JAMB.";
        break;
    case IfcBridgePrismaticElementType_TENSION_MEMBER:
        m_out << ".TENSION_MEMBER.";
        break;
    case IfcBridgePrismaticElementType_BONDING_BAR:
        m_out << ".BONDING_BAR.";
        break;
    case IfcBridgePrismaticElementType_TRANSVERSAL_STIFFENER:
        m_out << ".TRANSVERSAL_STIFFENER.";
        break;
    case IfcBridgePrismaticElementType_STIFFENER_FOOTING:
        m_out << ".STIFFENER_FOOTING.";
        break;
    case IfcBridgePrismaticElementType_TENDON:
        m_out << ".TENDON.";
        break;
        }
}

void SPFWriter::writeIfcAlignmentElement(IfcAlignmentElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcReferenceElement(IfcReferenceElement *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcReferenceCurve(IfcReferenceCurve *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
}

void SPFWriter::writeIfcReferenceCurve3D(IfcReferenceCurve3D *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCurve3D())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurve3D());
    }
}

void SPFWriter::writeIfcReferenceCurveAlignment2D(IfcReferenceCurveAlignment2D *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getHorizontalAlignment())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getHorizontalAlignment());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getVerticalAlignment())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getVerticalAlignment());
    }
}

void SPFWriter::writeIfcReferencePlacement(IfcReferencePlacement *ptr) {
}

void SPFWriter::writeIfcReferenceCurvePlacement(IfcReferenceCurvePlacement *ptr) {
    if (Step::isUnset(ptr->getCurvilinearAbscissa())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getCurvilinearAbscissa());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getAxis())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getAxis());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRefDirection())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRefDirection());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRelativeTo())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRelativeTo());
    }
}

void SPFWriter::writeIfcReferenceCurvePlacementSystem(IfcReferenceCurvePlacementSystem *ptr) {
    if (Step::isUnset(ptr->getLabel())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getLabel());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getBasedOn())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getBasedOn());
    }
}

void SPFWriter::writeIfcElementPart(IfcElementPart *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcCivilElementPart(IfcCivilElementPart *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcCivilSheath(IfcCivilSheath *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcCivilVoid(IfcCivilVoid *ptr) {
    if (Step::isUnset(ptr->getGlobalId())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getGlobalId());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getOwnerHistory())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getOwnerHistory());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getName())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getName());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getDescription())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getDescription());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectType())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectType());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getObjectPlacement())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getObjectPlacement());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getRepresentation())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getRepresentation());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getTag())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getTag());
    }
}

void SPFWriter::writeIfcClothoid(IfcClothoid *ptr) {
    if (Step::isUnset(ptr->getPosition())) {
        m_out << "$";
    }
    else {
        writeIfcAxis2Placement(ptr->getPosition());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getClothoidConstant())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getClothoidConstant());
    }
}

void SPFWriter::writeIfcReferencedSectionedSpine(IfcReferencedSectionedSpine *ptr) {
    if (Step::isUnset(ptr->getSpineCurve())) {
        m_out << "$";
    }
    else {
        writeAttribute(ptr->getSpineCurve());
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSections())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcProfileDef > >::iterator step_it0 = (ptr->getCrossSections()).begin();
            if ((ptr->getCrossSections()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCrossSections()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
    m_out << ",";
    if (Step::isUnset(ptr->getCrossSectionPositions())) {
        m_out << "$";
    }
    else {
        m_out << "(";
        {
            Step::List< Step::RefPtr< IfcReferencePlacement > >::iterator step_it0 = (ptr->getCrossSectionPositions()).begin();
            if ((ptr->getCrossSectionPositions()).size()) {
                writeAttribute((*step_it0).get());
                for (step_it0++; step_it0 != (ptr->getCrossSectionPositions()).end(); step_it0++) {
                    m_out << ",";
                    writeAttribute((*step_it0).get());
                }
            }
        }
        m_out << ")";
    }
}

